----
Notes OAuth 2.0
http://tools.ietf.org/html/rfc5849
https://tools.ietf.org/html/rfc6749
----

----
definitions:
 - [resource owner]: an entity capable of granting access to a protected
    resource.  Then the resource owner is a person, it is referred to as an 
    end-user.
 - [username]: the resource owner's username with the auth server
 - [password]: the resource owner's password with the auth server
 - [resource server]: the server hosting the protected resources
 - [client]: an application making protected resource request on behalf of 
   the resource owner
 - [authorization server]: the server issuing access tokens to the client after
   successfully authenticating the resource owner
  - in actual implementation the resouce server may be the authorization server 
 - [authorization grant]: a cred rep'ng the resource owner's authorization
 - [authorization code]: a way to skip handing the resource owner's cred's to 
   the client.
 - [implicit grant]: simplified auth for javascript.  The client is issued an 
    access token directly.  Some of the loss in security can be made up with 
    unique redirect urls.
 - [client creds]: the creds the client has est. independently with the auth
    server.  
 - [access token]: are creds used to access protected resources.  The RFC has 
    an example which is in JSON (sec. 4.1.4)
 - [refresh tokens]: tokens used to obtain access tokens.  Used by the client
   when its access token expires - allows them to get a new one.  Is optional
   and included with the access token.  Are only of use to auth server, not 
   resource server.
 - [client_id]: a unique string used to id registed clients with the auth server
 - [authorization endpoint]: the place where the resource-owner auth's with 
    the auth server.
 - [redirect_uri]: the place the auth server will tell the user-agent
    to redirect to after resource-owner has auth'ed with it.  This is typically
    setup during client registration with the auth server.\
 - [token endpoint]: where a client gets its access token.  Typically where 
   the auth grant\code and refresh token are turned into access tokens.
 - [scope]: part of the data sent both to and from the Auth Server, 
   indicates an expiration in a space delimited string.
 - [state]: the RFC 6749 never defines this but uses it as some kinda
    tag-along data the client may want down the request chain.
 - [response_type]: indicates to the [Authorization Server] if the client 
    wants an authorization code or an access token
    'response_type' '=' ('code' | 'token')
----

----
Client Registration
 - a client registers with an auth server prior to init'ng the protocol
  - sets an expectation of who will come'a knockin'
 - purpose is specify a client type, provide client redirect uri's 
   and include additional info required by auth server
 - the [redirect_uri] is very important since its where 
   the auth tokens are sent to, an attacker need only get thier
   uri delivered to the auth server to get the resource-owners
   protected resources
  - as such auth servers should already have a whitelist of 
    redirect uri's per client and should only use those.
  - typically a resource-owner as simply an end-user is auth'ed 
    with the client itself.  the redirect_uri should require 
    some kind of hash to bind incoming request to auth'ed
    end-user
 
 - client types
  (1) web application     (web server)
  (2) user-agent-base app (browser)
  (3) native app          (app store) 
----

----
Protocol Endpoints
 - the request to auth endpoint should include the redirect uri 
   even when there was one already setup in the client registration
  - when the resource-owner is interacting with the auth server
    if the redirect uri is found to be invalid the auth server
    should warn the resource-owner and not redirect them.
  - client's should keep the actual code of thier redirect uri's
    clean and free of all 3rd-party scripts.  The client ought
    to nicely get the creds and again redirect the user-agent 
    to yet another location 
 - for an error a specific object with discrete values is specified 
   in the RFC 
   - see section 4.1.2.1 in RFC 6749
----

----
      +---------------------------------------------------------------------------------------------------------------------+
      |                                               OAuth 2.0 Auth Code Flow                                              |
1     ||+-----Resource-Owner-----+|+--------User-Agent--------+|+-------Auth-Server------+|+-------------Client------------+|
      ||                          |                            |                          |    Redirect to [auth endpoint]  |
4     ||                          |                            |                          |[client_id]                      |
      ||                          |                            |                          |[scope]                          |
      ||                          |                            |                          |[state]                          |
7     ||                          |                            |                          |[redirect_uri]                   |
      ||                          |                            |                          |[response_type='code']           |
      ||                          |                   <............................................                         |
10    ||                          |  GET [auth endpoint] with  |                          |                                 |
      ||                          |          this data         |                          |                                 |
      ||                          |                      ................>                |                                 |
13    ||                          |                            |    Return Login Screen   |                                 |
      ||                          |                   <................                   |                                 |
      ||   grant access request   |                            |                          |                                 |
16    ||                   ................>                   |                          |                                 |
      ||                          |      POST access grant     |                          |                                 |
      ||                          |                      ................>                |                                 |
19    ||                          |                            |Redirect to [redirect_uri]|                                 |
      ||                          |                            |[code]                    |                                 |
22    ||                          |                            |[state]                   |                                 |
      ||                          |                   <................                   |                                 |
      ||                          |GET [redirect_uri] with this|                          |                                 |
25    ||                          |            data            |                          |                                 |
      ||                          |                      ............................................>                      |
      ||                          |                            |                          |       POST [token endpoint]     |
28    ||                          |                            |                          |[client_id]                      |
      ||                          |                            |                          |[code]                           |
      ||                          |                            |                          |[grant_type='authorization_code']|
31    ||                          |                            |                          |[redirect_uri]*                  |
      ||                          |                            |                  <................                         |
      ||                          |                            |   Return [access token]  |                                 |
34    ||                          |                            |                     ................>                      |
      ||                          |                            |                          |                                 |
      ||                          |                            |                          |                                 |
37    ||+------------------------+|+--------------------------+|+------------------------+|+-------------------------------+|

* see RFC 6749 sec. 10.6, "Authorization Code Redirection URI Manipulation", the auth server must confirm the redirect_uri
  which got the auth code is the same as the one exchanging it for a auth token.
   
----

----
      +------------------------------------------------------------------------------------------------------------------------------------+
      |                                                   OAuth 2.0 Implicit Grant Flow                                                    |
1     ||+---Resource-Owner---+|+-------User-Agent-------+|+-------Auth-Server------+|+--------Web-Client-------+|+------Native-Client-----+|
      ||                      |                          |                          |                           | Direct to [auth endpoint]|
4     ||                      |                          |                          |                           |[client_id]               |
      ||                      |                          |                          |                           |[scope]                   |
      ||                      |                          |                          |                           |[state]                   |
7     ||                      |                          |                          |                           |[redirect_uri]            |
      ||                      |                          |                          |                           |[response_type='token']   |
      ||                      |                 <.........................................................................                 |
10    ||                      | GET [auth endpoint] with |                          |                           |                          |
      ||                      |         this data        |                          |                           |                          |
      ||                      |                    ................>                |                           |                          |
13    ||                      |                          |    Return Login Screen   |                           |                          |
      ||                      |                 <................                   |                           |                          |
      || grant access request |                          |                          |                           |                          |
16    ||                 ..............>                 |                          |                           |                          |
      ||                      |     POST access grant    |                          |                           |                          |
      ||                      |                    ................>                |                           |                          |
19    ||                      |                          |Redirect to [redirect_uri]|                           |                          |
      ||                      |                          |[access_token]**          |                           |                          |
22    ||                      |                          |[token_type]              |                           |                          |
      ||                      |                          |[expires_in]              |                           |                          |
      ||                      |                          |[scope]                   |                           |                          |
25    ||                      |                          |[state]                   |                           |                          |
      ||                      |                 <................                   |                           |                          |
      ||                      |   GET [redirect_uri]***  |                          |                           |                          |
28    ||                      |                    ............................................>                |                          |
      ||                      |                          |                          |Return HTML with Javascript|                          |
31    ||                      |                 <............................................                   |                          |
      ||                      |    Execute Javascript    |                          |                           |                          |
      ||                      |            [access token]|                          |                           |                          |
34    ||                      |                    .........................................................................>              |
      ||                      |                          |                          |                           |                          |
37    ||+--------------------+|+------------------------+|+------------------------+|+-------------------------+|+------------------------+|

** this is probably a base64, or something, encoded version of the final [access_token]
*** the [access token] is NOT sent to the Web Client
----

----
 - This flow is for Client's that the Resource Owner highly trust
      +-------------------------------------------------------------------------------------+
      |                      OAuth 2.0 Resource Owner Password Cred Flow                    |
1     ||+-----Resource-Owner-----+|+-------Auth-Server------+|+-----------Client-----------+|
      ||                          |                          |                              |
      ||        Enter creds       |                          |                              |
3     ||                [username]|                          |                              |
      ||                [password]|                          |                              |
5     ||                   ............................................>                    |
      ||                          |                          |Client invokes [auth endpoint]|
7     ||                          |                          |           directly           |
      ||                          |                          |[grant_type='password']       |
9     ||                          |                          |[username]                    |
      ||                          |                          |[password]                    |
11    ||                          |                          |[scope]                       |
      ||                          |                          |                              |
      ||                          |                 <................                       |
13    ||                          |  Return [access token]*  |                              |
      ||                          |                    ................>                    |
15    ||                          |                          |                              |
      ||+------------------------+|+------------------------+|+----------------------------+|

* response doesn't involve a User-Agent is the access token is direct JSON
----

----
      +-------------------------------------------------------------+
      |             OAuth 2.0 Client Credentials Flow **            |
1     ||+-------------Client------------+|+-------Auth-Server------+|
      ||                                 |                          |
      ||  Client invokes [auth endpoint] |                          |
3     ||             directly            |                          |
      ||[grant_type='client_credentials']|                          |
5     ||                          [scope]|                          |
      ||                          ................>                 |
      ||                                 |                          |
7     ||                                 |  Return [access token]*  |
      ||                       <................                    |
      ||                                 |                          |
      ||+-------------------------------+|+------------------------+|

* response doesn't involve a User-Agent is the access token is direct JSON
** The Client is also the resource-owner
----

----
Setting up Google OAuth with ASP.NET MVC

 - the click event hits a controller's ActionResult 
 - this controller method returns an implementation of System.Web.Mvc.HttpUnauthorizedResult (a child type of ActionResult)
   - whose parent class is System.Web.Mvc.HttpStatusCodeResult
   - which has an virtual named ExecuteResult 
   - which is at some point called by the framework prior to returning to the browser.
     - the ExecuteResult is a void return type which is strange because:
	   (1) it received a ref to System.Web.Mvc.ControllerContext from whatever part of the framework called the ExecuteResult
	   (2) the real work is performed by calling the ControllerContext's method chain of 
	       context.HttpContext.GetOwinContext().Authentication.Challenge(AuthenticationProperties, string)
		   - the second arg is a keyword is just "Google" which must be a key to some name-Uri hash somewhere 
		     else in the framework.
		   - the AuthenticationProperties contians the URL of where to callback to on some-site 
		     when the work at separate-site is completed.
	   (3) the framework basically just sent a 302 back to the browser and did all the hard-work of constructing
           a massive URL both targeting separate-site and setting in the query string
           - what is not mentioned here is the prelimiary step of setting up the part from the dialog above 
		     "[...]tell'em some-site sent ya...wait, your gonna need these."  This was accomplished by
			 by going to https://console.developers.google.com/project (because the example is with Google)
			 of setting up the relationship between some-site and separate-site.  This involved telling
			 separate-site some-site's url and, in turn, receiving two tokens from separate-site (Google).
			 (1) a Client ID and (2) a ClientSecert.

- this part is strange, the root of the web-site has a .cs file named Startup.cs whose type name is the same 
 - there is an attribute appearing as [assembly: Microsoft.Owin.OwinStartupAttribute(typeof(< this is Startup.cs's namespace qual. type name.>))]
   at the class level of Startup.cs.
   - this implies that Startup.cs could have been named anything as long as that type name is the same as the one passed into this 
     OwinStartupAttribute.
   - furthermore, is is implied that, although the name may be anything, said "anything" must have an implementation of a method by the 
     signature of 'public void Configuration(IAppBuilder app)' because it is within this method that the (1) Client ID and (2) ClientSecert 
	 are assigned to Owin.IAppBuilder.UseGoogleAuthentication which receives these two literals wrapped in a type at 
     Microsoft.Owin.Security.Google.GoogleOAuth2AuthenticationOptions
   - what is disconcerting is that no where is this 'Configuration(IAppBuilder app)' ever directly called.
	 
- part of what went into the redirect to Google (the 302 returned from the original click event) was the callback Url, this 
  was arbitrary in that it was constructed within the original ActionResult handler (recall that the click event did come back 
  to some-site which simply returned the 302 along with the big'ol Url).

- this callback Url is where separate-site will send its own 302 upon which we are again active in some-site.  
  - first is the property on the controller itself named HttpContext
  - on HttpContext the .GetOwinContext() method is called which returns a Microsoft.Owin.IOwinContext
  - the Authentication property on the IOwinContext is invoked returning a Microsoft.Owin.Security.IAuthenticationManager
- the first call in our targeted callback is to the AuthenticationManager's GetExternalLoginInfoAsync 
  - here I see the appearance of the new 'await' C# keyword.
  - its effort returns an instance of Microsoft.AspNet.Identity.Owin.ExternalLoginInfo
    - this is really bad because this thing is obviously doing something but its a total black-box.
	- based on the IDE gen'ed code this GetExternalLoginInfoAsync isn't something that throws and exception but just returns null 
	  meaning, "it didn't work." - which is even worse since now we not only don't know what this does but also don't know why it 
	  didn't do this whatever it does.
  - if the mysterious GetExternalLoginInfoAsync worked then its returned ExternalLoginInfo is passed to another object which is an 
    extension of Microsoft.AspNet.Owin.SignInManager<T,R>'s method named "ExternalSignInAsync" which returns a enum of 
	Microsoft.AspNet.Identity.Owin.SignInStatus  - this is also a black-box
   
- most of the real work appears to be driven by the GetOwinContext() resulting type of Microsoft.Owin.IOwinContext
----