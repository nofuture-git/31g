Notes Python
----
Think Python, 2nd Edition
By: Allen B. Downey
Publisher: O'Reilly Media, Inc.
Pub. Date: December 9, 2015
Print ISBN-13: 978-1-4919-3936-9
Pages in Print Edition: 300
code examples: http://www.greenteapress.com/thinkpython2/code

The Hitchhiker's Guide to Python
By: Kenneth Reitz; Tanya Schlusser
Publisher: O'Reilly Media, Inc.
Pub. Date: September 14, 2016
Print ISBN-13: 978-1-4919-3317-6
Pages in Print Edition: 300

Docx at 
https://docs.python.org/3.5/reference/index.html

Code Style at 
https://www.python.org/dev/peps/pep-0008/
http://google.github.io/styleguide/pyguide.html

Docstring examples
http://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html

----

----
Command line 
 python [-i | -q | -V | -h ] [ scriptFile | -c command | -m module | - ] [args*]
 -i will execute the script then inter interactive mode
 -q will not print header
 -v will print the version
 -h will print help
 
 - having just the "-" will read command from the standard input stream 
 - args* will be passed to script file in global sys.argv[1:]
 
 - interactive mode
  - has the '>>>' as the command input
  - to clear the console 
  
   >>> import os
   >>> os.system('cls') #for windows; 'clear' for linux\os x 
   >>> os.system('notepad.exe') #have the underlying shell exec
   >>> os.startfile('C:\MyFile\SomeHtml.htm') #will open file using it assoc. program
   >>> os.getenv("JAVA_HOME", default=None) #resolve the enviro var.
   >>> os.getcwd() # like 'pwd' on the shell
   >>> os.chdir('C:\\Projects')  #change dir
   >>> os.listdir('C:\\Projects') # like 'ls' on the shell
   >>> os.mkdir('C:\\Projects\MyPy')

 - import sys module 
   >>> import sys
   >>> sys.modules  #gets a dictionary of modules currently in scope
   >>> sys.path     #get list of where modules will be searched for at
   
 - discover installed packages
   >>> import pip
   >>> installed_packages = pip.get_installed_distributions()
   >>> flat_installed_packages = [package.project_name for package in installed_packages]
   >>> print(flat_installed_packages)
   
   
 - install packages from web
 python -m pip install some_package_name
  - behind corporate firewall
 python -m pip install --proxy DOMAIN\username:password@proxyserver:port some_package_name

 - test for a module being avail for import (ver. 3.4+)
 import importlib
 some_spec = importlib.util.find_spec("some_spec")
 is_found = some_spec is not Null
 
 - the result of the last evaluation may be accessed using a single underscore
 >>> 4 + 2
 6
 >>> _
 6

 - python is interpretated and the source code is typically part of the 
   install (%pyInstall%\Lib\*.py) 
   
 - the python interactive within visual studio has helpful macros
   $clear
   $load "C:\MyDir\MyFile.py" #loads the content directly into interactive
   $reset #resets the interactive
   
 - with Anaconda3 you can add your project using this command at cmd
  conda develop C:\MyDir\MyProj\
----

----
Globals

 PYTHONPATH default search paths(s) for importing modules, is semi-colon separated
 PYTHONSTARTUP a script that is executed each time the python runtime is started 
 PYTHONHOME alt prefix directory for lib modules
 PYTHONCASEOK for Windows where file name case is ignored for import statements
----

----
Ops,
 - arithmetic ops
  + - * / % 
  - exponent is the 
  **
  - integer div (no remainder)
  //
  - order of op is std 
   PEMDAS
  - each arithmatic op has a compound assignment op as well
   
 - bitwise ops   
 << >> & | ~ ^

 - concat
  + for string concat
  * works to repeat a string
   - "MyString "*3
    MyString MyString MyString 
	
 - line comment char is bash style pound 0x23
  # here is line comment
 
 - Py interpretor will concat these together since they
   are nested in parenths
   my_multilineString = (
       "some long line here "
	   "no kind of delimiter at the end "
	   "of these lines."
   )
  
 - block comments may be a here-string
 """
  I write some docx on the api here 
   and what not
 """
  
 - the at symbol is used for decorators (aka. Attributes in .NET)
  @
  
 - ternary
  X if Y else Z
  
 - logical
  or #is short-circuit
  and
  not 
  ==
  != 
  <
  >
  <=
  >=

 - bitwise
  | ^ & << >> ` 

 - sequence assignment (aka unpacking)
 >>> a, b, c, d = [1,2,3,4]
 >>> a, d
 (1,4)
 
 >>> for (a, b, c) in [[1,2,3],[4,5,6]]
 ...    print(a,b,c)
 ...
 1 2 3
 4 5 6
 
 - have a '*' before sequence variable is for when lengths don't match
 >>> for (a, *b) in [[1,2,3],[4,5,6]]: print(a,b) #this will work
 ...
 1 [2, 3]
 4 [5, 6]
 >>> 
 - this can splice list 
 >>> a, *remainder = [1, 2, 3]
  - 'a' is 1, '*remainder' is a list of 2 and 3
 >>> a, *middle, z = [1, 2, 3, 4]

----

----
Literals
 - null is singleton
   None

 - bool
  - actually extends from int
   True  #is an int equal to 1
   False #is an int equal to 0
   >>> 1 == True
   True
   >>> True + 3
   4

 - string
   'my string' #seems more common in docx
   "my string"
  - Esc Seq.
    \newline
    \\
    \n, \r, \t  #std meaning
    \xhh #hex 
   
 - int
   0o177 #for oct
   0x4FD #for hex
   0b1101 #for binary
 - float
   1.23, 3.14e-10, 1. 

 - std lib also include
  - decimal #fixed precision 
  - fraction #keeps numerator and denominator separate
   >>> from fractions import Fraction
   >>> Fraction(1,2) + Fraction(2,4)
   Fraction(1,1)
   
 - conversion through global func\ctors
  >>> eval('Fraction(1,2) + Fraction(2,4)') #eval's the py code and returns the result
  Fraction(1,1)
  >>> int(42.3)
  42
  >>> float(878)
  878.0
  >>> myFrac = Fraction(1,2)
  >>> repr(myFrac)
  'Fraction(1, 2)'
  >>> str(myFrac)
  '1/2'
  >>> hex(128)
  '0x80'
  >>> oct(16)
  '0o20'
  >>> bin(8)
  '0b1000'
  >>> hex(ord('\r')) #get hex value of char
  
  - conversions 
   - not as critical as in a strongly type'd lang
   import distutils.util as pyUtil
   myString2Bool = bool(pyUtil.strtobool("false"))

 - "self" is like "this" in C'esque and VB.Net's "Me"
 - modules are just the file themselves
  - a module may define functions and variables with no 
    kind 'class' scope
  - access the current module using
  import sys
  current_module = sys.modules[__name__]
----

----
String Methods
 - S is standin for string instance
 - sub is standin for some sub-string
 
 S.find(sub [, start[, end] ) # -1 if not found
 S.rfind(sub [, start[, end] ) #starts on the right
 S.index(sub [, start[, end] ) #raises error if not found
 S.rindex(sub [, start[, end] )
 S.count(sub [, start[, end] ) #num of times 'sub' is present
 S.startswith(sub) #has same options but why
 S.endswith(sub)
 S.isspace() #test for all whitespace
 S.isalpha() #test for all letters
 S.isdigit() #test for all numbers
 
 S.split([sep [, maxsplit]) #if sep not given, splits on whitespace
                            # for .NET like ToCharArray(), used global list(S)
     filename, ext = "my_local_file.txt".rsplit(".",1)
	 - this would assign 'filename' to "my_local_file" and
	   'ext' to "txt"
 S.join(iterable)  #like .NET string.Join(S,iterable)
 S.replace(old, new)
 S.splitlines([keepends]) #splits string to array on line breaks
 
 S.capitalize() #first char is to upper, rest to lower
 S.expandtabs([num]) #replace \t chars with spaces by num (df is 8)
 S.strip() #like .NET Trim()
 S.lstrip() #left trim
 S.rstrip() #right trim
 S.swapcase() #upper chars to lower, lower chars to upper
 S.upper()
 S.lower()
 S.rjust(width [,fill]) #right-justify padded with fill (df is space)
 S.ljust(width [, fill])
 S.center(width [, fill]) #center-justify
----

----
String formatting
 # sprintf sytle
 '%s %.2f' % ('my string', 1/3.0)
 '%(n)s %(m)i' % {'n' : 'my string', 'm' : 4}
 
 #.NET style
 '{0} {1:.2f}'.format('my string', 1/3.0)
 
 #the zero index is optional for single-arg
 '{:<30}'.format('left aligned')
 'left aligned                  '
 
 '{:0>6}'.format(55)
 '000055'
 
 '{:*^30}'.format("pretty cool")
 '*********pretty cool**********'
 
 '{0:#x}'.format(42)
 '0x2a'
 
 '{:,}'.format(1234567890)
 '1,234,567,890'
 
 #full timestamp
 import datetime
 '{:%Y-%m-%d %H:%M:%S}'.format(datetime.datetime.now())
 '2017-02-24 19:42:01'
----

----
Encoding
 - encoding names
  LATIN-1
  ISO-8859-1
  UTF-8
  UTF-32
  UTF-16
 
 - py source code is utf-8 by default
  - special, very first line comment, can switch 
    src code files to another encoding
# -*- coding=latin-1 -*-

 - codecs are in encodings module
 
 import encodings
 
 myCodec = encodings.codecs.lookup("ISO-8859-1")
 #returns the bytes and len as a tuple
 myBytes, _ = myCodec.encode("<html>")
 myString, _ = myCodec.decode(myBytes)
----

----
Regex Module
 - module named 're'

 re.escape(string) #esc the string for regex matching 
 mobj = re.match(pattern, string [,flags])
 myMatch = re.search(pattern, string [,flags])
 myValue = myMatch.group(1)
 
 - flag options
 re.I ignore case
 re.M multiple lines
 re.L local dependent
 re.U unicode data
 re.S find dot matches
 re.X more readable regex
 
 - esc sequences
 \s whitespace char
 \S non-whitespace char
 \d digit
 \D non-digit
 \W non-words
 \w words
 \b word boundary
 \B non-word boundary
 
 -lookahead
 (?=pattern)
 
 -lookbehind
 (?<=pattern)

 -negative lookahead
 (?!pattern)
 
 -negative lookbehind
 (?<!patter)
 
 pobj = re.compile(pattern [,flags])
 
 #example
 import re
 text = "I play on playground. It is the best ground."
 #gets the matched string
 plookahead = re.findall(r'play(?=ground)', text, re.M | re.I)
 
 #get the matched index
 plookahead = re.search(r'play(?=ground)', text, re.M | re.I)
 plookaheadIdx = plookahead.span()
---- 

----
File IO
 myFile = open(filename, ('r' | 'rb')
  - 'r' for text 
  - 'rb' for binary
  - 'r+' for read\write
  
 myContent = myFile.read() #with 'rb' myContent is a string 
                           #which would contain non-printables
 myFile.read(n)  #read 1 to n more bytes
 myFile.readline() #read upto next newline
 myFile.readlines() #list of strings as content
 
 for ln in myFile #uses line iterator of the file object
 
 myFile = open(filename, ('w' | 'wb'))
 myFile.write(S) #write string 'S' to myFile
 myFile.writelines(I) #write iterable I into w/o adding newline at each end
 myFile.close() #release unmanaged resources
 myFile.tell() #current cursor position
 myFile.seek(offset [, 0 | 1 | 2])
  - 0 is offset from start
  - 1 is offset from current position
  - 2 is offset from end
 myFile.isatty() #bool for if file is connected to a tty-like device
 myFile.flush() #flush file's stdio buffer 
 myFile.fileno() #gets id for this file instance
 
 myFile.closed #true | false
 file.mode # 'r' | 'rb' | 'w' | 'wb' | 'r+'
 file.name #files name
 
 - recommended use try\finally for closing
 try:
     #file used
 finally:
     myFile.close()
	 
 - or, like .NET using statement
 with open('temp.txt', 'r') as myfile:
     #myfile is in scope
----
 
----
IO Util
 os.listdir('C:\\My Documents')
 os.path.exists(path)
 os.path.abspath(path)
 os.path.basename(path)
 os.path.dirname(path)
 os.path.getsize(path)
 os.path.isabs(path)
 os.path.isfile(path)
 os.path.isdir(path)
 os.path.join(path1 [,path2]*)
 (filepath, filename) = os.path.split(path) #splits dir from filename
 (fileNameLessExt, fileExtension) = os.path.splittext(path) #splits filename from extension
 myPath = os.path.join(os.path.expanduser("~"), "AppData\\Roaming")
 
 - get environment variables
 myEnvVar = os.environ.get("SOME_VAR_NAME")
 
 - get python root dir
 pyRoot = sys.prefix
 
 - get machine info at
 import distutils.util as pyUtil
 myMachine = pyUtil.get_platform()
 
----

----
Xml
https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.iter
import xml.etree.ElementTree as pyXml

myData = pyXml.parse("C:\MyDir\MySubDir\MyXml.xml")
#or directly from a string literal 
myData = pyXml.fromstring("<my-xml><i-have-nodes>booyah</i-have-nodes></my-xml>")

myNodes = myData.findall("//my-x-path/to-some/node")
myNode = myNodes[0]
myInnerText = myNode.text

myNodesAttribues = myNode.attrib
myAttrValue = myNodesAttribues['id'] #raises error if not present
#use 'get' to test if an attribute is present
if myNode.get('id') != None:
	myAttrValue = myNone.get('id')

----

----
Lists
 - mutable sequences of object references accessed by offset
 - are 0-indexed
 [] #empty list
 [0,1,2,3]
 myList = ['my string', ['my', 'inner', 'list', 3.1415], 1.23, {}, 'more', 'stuff', 'down' ,'here']
 - to create list of some size init with values
 myBoolList = [False] * 10
 myNullList = [None] * 5
 myTableOfDashes = [["-"] * len(word)] * len(word)
 
 - list slicing syntax
 myOtherList = myList[1:3] 
  - is like C# .Substring(x, y) where x is starting index and y is
    length to read out from that starting index
  - start at '1' out to '3' not including '3' itself
  - C# LINQ syntax like
  var myOtherList = myList.Skip(1).Take(3);
  
 yetAnother = myList[1:4:2]
  - another form of list slice where the third arg is now step size 
  - unspecified step size means '1'
   myList[1:3] same as myList[1:3:1]
 
 something = myList[2:]
  - get everything starting at index 2 out to the end
 andMore = myList[:3]
  - get everything up to but not including '3'

 L.append(X) 
 L.extend(I) #like .NET .AddRange(I)
 L.sort(key=None, reverse=False) #inline sorting
 L.reverse()
 L.index(X [,i [,j]]) #i,j optional index limiters, raised error if 
                      # object 'X' is not found
 L.insert(i, X)
 L.count(X) #occurances of object X
 L.remove(X) #raises exception if not found
 L.pop([i]) #having list op like stacks, df is last item 
 L.clear()
 L.copy() #returns a shallow copy of L
 "some value" in L #to test for item in list
 myOtherList = L[:] 
 - another way to copy a list
 
 - to get only distinct elements cast the list 
   as a set and then back again
 myList = ['my', 'sentece', 'is', 'is', 'here']
 myList = list(set(myList))
 
----

----
List Comprehension
 - in general include three abstract parts
  - first part is the transform
   - you declare anonymous variable and perform some 
     operation, all inline.
   - tuples must be "declared" in parenths
  - second part is one or more 'for' loops 
  - third is a filter typically with and 'if' stmt   
  - only the first two are really 'required' the filter
    is optional
 - always return a value
  
 v0 = [x for x in range(5)] #results in [0,1,2,3,4]
 v1 = [0 for x in range(5)] #results in [0,0,0,0,0]

 [x ** 2 for x in range(5)] #results in [0,1,4,9,16]
  - may include a test condition
 [x ** 2 for x in range(5) if x % 2 == 0]  #results in [1,4,16]
  - may include another comprehension
 [x + y for x in range(3) for y in [10,20,30]]
  - may use 'enumerate' to get both the counter and item at that counter
 a = ['my string', 'my other', 'some third one']
 for i, item in enumerate(a):
     print("{i} {item}".format(i=i, item=item))
  
 - a complicated example from AIMA's py code
 - its in a method def'ed in a class (so their is instance scope)
 
 [Node(next, self, act, problem.path_cost(self.path_cost, self.state, act, next))
                for (act, next) in problem.successor(self.state)]
                
  - the first part here is actually a ctor of a type
  - the params of the ctor contain anonymous "declared" variables 'next' and 'act'
   - the variables self is the instance itself and is already in scope
   - the instance has a property named 'state' 
   - the variable 'problem' is being passed into the method
  - reading it backwards makes more sense to one not familiar w/ py
  - in C# it would look something like
     var listOfTuples = problem.GetSuccessor(this.State);
     var nodesOut = new List<Node>();

     foreach (var t in listOfTuples)
     {
         var nNode = new Node(t.Item2, this, t.Item1,
             problem.GetPathCost(this.PathCost, this.State, t.Item1, t.Item2));
         nodesOut.Add(nNode);
     }
     return nodesOut;

 - another example from AIMA
  states = [s for (a, s) in problem.successor(problem.initial_state)[:n]]
  - 'n' is a integer passed into a function
  - 'successor' returns tuple of types Action and State
  - so this is getting all the Action-State tuples from 'successor' upto the
    'n' count and then only selecting the 'State' from the resulting spliced
    list of tuples
    
 - single string to manifold dictionary 
 mystring = "S -> e | AB | XB, T -> AB | XB, X -> AT, A -> a, B -> a"
 dict([(l[0].strip(), [ll.strip() for ll in l[1].split("|")]) 
 for l in [r.split("->") for r in mystring.split(",")]])
  - starting at the end, first we split the string on comma
    mystring.split(",")
  - this comma-split list is then further split on the "->"
    resulting in a list-of-list
   [r.split("->") for r in mystring.split(",")]
  - then use list index to create a tuple where index (0) is Item1
   l[0].strip() 
  - and index (1) is further split making Item2 another list
   [ll.strip() for ll in l[1].split("|")]
  - finally the whole thing is wrapped in a 'dict' which converts
    it to a dictionary
----

----
Dictionaries
 - mutable mappings of object references accessed by key
 - like assoc. arrays in PHP
 - a.k.a. hashtables

 {} #empty dictionary
 {'myKey' : 4, 'otherKey' : 5}
 {'myInnerDic' : {42 : 'strange'}, 'anotherKey' : 44}
 -use the ctor
 dict(fname='Joe', lname='Sampson', age=44, titles=('something', 'andsomething'))
 
 - other init methods using ctor
 dict(zip('abc', [1,2,3]))
  - same as
 dict([['a',1], ['b',2],['c',3]])
 
 D.fromKeys(['a','b','c'], '') #creates dictionary from a list with df of ''
 
 D.keys()
 D.values()
 D.items() #returns tuple
 D.clear()
 D.copy() #returns shallow copy
 D.update(D2) #union 
 D.update({"myKey":"MyValue"})
 D.get(K) #get by key
 K in D #test for a key (replaces D.has_key(K) )
 for K in D

 - find max key by value 
 myDict = {'A':4,'B':10,'C':99,'D':87}
 myMax = max(myDict, key=myDict.get)
----

----
Tuples
 - immutable sequences of object references accessed by offset
 -like list but are immutable
 
 () #empty tuple
 (0,) #one-item tuple
 (0,1,2,3) #four item tuple
 ('mystring', (88, 'crazy')) #two-item tuple w\item two as another tuple
----

----
Sets
 - mutable unordered collection of unique and immutable objects.
 - support relational ops 
 - when invoking using operator overloads both operands must be sets
 - when invoking using methods the method arg may be any iterable
 
 set() #makes an empty set
 E = set('abcd') #four item set of 'a', 'b', 'c' and 'd'
 E = {'a', 'b', 'c', 'd'} #same as above
 E = {ord(c) for c in 'abcd'} #same, using comprehension
 E = frozenset(range(-5,5)) #set has 10 items being -5...4
  
 v in E #is 'v' contained in set 'E'
 E1 - E2 #returns items in E1 not found in E2
 
 E1 | E2 #union
 E1.union(E2)
 
 E1 & E2 #intersection
 E1.intersection(E2)
 
 E1 <= E2 #is every item in E1 also in E2
 E1.issubset(E2)
 
 E1 >= E2 #is every element in E2 also in E1
 E1.issuperset(E2)
 
 E1 < E2 #is E1 a subset of E2 (where E2 has additional items)
 E1 > E2 #is E1 a superset of E2 (where E1 has additional items)
  
 E1 ^ E2 #symmetric difference
 E1.symmetric_difference(E2)
 
 E1 |= E2 #adds E2's items to E1
 E1.update(E2)
 
 E.add(x) #adds single itme
 E.remove(x) #removes or errors
 E.discard(x) #removes when present
 x = E.pop() #removes and returns some item
 E.clear() #clears the set of all items
 
 for x in E1 #for each iteration
 E1.copy() #makes a shallow copy 
  
 >>> E1 = set('abcd')
 >>> E2 = set('abcd')
 >>> E1 >= E2
 True
 >>> E1 <= E2
 True
 >>> E1 > E2 #they are in fact the same (equal)
 False 
 >>> E1 < E2 #again, are equal
 False
 >>> E1.remove('z') #errors out
 Traceback (most re ...
 >>> E1.discard('z') #no error, nothing returned 
----

----
Syntax Constructs & Conventions
 - blocks are delimited by having the same number of whitespace before the statement
 - nested block is the expression after the ':' on the same line
 - multiple statements on a single line are allowed when separated by a semi-colon (0x3B)
 - single statements may span multiple lines when ending with backslash (0x5C)
 - list, dictionary, tuple and set initializers (literals) may span multiple lines
 - here-string may span multiple lines
 - names begining and ending with double-underscore have special meaning (e.g. __iamspecial__)
 - top-module level names with a single underscore are scoped only to that module
 - there are enough hooks and tools in Py to do almost anything with infinite indirection
 

 - src code is in UTF8
 - .NET properties = Py attributes
 - Py3, indentation must be either tabs or spaces
  - not both
  - spaces preferred
  - one tab equals eight spaces
 - single line should be limited to 72 chars
 - package and module names are short and all lowercase
 - class names should be PascalCase
 - exceptions should be suffixed with 'Error'
 - function names are all lowercase with underscore sep.
  - use '_' prefix for non-public fields and methods
   - this is convention, Py has no private scope
   - therefore everything is overridable
 - function args
  - use 'self' for first arg of instance method
  - use 'cls' for first arg of class method
 - constants are in all uppercase with underscore sep.
 - single 'return' statement is preferred being at the 
   bottom of the functions body.
   - raising an error is the exception
----

----
Function & Call Syntax
 - have four possiable ways to declare parameters
 def my_func(positional, key=valuePair, *args, **kwargs)
  - first two are obvious
  - *args 'Arbitrary argument list' as a list or tuple
  - **kwargs 'Arbitrary Keyword arg dictionary' as a dictionary

 - optional parameters are key=valuePair where value is (None)  
  def send(msg, to, cc=None, bcc=None)
  
 - inline function defined using the 'def' construct
  >>> def myfunc(a, b, c, d): print(a, b, c, d)
  
 - function pointers can be as simple as the assignment op less the parenths
   myFxToBool = bool
   myFxToBool("True") #same as invoke of just 'bool("True")'
  
 - function calls are comma-separated and positional
  - a argname=argvalue is allowed in function invocation
  - var-args are defined with the star or double-star 
   - arg with a star in front is an iterable
   - are with double-star in front is a dictionary
  >>> myfunc(*[1,2], **dict(c=3, d=4))  
  1 2 3 4
----

----
Typical Constructs Syntax

 if test:
     suite
 [elif test
     suite]*
 [else:
     suite]
   
 while test:
     suite
 [else:
     suite]

 for target in iterable:
     suite
 [else:
     suite]

 while myExpression:
     suite

 - for i loop as 
 for i in list(range(len(word))): myTable[i][i] = list(word)[i]
     
 - other single statment keywords and ops
 pass     #noop
 ...      #also noop for 3.X
 break    #exits inner most loop 
 continue #next loop iteration
 del name[i | i:j:k | .attribute] #for data mgmt, not memory mgmt
 
 - lambda expressions, for single line functions
 >>> L = lambda a, b=2, *c, **d: [a, b, c, d]
 >>> L(1,3,2,4,x=1,y=2)
 [1, 3, (2, 4), {'y': 2, 'x': 1}]
  - what appears before the colon is the variable decls
   - the "(x, y) =>" the 'x' and 'y' in .NET before
     the "goes to"

  - py assignment statements do not return anything and 
    therefore the expression body cannot be an assignment
	
	myCls = MyClass()
	myCls.myProperty = False
	#this raises an error
	lambda: myCls.myProperty = True
	#use this instead
	setattr(myCls, 'myProperty', True)
	
 - and example from AIMA
  fitness_fn = lambda s: - problem.path_cost(0, s, None, s)
   - 's' is the only arg, 
   - 'path_cost' returns a int type
   - the neg ('-') sign in front is simply flipping the results 
     to a negative value

 - arbitrary runtime attributes can be added to function def's
 >>> def myfunc(a, b, c, d): print(a, b, c, d)
 >>> myfunc.anAttribute = 'this is arbitrary'
 >>> myfunc.anAttribute
 'this is arbitrary'
 
 - decorators
  - are added atop of a declaration
  - use the Java style '@' char
  - may be added at runtime using the decorator's ctor passing in the def func's variable
  
  @decorator
  def F():
      ...
   - or using runtime attachement
  F = decorator(F)
   
  - allow for multiple decorators by stacking them as separate lines
  @decor00
  @decor01
  @decor02
  def F():
      ....
   - could also be done at runtime like
  F = decor00( decor01( decor02(F)))
----

----
Module Imports
 - use dot as path separated
 - is relative to the install dir
 - the .py extension is ommitted
  dir00.dir01.myMod
  
  import [package.]* module [as name] 
     [, [package.]* module [as name]]
 
 - the 'from ... import' copies all names 
   all names assigned at the top level of 
   the module (except having a single underscore prefix)
 
 from [package.]* module import 
             [(] name [as othername]            
             [, name [as othername]]* [)]
 
 - load a file directly (3.5+)
 import importlib.util
 spec = importlib.util.spec_from_file_location("nofuture.util.etc","/Util/util_py/etc.py")
 toLoad = importlib.util.module_from_spec(spec)
 spec.loader.exec_module(toLoad)
 
 toLoad.name_of_my_py_function()
 
----

----
Try Statement
 - has the standard op
 - py has one extra feature of 'else'
  - the 'else' runs after the try block
    when no exception occurred
 - py allows for simply try\finally as well
 
 try:
     suite
 except [ type | (type1, type2) [as value]]: 
     suite
 [except [type [as value]]:
     suite]*
 [else:
     suite]
 [finally:
     suite]
----

----
With Statement
 - similar to .NET's using(IDisposable)
 - allows for multiple declarations in higher py ver.
  - instead of nesting them within each other
 - the equiv. of IDisposable is implementing the 
   __enter__() and __exit__(type, value, traceback)
 
 with expression [as variable]
         [, expression [as variable]]*:
      suite
----

----
Raise Statement
 - similar to the 'throw' in .NET
 - syntax features are as expected
 
 raise myInstance
 raise myType()
 raise  #throws the last exception caught
----

----
Classes
 - supports multiple inheritance 
 - overcomes the runtime problems of diamond by 
   only using the one to the right.
 - parent types are listed in class decl's 
   parenth's directly after the classname
 - 'pass' has similar meaning to 'abstract' in .NET
 - the order-of-inheritance in the parenths is the 
   canon for resolving multi-inheritance 
 - instantiate a type like
 myInstance = MyPyClass()
 
 #handling multi inheritance
 class Proot:
     attr = 0
 class Pof_00(Proot):
     attr = 1
 class Pof_01(Proot):
     attr = 2
 class Pof_10(Pof_10, Pof_00):  #the order here is what matters
     pass
 myP = Pof_10()
 print(myP.attr) #results in '2'
 
 class Pof_11(Pof_00, Pof_10):
     pass
 myP2 = Pof_11()
 print(myP2.attr) #results in '1'
----

----
Access Modifiers
 - appear to be by convention 

 class MyClass:
	MyPublicProperty = 1
	_MyProtectedProperty = 2
	__MyPrivateProperty = 3
---- 

----
Class Properties
 - quite different from Java & .NET
 - kind of combo between decorators, implicity variables decl
   and esoteric functions

 class MyClass:
	def __init__(self, myPropCtorTimeValue):
		self.MyProp = myPropCtorTimeValue

	@property
	def MyProp(self):
		return self.__MyProp

	@MyProp.setter
	def MyProp(self, val):
		#my encapsulating logic is here
		self.__MyProp = val
----

----
Object Operator Overloads
 - builtin ops are provided by specially named methods
 - are like methods present on all objects
 - all start\end with double-underscore
 
 - sort of like .NET object activator, not typically used
 - py doesn't require the 'new' keyword for instantiation since
   simply call "myVar = MyType()" does this.
 __new__(cls [, args]*)
 
 - this is an object ctor 
 __init__(self [,args]*)
 
 - this is called prior to GC
 __del__(self)
 
 - this my be implement to have the object returned a py code
   as a string literal 
 __repr__(self)
 
 - this is the classic ToString() override
 __str__(self)
 
 - this is neat in that the string format is returned
 - the string construct is the format used in str.format
 __format__(self, formatspec)
  
 - this seems to be a kind of bin serialization builtin
 - returns the object as a types string representation
 __bytes__(self)
 
 - this is just like .NET's GetHashCode() and is used
   for equality ops
 __hash__(self)  
 
 - strange propositional testing of instances...
 - not sure what this is used for, returns as expected 'True' or 'False'
 __bool__(self)
 
 - text has this as "when an instance is called like a function"
 __call__(self [,arg]*)

 - classic operator overloads
 - meaning is obvious, similar to PowerShell's op names
 __lt__(self,other)
 __le__(self,other)
 __eq__(self,other)
 __ne__(self,other)
 __gt__(self,other)
 __ge__(self,other)
 
 - calling "dir(myInstance)" returns an array strings of the 
   instance members
 - this allows for more control over the builtin
 __dir__(self)
----

----
Collection Operator Overloads
 - these are not present on every kind of object
 - are for use of collection-like object types
 
 __len__(self)
 __contains__(self, item)
 
 - this is similar to .NET's GetEnumerator
 __iter__(self) 
 
 - this is like calles on the enumerator.Next()
 __next__(self)
 
 - for index collection access
 __getitem__(self, key)
 __setitem__(self, key)
 __delitem__(self, key)

----

----
Arithmetic & Bitwise Operator Overloads
 - there are variants of these which 
   have the same signature, but are prefixed
   by an 'r' and are called when the 'other'
   operand doesn't have an implementation for 
   these builtins
 - it is also possiable to overload the compound
   assignment operators of these, in such a case
   the builtin is prefixed with an 'i'
   
 __add__(self, other)         # a + b
 __sub__(self, other)         # a - b
 __mul__(self, other)         # a * b
 __truediv__(self, other)     # a / b
 __floordiv__(self, other)    # a // b
 __mod__(self, other)         # a % b
 __divmod__(self, other)      # divmod(a, b)
 __pow__(self, other)         # a ** b
 
 __lshift__(self, other)      # a << b
 __rshift__(self, other)      # a >> b
 __and__(self, other)         # a & b
 __xor__(self, other)         # a ^ b
 __or__(self, other)          # a | b
 
 - these a single operand operators
 - there are also builtins for complex, int, float
   round and index
 __neg__(self)                # -a
 __pos__(self)                # +a
 __invert__(self)             # ~a

----

----
Builtin Global functions
 - a select list, seem most useful from exp.
   and not otherwise listed
 - for eval'ing a single expression
 eval(strExpr [, globals [, locals]]) 
 
 - for eval'ing multiple statements
 exec(strStmts [, globals [, locals]])
 
 - returns a dictionary of all types in scope 
   at the top of the runtime
 globals()
 
 - the opposite of the above, returns a like dict
 locals()
 
 - a kind of reflection for testing
 - 'object' is the type, not an instance
 - 'name' is a string
 hasattr(object, name)
 
 - text has that there is a "built-in help system"
 help([object])
 
 - is the memory location, takes instances and types
 id(object)
 
 - like id but is used by dictionaries for lookups
 - appears to work with both types and instances
 hash(object)
 
 - for console user input
 input([prompt])
 
 - for testing of types
 class Proot:
     attr = 1
 class Pnext(Proot):
     pass
 myP = Pnext()
 type(myP) is Proot      # is false
 type(myP) is Pnext      # is true
 isinstance(myP, Proot)  # is true
 isinstance(myP, Pnext)  # is true
 
 - ctor for a kind of root object of all types (py 3.X)
 object()
 
 - for calling the parent's implementation of the method 
   (being called from within the override)
 - the arg params are implicitly passed to the parent
 super() 
----

----
Top Level Builtin Exception types
 Exception 
 ArithmeticError
 BufferError
 LookupError
 LookupError
 OSError  - for wrapping a lower OS related error
 WindowsError - extends OSError, for windows only

 - throw an exception
 raise ValueError('an exception message')
----
 
----
Variable Names
 - std C-style rules

 - keywords
and
as
assert
break
class
continue
def
del
elif
else
except
False
finally
for
from
global
if
import
in
is
lambda
None
nonlocal
not
or
pass
raise
return
True
try
while
with
yield
----

----
Unit Tests
import unittest

class TestMyPyType(unittest.TestCase):
    def test_myMethod(self):
		testSubject = MyPyClass()
		testResult = testSubject.myPyMethod(" some string maybe")
		self.assertEqual("some expected result", testResult)
		
if __name__ == '__main__'
    unittest.main()
	
----