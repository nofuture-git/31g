Notes Docker
----

----
Docker on Windows
By: Elton Stoneman
Publisher: Packt Publishing
Pub. Date: July 13, 2017
Print ISBN-13: 978-1-78528-165-5
Web ISBN-13: 978-1-78528-842-5
Pages in Print Edition: 358
https://github.com/PacktPublishing/Docker-on-Windows
----

----
Arch basics
 - is additive since its being built atop whole OS images
 - logical division is hosts, containers and images
  - hosts run containers
   - as a developer - the host is your machine
  - containers are created from images
   - a container is a running image
  - image is single, complete and self-containted
 - there are base images which are like full OS .iso
  - what is built upon it is a sequence of changes 
    (e.g. installs, commands, etc.)
 - a container only assumes the basics of a machine
  - file system
  - env variables
  - networking
  - console w\ std out and std err streams
 - console output is where Docker looks for log entries
 - images are then avail on various web hosts
 - Docker Hub is large repo for Linux distros and Microsoft Windows
 - Docker Cloud is a pub\priv repo with auth control
 - Docker Store is a commercial repo to purchase images   
----

----
Various Windows Paths
 C:\Users\{username}\AppData\Roaming\Docker
 C:\ProgramData\Docker
 - this is the location of the built images
 
 C:\ProgramData\DockerDesktop
 C:\Users\{username}\AppData\Local\Docker

 - settings file at
 C:\Users\{username}\AppData\Roaming\Docker\settings.json

 - corp proxy server syntax as:
 username:password@proxy.host.com:8080
 
 - to print the current settings
 C:\> docker info
 
 - service name 
 C:\> Restart-Service com.docker.service
 
 - Docker Engine
 C:\Program Files\Docker\Docker\Resources\dockerd.exe
 
 - Docker Service 
 C:\Program Files\Docker\Docker\com.docker.service
 
 - Docker Desktop
 C:\Program Files\Docker\Docker\Docker Desktop.exe
 
 - Docker Network Adapter
 Get-NetAdapter "vEthernet (DockerNAT)"
----

----
CLI basics
 - is a Windows Service in Windows (Daemon otherwise)
 - the Docker CLI issues its commands to this local win service
 - obviously these can be separated across diff machines
 - Docker will add a virtual Ethernet connection 
  - see Control Panel > Network and Internet > Network and Sharing Center
 - typically two task are to package an image and to run an image
 - using Windows or Linux containers is a global setting
  - can be set from the context menu of the tray icon
 
 C:\> docker image build . --file myCustomDockerFile --tag myuser/my-app
  - notice the "." in the middle - this is the output directory
  - tag convention is {user}/{app}
  - the "--file" switch allows for override implied "Dockerfile" filename 
    with some custom docker file name
  - the general form of a image name is:  
   {registry-domain}/{account-id}/{repository-name}:{tag}
   - docker will use "docker.io" as a default registry-domain (like localhost)
 
 C:\> docker container run --interactive --tty --name myalias `
      --volume C:\MyHostMachine:C:\MyDockerImg myuser/my-app powershell
  - the "powershell" at the end is actually run in the container
  - the "--name" is to assign some name other than the very long hex value
  - "--volume" is to share some directory with the container while its running
   - takes the form of {source}:{target}
  - "--name" is useful in that its a handle from CLI but its also 
    a kind of DNS host name now in scope to any other container on the host
  - "--env-file" is another option where the environment variables 
     are defined in a separate file using {env var name}={env var value}{\n}
 
 C:\> docker container inspect myuser/my-image
  - gets JSON data about the given container
 
 C:\> docker image inspect myuser/my-image
  - likewise, JSON about the given image
   
 C:\> docker search microsoft
  - list the avail. images from microsoft
  
 C:\> docker pull mcr.microsoft.com/dotnet/framework/sdk:4.7.1
  - downloads the image to the local machine
  
 C:\> docker image ls 
  - prints all the built\pulled images you have on your machine

 C:\> docker image rm --force {REPOSITORY}:{TAG}
  - where REPOSITORY and TAG is from the output of docker image ls
  - can also use the IMAGE ID 
  
 C:\> docker container logs
  - prints all the logs of all containers
  
 C:\> docker image tag myuser/my-image:latest myuser/my-image:5.5.1
  - give an alias to an image 
  - alias-to-image is many-to-one, same image may have many alias
  - does not create another copy, just another ref
----

----
Docker files
 - are the composition of images as a declarative and procedural 
   sequence of statements
 - is a token-word kind of lang
  (e.g. FROM, COPY, RUN, CMD, WORKDIR)
 - require some base images\OS either locally or from Docker Hub
 - statement delimiter is LF 
 - files are in UTF-8
 - escape-sequence is the C-style backslash so Windows file paths
   need the double-slash "\\"
 - octothrop (\x23) is to define a directive 
 
 FROM microsoft/dotnet AS myalias
 - example of most basic possible dockerfile - is just the base image itself
 - the "myalias" is a file-scoped reference back to this image
   using the "--from" switch
 
 COPY --from myalias C:\somewhere\on\microsoft\dotnet\drive C:\to\location\on\microsoft\aspnet\drive
 - example of using COPY where the source is actually another image scoped within the 
   Dockerfile 
 
 # escape=`
 - "escape=`" would redefine esc-char to match powershell, allow for
    less double-slash in windows paths

 WORKDIR C:\myapp
 - sets the current directory within the file system of the given image
 - like invoking "Push-Location C:\myapp" or its like

 RUN msbuild .\mySln.sln
 - is scoped to the current image's drive 
 - is exec'ed within the docker build command
 
 CMD ["powershell.exe", "c:\\scriptFile.ps1"]
 - is scoped to the current container's drive (a.k.a. running-image)
 - is exec'ed within the docker container run command

 ARG MY_CUST_ARG=FOO
 - for assigning values at build-time
 - allow for variable def's in docker file with default values
 - use the variable as
  C:\> docker image build --build-arg MY_CUST_ARG=BAR --tag myuser/my-image

 ENV MY_ENV_VAR="default value"
 - for assigning values at run-time
 - sets the machine environment variables
 - can scope this using ${MY_ENV_VAR} within the dockerfile
 - use the variable as 
  C:\> docker container run --env MY_ENV_VAR='new value' myuser/my-image

 EXPOSE 80
 - has port 80 exposed to receive
 - to link it to a running image
  
  C:\> docker container run --detach --publish 6618:80 --name myalias myuser/my-image
   - read from host port 6618 and write it to container port 80
   
  C:\> docker container inspect --format '{{ .NetworkSettings.Networks.nat.IPAddress }}' myalias

 SHELL ["powershell"] 
 - has the default shell changed from CMD.exe to PowerShell.exe
 
 VOLUME C:\\app\\logs
 - defines a persisted directory within an image
 - what is written\changed within it will remain
  - differs from typicaly image-as-an-ISO where everything is always
    read-only
  - useful for containers to keeps logs
  
  C:\> docker container run --interactive --tty --name myalias myuser/my-app
   - first have to assign some alias to a container
  
  C:\> docker container run --interactive --tty --volumes-from myalias myuser/my-other-app
   - can also be written as "myalias:ro" for "read-only" 
   - will be present on the host machine, 
   
  C:\> docker container inspect --format '{{ json .Mounts }}' myalias | ConvertFrom-Json
  
 HEALTHCHECK --interval=5s --retries=5 CMD powershell -command "Get-HeathOfWebsite"
 - repeated command to tell Docker how to check the container
 - the results of the CMD needs to be '0' for healthy, '1' otherwise
 - upon a return value of '1', Docker will reattempt 5 times (3 is default)
 - important to use of Docker swarm
----

----
Use Docker with existing .NET Framework apps
 - .NET core is new
 - .NET framework is the name for what used to be known as just ".NET"
 - classic ASP.NET, along with many NuGet pkgs, require .NET framework
 - Microsoft Nanoserver hosts .NET core
  - it will not host .NET framework
 - Microsoft Windows Server Core hosts .NET framework
  - it is substantially larger
  - it has many services and un-needed features which must run in background
  - its size causes everything to take longer
  - need to add custom code to write IIS logs to console as a stream
  - need to switch web.config settings to use environment variables
----

----
Example Word2Vec
 - Ubuntu for building and running Word2Vec
 - switch to Linux containers from the Docker Desktop settings
 - example assumes downloaded and decompressed very large GoogleNews-vectors-negative300.bin.gz
  - up the allowed memory in Docker Desktop > Settings > Advanced to at least 4GB since
    the vectors bin file is 3.5 GB and its fully read into memory with "alloc"
  - volume (aka shared dir) is on sub-directory since on Windows merged volumes don't work
  - its from news articles so its got alot of macabre relations - try the word "near"
 
PS C:\> docker pull ubuntu:latest
PS C:\> $dockerfileContent = @'
FROM ubuntu
ARG proxy_server

RUN echo "Acquire::http::Proxy \"$proxy_server/\";" > /etc/apt/apt.conf.d/proxy.conf
RUN echo "Acquire::https::Proxy \"$proxy_server/\";" >> /etc/apt/apt.conf.d/proxy.conf

RUN apt update
RUN apt-get --yes install build-essential
RUN apt-get --yes install wget
RUN echo "http_proxy=$proxy_server" > /etc/wgetrc
RUN echo "https_proxy=$proxy_server" >> /etc/wgetrc

RUN apt-get --yes install git-core
RUN git config --global http.proxy "$proxy_server"

RUN git clone https://github.com/tmikolov/word2vec.git
WORKDIR /word2vec
RUN make

# shared location for the 3.5G GoogleNews-vectors-negative300.bin file
VOLUME /word2vec/corpus 
'@
PS C:\> $pwd = $(pwd).Path; $dockerFileFullName = Join-Path $pwd "Dockerfile"; 
PS C:\> [System.IO.File]::WriteAllText($dockerFileFullName, $dockerfileContent, [System.Text.Encoding]::UTF8)
PS C:\> $myPassword = 'Pa$sW0rd'
PS C:\> $proxyServer = "http://myusername:$myPassword@proxy.domain.com:9090"
PS C:\> docker image build . --build-arg proxy_server=$proxyServer --tag nofuture/word2vec:v0.0.1
PS C:\> docker container run --interactive --tty --volume C:\Temp\corpus:/word2vec/corpus nofuture/word2vec:v0.0.1
root@56ac8f9d4d46:/word2vec# ./distance /word2vec/corpus/GoogleNews-vectors-negative300.bin

 - from here the program is running and you enter a word and its does its thing
----

----
Docker Compose 
 - next level abstraction, containers are grouped into "services"
  - with Docker, the logical-unit will be container(s) so something is 
    needed to form the composition of them
 - are defined using YAML and specific file name of 'docker-compose.yml'
 - a service is some container and all its config info declared 
 - main section is "services" in which each service is defined
 - the "volumes" and "network" definitions are separate since this 
   is typically what's shared among the various services
   - "networks" allow you to declare, and name a Docker host
    
 version: '3.7'
 
 services:
  some-name-here:
   image: myuser/my-image
   environment: 
    - MY_ENV_VAR="default value"
    - MY_OTHER_VAR=-someSwitchOrSomething
   volumes:
    - C:\Temp\corpus:/word2vec/corpus
   networks:
    - nd-net
  
  another-service-here:
   image: myuser/my-other-image
   depends_on:
    - some-name-here
   networks:
    - nd-net
     
  some-top-level-thing:
   image: myuser/over-the-top:v0.0.1
   env_file:
    #this would be in same dir as this docker-compose.yml file
    - my_env_cfg.env 
   depends_on:
    - some-name-here
    - another-service-here
   networks:
    - nd-net
     
 networks:
  nd-net:
    external:
      name: nat
  

 - has its own CLI named "docker-compose" 
PS C:\> docker-compose --version

 - to run a docker-compose.yml
  - host will append prefix & suffix to service name
 {containing folder name}_{service name in compose file}_{ordinal}
PS C:\> docker-compose up --detach
   
 - to scale one particular container within the host
 - use the name declared in the docker-compose file 
 - this will result in having three of these running on the host
  - each with an ordinal suffix of 1, 2, 3
 - the docker host will round-robin request to each
PS C:\> docker-compose up --detach --scale another-service-here=3
----

----
Docker Swarm
 - a kind of distributed computing of Docker host\services
 - interprocess comm between all hosts throughout the swarm are encrypted (TLS)
 - designed as manager-worker arch 
  - dev\admin interface with manager while 
  - users interface with the worker-containers
 - the two main commands to manage a Docker swarm
  - [...] is a standin, not actual syntax
 PS C:\> docker swarm [...]
 PS C:\> docker node [...]
----

