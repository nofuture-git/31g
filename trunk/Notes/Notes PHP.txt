Notes PHP
----
Programming PHP, 3rd Edition
By: Kevin Tatroe; Peter MacIntyre; Rasmus Lerdorf
Publisher: O'Reilly Media, Inc.
Pub. Date: February 15, 2013
Print ISBN-13: 978-1-4493-9277-2

Examples: http://examples.oreilly.com/0636920012443/

Doc: http://php.net/manual/en/index.php

for cmd line: http://php.net/manual/en/features.commandline.introduction.php
----

----
Syntax enclosures
 - standard is XML style
 <?php 
   //php code here
  ?>
  
 - when a file is all PHP code the closing 
   tag is ommitted.
   <?php
   //code here
   
   <EOF>
   
 - single line resolution is available
   similar to ASP 
  <p>A Number: <?= 2+2 ?> </p>
----


----
Imports and Includes
 - has two flavors
 include & require
  - include will not error-out if file cannot be found
  - require will error-out when file is not found.
  - syntax like VB where parenths are optional
 require "myfile.php";
 require("myOtherFile.php");
 include "myThirdFile.php";
 include("yetaFourthFile.php");

 - adding the amp operator to the front of include 
   will cause it to continue quietly
 @include "myFile.php";
 
 - remote files may be retrieved as well
 include("ftp://myServer/Somefile.php");
 include("http://myServer/AnotherFile.php");
----

----
Reference
 - to print an object to console 
  echo var_dump($expr);

 - the constant PHP_EOL may be used instead of "\n"

 - set response headers using the global 
 header("Content-Type: text/plain");
 
 - set cookies using 
 setcookie(name [, value [, expire [, path [, domain [, secure]]]]]);
 
 - encode to json
  - uses the json extension
 $myJson = json_encode(array);
 $myArray = json_decode(string);
 
 - to encode a PHP object you implement the JsonSerializable interface
  - which requires you implement the jsonSerialize() method which 
    returns typically an assoc. array.
	
 - make web requests
  - uses the curl extension
  $myUrl = "http://somewhere.net/something/iNeed";
  $curlObj = curl_init();
  curl_setopt($curlObj, CURLOPT_URL, $myUrl);
  
  $rspn = curl_exec($curlObj);
  $rslt = curl_getinfo($curlObj);
  
  curl_close($curlObj);
  
 - update something
  $someData = json_encode(array("something" => 4));
  $rqstData = http_build_query($someData, '', '&');
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $myUrl);
  
  $fh = fopen("php://memory", "rw"); //memory stream;
  fwrite($fh, $rqstData);
  rewind($fh);
  
  curl_setopt($ch, CURLOPT_INFILE, $fh);
  curl_setopt($ch, CURLOPT_INFILESIZE, mb_strlen($rqstData));
  curl_setopt($ch, CURLOPT_PUT, true);
  
  $rspn = curl_exec($ch);
  $rslt = curl_getinfo($ch);
  
  curl_close($ch);
  fclose($fh);
  
  - to post data - its the same only using
  curl_setopt($ch, CURLOPT_POSTFIELDS, $rqstData);
  curl_setopt($ch, CURLOPT_POST, true);
  
 - set curl proxy server
 - http://stackoverflow.com/questions/5211887/how-to-use-curl-via-a-proxy
  curl_setopt($ch, CURLOPT_PROXY, "127.0.0.1:9090");
  curl_setopt($ch, CURLOPT_PROXYUSERPWD, "myUsername:myPassword");
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_HEADER, 1);
----

----
PEAR 
 - PHP Extension and Application Repository
 - pear.php.net
----

----
History
 - created by Rasmus Lerdorf in 1994
 - PHP stands for Personal Homepage Tools
 - ver. 1 was 1995
 - ver. 2 in 1996
 - Zeev Suraski & Andi Gutmans re-wrote underlying
   parser for PHP 3
 - ver. 3 in 1998 as an Open Source project
 - ver. 4 in 2000
----

----
On Windows IIS
 - requires CGI is enabled
  - CGI means Common Gateway Interface
   - defined in RFC 3875
   - allows for invocation of executables from 
     web requests.
   - idea is that executables generate dynamic 
     content.
  - FastCGI uses a single process to handle 
    all the request instead of a new process per
	request.
 - you then must add a Module Mapping into IIS 
   to have IIS send *.php request to the php-cgi.exe
 - the end result is at %windir%\system32\inetsrv\config\applicationHost.config
   configuration/system.webServer/fastCgi/application[@fullPath='C:\PHP\php-cgi.exe']
    -and-
   configuration/location[@overrideMode='Allow']/system.webServer/handlers[@accessPolicy='Read, Script']/add[@name='PHP_via_FastCGI']
----

----
Basics
 - is loosely types
 - function names are not case-sensitive
 - variable names are case-sensitive
 - statement terminator is the semi-colon
 - enclosures are curly-brace
 - line comments are same as C-style 
    - older ver. supported Unix shell style (hash mark)
 - block comments are C-style
 - variable names begin with $ 
 - language constructs are special cases
   which look like function but are not
   - they may be invoked with or without parenths
 
 - integer primitives (literals) 
  Dec 1241
  Oct 0755
  Hex 0x4B
  Bin 0b001001
 
 - floating point
  3.14
  0.017
  0.221E1
  14.0E-3
  
 - strings are enclosed in double-quotes
  - esc char is the \ (same as C-style)
  - may be enclosed in single-quotes 
  - operate like powershell's 
    - except the $ appears within the curly
	"something within the {$myVar}st string!"
	"$myVar looks like powershell"
  - here-strings are defined as 
  $myHereString = <<< AnyIdHere
   Lorem ipsum dolor sit amet, consectetur adipiscing elit. 
   Morbi hendrerit leo id justo interdum, eu luctus urna tincidunt. 
   Integer eu ex libero. 
   Curabitur quis est volutpat, suscipit massa iaculis, posuere nisl. 
   Vivamus mollis erat sed sem vulputate auctor. AnyIdHere;
  - the here string terminator is the identifier that appeared to 
    the right of the <<<. 
  - notice the terminating identifier has a semi-color after 
    it.
  - printf(); is the string formatter function 
   - intended for formatting numbers to various base
    printf("0x%X", 12); //would print 0xC
  - var_dump() is a global function like JS's console.debug   
  
 - boolean 
  - literals are 'true' and 'false'
   - in addition the following are also propositional false
    0
	0.0
	"" 
	"0"
	NULL
	an empty array
----

----
Operators
 - Assignment
 $myVar = 60;
 $myVar = "sixty";
 //by ref
 $myRef =& $myVar;
 $myRef .= "seventy";
 - compound assignment ops are supported
 +=, -=, etc.

 - Standard Arithmetic
  +, -, *, /, %
  
 - String Concat 
  . 
  - this is not C-style 
  
 - Auto increment 
  ++, --
  
 - Propositional
  ==, !=, >, >=, <, <=
  - in addition there are 
  === and !== 
   - for these both operands are
     both equal and the same type.

 - Bitwise
  ~, &, |, ^, <<, >>
  
 - Logical
  &&, ||, xor, !
  - in addition the operators
   and, or 
    - may be used instead of && and ||

 - Ternary op is supported
  ? : 
	
 - Idiomatic
 @ will suppress errors 
 ` ` will execute whatever is between the ticks
     as a shell commmand returning its output
 instanceof  will test type 	 
 
----

----
Casting
 - although loosely typed casting is possiable 
 - syntax appears like in C-style
 (int), (bool), (float), (string), (array), (object), (unset)
  - additionally 
  (int) may be (integer)
  (bool) may be (boolean)
  (float) may be (double) or (real)
 - (unset) is unique in that it cast
    the variable to the NULL singleton 
----

----
Flow-Control
 if, elseif and else 
  - operate as expected
  - tests are enclosed in parenths 
  - blocks are curly
  - single-statements without enclosures are allowed
  
 switch 
  - operates as expected with fallthrough
 
 while
  - operates as expected
  - has allowable VB style alt 
   while (someTest):
    some statement;
	more statements;
   endwhile;
  - do\while alt works as expected
   do {
	stuff
   } while(test);

 for 
  - only works with indexed array (not associative arrays)
  - operates as expected
  - uses std syntax
  - also has a VB style alt
   for(a;b;c):
    stuff;
   endfor;
  - the for-ever is supported
   for(;;) //ever
   
 foreach
  - uses a copy of the array 
  - operates in opposite of expected
  foreach($collection as $item){ }
  - where the collection appears first then the iter item 
  - since hashtables are a kind of array, they have special syntax
  foreach($myHashtable as $key => $value){
	//both $key and $value are in scope.
  }
  - has a VB style alt
   
 break
  - operates as expected in a loop
  
 try\catch
 - operates as expected
 - allows for exception casting in catch
 try{ } catch(PDOException $ex) { }
 
 exit
  - operates like powershell's break
 
 goto 
  - is supported 
  - labels are delcared with 
   myLabel:
----

----
Functions
 - PHP has many global functions
 - are invoked in the expected manner
 - are defined in expected manner using
   the 'function' keyword
 - are conventionally defined in all lowercase
 
 - variables may be assigned to function enclosures
 $callback = function(){
	//some statements
 };
 
 - parameter default values are excepted
 function myFunction($someParam = "my value"){
	//do stuff
 }
 
 - functions may be invoked with or without thier parameters
 function beinLazy($a, $b){
	//stuff
 }
 beinLazy(1);  //this is valid
 beinLazy(1,2);
 
 - since types are definable, parameters may be specified as some type
 class MyType {}
 
 function usesMyType(MyType $someParam){
	//stuff
 }
 
 usesMyType(new MyType);
 
 - subroutines (in the VB sense) still return NULL.
 
 - for a function to return by-ref, both its declaration and invocation 
   require the amp char 
   
   function &myByRef($someParam){ 
	//stuff
   }
   $byRef =& myByRef(" sels");
   
 - anonymous enclosures are supported
 usort($array, function($a, $b) { return -1;});
 - externally scoped variables may be passed to 
   anonymous enclosures with the use ($myVar) syntax
 $myVar = "I defined something";
 usort($array, function($a, $b) use ($myVar) { return -1;});
----

----
String Functions
 - involve typical 
 strlen, trim, ltrim, rtrim
 - trim functions allow for a second string 
   arg where you can specify whitespace chars you do 
   NOT want removed
 
 strtolower, strtoupper, ucfirst, ucwords
 
 - lt-zero if arg0 sorts before arg1, gt-zero vice versa 
   and just zero for equality
 strcmp(arg0, arg1); 
 
 - same, only ignoring case
 strcasecmp(arg0, arg1);
 
 - substring function
 substr(arg0, start [, len]);
  - get the remainder of the string after the first appearance of arg
 strchr(string, arg); 
  - same as previous only working from the last appearance
 strrchr(string, arg);
 
 - gets the count of small string contained within big string
 substr_count(big_string, small_string); 
 
 - replaces string by index
 substr_replace(original, new, start [, len]);
 
 - reverse a string
 strrev("a man a plan panama"); 
 
 - pad a string
 str_pad(toPad, len [, with [, padtype]]);
  - default 'with' is a space (0x20)
  - the 'with' can be a string or a single-char
  - the padtype is for constants
   STR_PAD_RIGHT, STR_PAD_LEFT and STR_PAD_BOTH
 
 - break a string into an array
  explode(separator, string [, limit]);
  
 - join an array into a single string
  implode(separator, array);
  
 - to iterate a string by some separator
  strtok(string, separator);
   - called the first time
  strtok(separator);
   - called each subsequent time
   
 - to parse a string by some template
 sscanf(string, template);
 sscanf(string, template [, var1]*);
  - template uses the sequences avail to printf 
  
 - index of
 strpos(string, arg); 
  - arg may be a string or a single char
 
 htmlentities("<>&"); //encodes to html esc &lt;&gt;&amp;
 
 strip_tags("<p> Html enclosed string</p>");
 
 - replaces the space with %20
 rawurlencode("Encode this"); 
 
 - for query strings, where space is now '+' sign
 urlencode("myStuff have values"); 
 urldecode("myStuff+have+values");
 
 - breaks the url into the standard parts (e.g. scheme, host, path, query, etc).
 parse_url(url);
----

----
Regex
 - regex is enclosed in both double-quote and slash "/cat|dog/"
 - the 'captures' is some out variable
 preg_match(pattern, string, [, captures]);
 
 - for repeatedly matching from wher the last match ended until no more matches can be made
 preg_match_all(perl_style_pattern, string, matches [, (PREG_PATTERN_ORDER|PREG_SET_ORDER)]);
 
 - regex with replace
 preg_replace(pattern, replacement, string [, limit]);
 
 - preg_match_all extracts blocks of a string when you know what those blocks are, this
   extracts blocks when you know what separates one block from another
 preg_split(pattern, string [, limit [, (PREG_SPLIT_NO_EMPTY|PREG_SPLIT_DELIM_CAPTURE)]]);
 
 - to match elements in an array
 preg_grep(pattern, array);
 
 - to escape a string to regex pattern
 preg_quote(string, [, delimiter]);
 
Quantifier Meaning
?          0 or 1
*          0 or more
+          1 or more
{ n }      Exactly n times
{ n , m }  At least n, no more than m times
{ n ,}     At least n times

Class			Description								Expansion
[:alnum:]		Alphanumeric characters					[0-9a-zA-Z]
[:alpha:]		Alphabetic characters (letters)			[a-zA-Z]
[:ascii:]		7-bit ASCII								[\x01-\x7F]
[:blank:]		Horizontal whitespace (space, tab)		[ \t]
[:cntrl:]		Control characters						[\x01-\x1F]
[:digit:]		Digits									[0-9]
[:graph:]		Characters that use ink to print 
				(nonspace, noncontrol)					[^\x01-\x20]
[:lower:]		Lowercase letter						[a-z]
[:print:]		Printable character (graph class 
                plus space and tab)						[\t\x20-\xFF]
[:punct:]		Any punctuation character, such as 
				the period (.) and the semicolon (;)	[-!"#$%&'()*+,./:;<=>?@[\\\]^_'{|}~]
[:space:]		Whitespace (newline, carriage return, 
				tab, space, vertical tab)				[\n\r\t \x0B]
[:upper:]		Uppercase letter						[A-Z]
[:xdigit:]		Hexadecimal digit						[0-9a-fA-F]
\s				Whitespace								[\r\n \t]
\S				Nonwhitespace							[^\r\n \t]
\w				Word (identifier) character				[0-9A-Za-z_]
\W				Nonword (identifier) character			[^0-9A-Za-z_]
\d				Digit									[0-9]
\D				Nondigit								[^0-9]

Anchor					Matches
^						Start of string
$						End of string
[[:<:]]					Start of word
[[:>:]]					End of word
\b						Word boundary (between \w and \W or at start or end of string)
\B						Nonword boundary (between \w and \w, or \W and \W)
\A						Beginning of string
\Z						End of string or before \n at end
\z						End of string
^						Start of line (or after \n if /m flag is enabled)
$						End of line (or before \n if /m flag is enabled)

Greedy quantifier	Nongreedy quantifier
?					??
*					*?
+					+?
{m}					{m}?
{m,}				{m,}?
{m,n}				{m,n}?

/regexp/i		Match case-insensitively
/regexp/s		Make period (.) match any character, including newline (\n)
/regexp/x		Remove whitespace and comments from the pattern
/regexp/m		Make caret (^) match after, and dollar sign ($) match before, internal newlines (\n)
/regexp/e		If the replacement string is PHP code, eval() it to get the actual replacement string

Construct		Meaning
(?=subpattern)	Positive lookahead
(?!subpattern)	Negative lookahead
(?<=subpattern)	Positive lookbehind
(?<!subpattern)	Negative lookbehind
----

----
Arrays
 - index qualifiers
  - may be integers or strings
  - when using a string key, if contains no spaces then it does not need to 
    be enclosed in quotes
  - index keys allow for interpolation
   $myArray["Something{$numero}"]
 
 - hashtables are not considered as such 
  - every array has a key-value pair where not defining a key defaults to the 
    index.
  - indexed array - known elsewhere as just 'array'
  - associative array - known elsewhere as hashtable
  
 - array declaration happens with first item assignment
  $myArray[0] = "one";
  
 - an array init is avail 
 $myArray = array("one","two","three");
 $myAkaHashtable = array("key01" => 17.5, "key02" => 18.5, "key03" = 16.2);
  - also avail is even shorter init
 $myAkaHashtable = ["key01" => 17.5, "key02" => 18.5, "key03" = 16.2];
 
 - init an empty array as 
 $myEmptyArray = array();
 
 - associative and index arrays may be mixed - not recommended
 $myMixed = array("3" => "two fish", "red fish", "blue fish", "one fish");
 
 - to append to an array use
 $myArray = array("one", "two");
 $myArray[] = "three" //same as $myArray[2] = "three"
 
 - range init 
 $zero2Nine = range(0,9); //an array with 10 items being 0 to 9
 $lowerLetters = range('a','z'); // a through z
 $inReverse = range(5,1); // 5,4,3,2,1
 
 - array length with more globals as 
  - two flavors, exact same effect, no preference in convention
 sizeof($myArray) -or- count($myArray)
  
 - array with default values
  - array arg passed in is no modified
  - result is new array having specified length and default value
    for any item not already assigned something
  - new_length may be negative to have existing items placed at the rear
 array_pad(array, new_length, df_val);
 
 - jagged arrays are indexed as array-of-array
 - no construct for matrix 
 $row0 = array(1,2,3);
 $row1 = array(4,5,6);
 $row2 = array(7,8,9);
 
 $jArray = array($row0, $row1, $row2);
 $someValue = $jArray[2][1]; //8
 
 - array items may be assigned to variables en masse using list
  - this is oddly left-assoc.
 list(variable [, variable]*) = array;
  - e.g.
 $someData = array("Bob", "Smith", "555-4545");
 list($firstName, $lastName, $phNum) = $someData
 
 - slice array 
 array_slice(array, offset, length);
 
 - splitting array 
  - the bool arg at the end is for perserving the keys
  - this creates an jagged array from a single-dim array
 array_chunk(array, per_chunk_size, [, (true|false)]); 
 
 - array keys & values
  - returns just the keys or just values
 array_keys(array); 
 array_values(array);
 
 - test key exist - returns a bool
 array_key_exists(key, array)
 
 - to quickly extract assoc. array to variables
  - actually creates implict local variables based on the key's
 $assocArray = array("firstName" => "Bob", "lastName" => "Smith", "phNum" = "555-5656");
 extract($assocArray);
 echo $firstName; //now a variable...
  - a prefix may be specified using
 extract($assocArray, EXTR_PREFIX_ALL, "cust_");
 echo $cust_firstName; //another variable now in scope
 
 - variables may be compressed into an array quickly
 $firstName = "Bob";
 $lastName = "Smith";
 $phNum = "555-4545"
 $myArray = compact("firstName", "lastName", "phNum");
 
 - any array's iterator is implied
  - the foreach uses it without invocation
  - it may be manipulated programaticlly using more globals
 current(array); //item at iter's current location
 reset(array); //iter back to 0
 next(array); //next item after current
 prev(array); //prev item before current
 end(array); //moves iter to the last item
 each(array); //returns the current key-value as an array and move the iter up one (like Next)
 key(array); //returns the key of the current element 
 
 - a lighter memory construct to foreach
 reset($myArray)
 while(list($key, $value) = each($myArray)){
	// for use in very large arrays
 }
  
 - invoke a function for each element
  - callable is a function pointer which receives two args (viz. $key, $value)
  - extra_data may itself be another array
 array_walk(array, callable [, extra_data]);
 
 - reduce an array to a single value
  - callable is a function pointer receiving two args ($runningTotal, $currentValue)
 array_reduce(array, callable [, df_val]);
 
 - test for values in an array
  - third bool arg is to require both value and type to equal 'to_find'
 in_array(to_find, array [, (true|false)]);
  - to both test and receive the key when true
 $key = array_search(to_find, array [, (true|false)]);
----

----
Array Sorting
 - three kinds, sort by keys, sort by values and sort by values with key reassignment.
 
 Effect					Ascending		Descending		User-defined order
Sort array by 
values, then 
reassign indices 
starting with 0			sort(array);	rsort(array);	usort(array, callable);
Sort array by values	asort(array);	arsort(array);	uasort(array, callable);
Sort array by keys		ksort(array);	krsort(array);	uksort(array, callable);

 - sorting strings with numbers will use
  natsort(array);
  natcasesort(array);
 
 - sorting multidim arrays
  - similar to DB JOIN
 array_multisort( (array [, (SORT_ASC|SORT_DESC)])* );
 
 - reverse an array
  array_reverse(array);
 
 - to change keys to values and values to keys
 array_flip(array);
 
 - to randomize an array
 shuffle(array);
----

----
Array Operations
 - sum of an array
 array_sum(array); 
 
 - join two or more arrays
 array_merge(array0, array1 [, arrayN]*);
 
 - values present in the array0 but not present in array1 .. N
  array_diff(array0, array1 [, arrayN]*);
 
 - remove duplicate entires
 array_unique(array);
 
 - select on where condition
  - callable returns true or false
 array_filter(array, callable);
 
 - values present in all arrays
 array_intersect(array0, array1 [, arrayN]*);
  
 - other collection functions
 array_push & array_pop for implementing stacks
 array_shift & array_unshift for implementing queues
----
 
----
OOP
 - object oriented program is supported
 
 $myClass = new MyClass; //no-arg ctor's have no parenths
 $myClass = new MyClass("fname",true); 
 
 - oddly this does not work
  $willError = new "MyClass";
 - but this does...
  $myName = "MyClass";
  $wontError = new $myName;
 
 - properties are accessed with arrow notation
 - they are actually what typically OO calls fields
 - encapsulated properties requires methods.
 - a property may be defined within a ctor using
  $this->someProperty = "a value";
   - 'someProperty' is only define within the ctor
   - it still acts like a public property similar to 
   public someProperty = "a value"; //this being defined w/i the class decl
  
 - methods are invoked likewise except always having parenths (even for no-args)
  $myInstance->someMethod();
 
 - member modifiers:
  public, protected, private, static, abstract and final
  
 - will resolve using what PHP calls variable-variables
 $myPropName = "age";
 $myInstance->$myPropName;
 
 - static methods are invoked in IL-style
 MyClass::myStaticMethod("has args too");
 
 - are pass-by-value semantics
  - may make full graph clone using 
  $newCopy = clone $myInstance;
 
 - other std features
  - extend on parent concrete type, implement many interfaces
  - use $this for current instance
  - invoke parent method using 
   parent::myParentMethod();
   
  - to override polymorph use
   self::myMethod();
----

----
Namespaces
 - are supported
 - must be first line in php file
 - scope is implied as the whole file and all 
   that is defined in it.
 - use the keyword
  namespace MyNamespace;
  
 - have sub namespaces with backslash
  namespace MyTopNamespace\Util\Something;
  
 - namespace scope is assumed j
 - to fully qualify, use the same \ char 
 MyNamespace\Util\Something\MyClass::somestatic();
----

----
Traits
 - like classes
 - reduce some limitations of single inheritance 
 - cannot be directly instantiated 
 - must be declared within a class def with the 'use' keyword
 - may declare abstract methods which must be implemented 
   by the class using the trait
----

----
Ctors & Destructors
 - are implemented using 
 __construct()
 - may be no-arg or have args
 - to invoke parent ctor use
 parent::__construct();
 
 - destructor is similar
 __destruct()
 - is always a no-arg method
----

----
Reflection (aka Introspection)
 - uses global functions
 
 class_exists(classname);
 get_declared_classes();
 get_class_methods(classname);
 get_parent_class(classname);
 
 - to get an object's type
 
 is_object(some_variable);
 get_class(some_variable);
 method_exists(some_variable, method)
 get_class_vars(classname); //index array of just prop names.
 get_object_vars(some_variable); //returns an assoc. array of name-values
----

----
Serialization
 - is supported, quite simple
 $encoded = serialize($something);
 $something = unserialize(encoded);
 
 - to plug into the serialization\de-ser events use
 __sleep() & __wakeup()
----

----
HTTP runtime globals
 $_COOKIE
 $_GET
 $_POST
 $_FILES
 $_SERVER
 $_ENV
 
 $_REQUEST (contains get, post and cookie as a single array)
 
  - when an input tag's name contains periods they are converted to underscore.
 $_POST["inputName"]; //this is the name of the input tag
 
 - when the form data allows for multiples you must name the html tag with sqr-braces
 <select name="nationState[]">
  <option name="us">United States</option>
  <option name="fr">France</option>
  <option name="uk">United Kingdom</option>
 </select>
  - as such the $_POST["nationState"] will be itself an array
  
 - this could also be accomplished using the same name in multiple tags 
   (again with the sqr-braces)
  <input type="checkbox" name="myStuff[]" value="somthing" />Something</input>
  <input type="checkbox" name="myStuff[]" value="somthingElse" />Something Else</input>
  <input type="checkbox" name="myStuff[]" value="aThirdThing" />A Third Thing</input>
----

----
Server environment variables
 - are invoked like $_SERVER["PHP_SELF"];
  
PHP_SELF : The name of the current script, relative 
           to the document root (e.g., /store/cart.php). 
		   You should already have noted seeing this used 
		   in some of the sample code in earlier chapters. 
		   This variable is useful when creating 
		   self-referencing scripts, as we’ll see later.
SERVER_SOFTWARE : A string that identifies the server 
                  (e.g., “Apache/1.3.33 (Unix) mod_perl/1.26 PHP/5.0.4”).
SERVER_NAME : The hostname, DNS alias, or IP address for 
              self-referencing URLs (e.g., www.example.com).
GATEWAY_INTERFACE : The version of the CGI standard being 
                    followed (e.g., “CGI/1.1”).
SERVER_PROTOCOL : The name and revision of the 
                  request protocol (e.g., “HTTP/1.1”).
SERVER_PORT : The server port number to which the request 
              was sent (e.g., “80”).
REQUEST_METHOD : The method the client used to fetch 
                 the document (e.g., “GET”).
PATH_INFO : Extra path elements given by the client (e.g., /list/users).
PATH_TRANSLATED : The value of PATH_INFO, translated by the server 
                  into a filename (e.g., /home/httpd/htdocs/list/users).
SCRIPT_NAME : The URL path to the current page, which is useful 
              for self-referencing scripts (e.g., /~me/menu.php).
QUERY_STRING : Everything after the ? in the URL (e.g., name=Fred+age=35).
REMOTE_HOST : The hostname of the machine that requested 
              this page (e.g., “dialup-192-168-0-1.example.com 
			  (http://dialup-192-168-0-1.example.com)”). If there’s no DNS 
			  for the machine, this is blank and REMOTE_ADDR is the 
			  only information given.
REMOTE_ADDR : A string containing the IP address of the machine that 
              requested this page (e.g., “192.168.0.250”).
AUTH_TYPE : If the page is password-protected, this is the authentication 
            method used to protect the page (e.g., “basic”).
REMOTE_USER : If the page is password-protected, this is the 
              username with which the client authenticated (e.g., “fred”). 
			  Note that there’s no way to find out what password was used.
REMOTE_IDENT : If the server is configured to use identd (RFC 931) 
               identification checks, this is the username fetched 
			   from the host that made the web request (e.g., “barney”). 
			   Do not use this string for authentication purposes, 
			   as it is easily spoofed.
CONTENT_TYPE : The content type of the information attached to queries 
               such as PUT and POST (e.g., “x-url-encoded”).
CONTENT_LENGTH : The length of the information attached to queries 
                 such as PUT and POST (e.g., “3,952”).
				The Apache server also creates entries in the $_SERVER array for 
                each HTTP header in the request. For each key, the header name 
				is converted to uppercase, hyphens (-) are turned into 
				underscores (_), and the string "HTTP_" is prepended. 
				For example, the entry for the User-Agent header has the 
				key "HTTP_USER_AGENT". The two most common and useful headers are:
HTTP_USER_AGENT : The string the browser used to identify itself (e.g., 
                  “Mozilla/5.0 (Windows 2000; U) Opera 6.0 [en]”)
HTTP_REFERER : The page the browser said it came from to get to 
               the current page (e.g., http://www.example.com/last_page.html) 
----

----
Session
 - PHP has built-ins
 - requires two basics
 
 session_start(); //loads the global $_SESSION array
 $_SESSION["someKey"] =  somevalue; //added to session
 
 unset($_SESSION["someKey"]); //remove key-value from session
----

----
Date and Time
 $currentDateTime = new DateTime();
 $myDt = new DateTime("2016-01-01 00:00:00.000000"); //MSSQL like format
 echo $myDt->format('Y-m-d H:i:s') . PHP_EOL;
 echo $myDt->format(DateTime::ATOM) . PHP_EOL;
 - format ref:
  Year: 'Y'  4-digit year
        'y'  2-digit year
  Month 'F'  Full month name (e.g. July)		
        'm'  2-digit month
		'M'  Abbrev. for month name (e.g. Jan)
		'n'  1 or 2-digit month
  Day   'd'  2-digit day of month
        'D'  Abbrev. for day name (e.g. Mon)
		'j'  1 or 2-digit day of month
		'l'  (\x6C) Full day of week name (e.g. Friday)
		'N'  Day of week starting at 1 for Monday
		'S'  append with 'j' to have 1st, 13th, 3rd, etc.
		'w'  Day of week starting at 0 for Sunday
  Time  'a'  lowercase am, pm
        'A'  uppercase AM, PM
		'g'  12 hour 1 or 2-digit
		'G'  24 hour 1 or 2-digit
		'H'  24 hour 2-digit
		'h'  12 hour 2-digit
		'i'  minutes
		's'  seconds
		'u'  microseconds
  - DateTime object has canned formats as constants
   ATOM, COOKIE, ISO08601, RFC822, RFC850, RFC1036
   RFC1123, RFC2822, RFC3339, RSS, W3C
  - to use DateTime::diff() the DateTime on which 
    the method is invoked should be before (in-time)
	the diff arg
   $myDtInterval $myDt->diff($someFutureDt);

date_parse_from_format(format, value);
 - will parse the value according to the format
 - returns an assoc. array 
  "year", "month", "day", "hour", "minute", "second"
----
  
----
Program Execution
shell_exec(cmd)
 - executes the command using the shell and returns the output
   as a string
exec(cmd [, output]);
 - executes the command 
 - output is an array for each line returned from the command's 
   execution
----
   
----
Filesystem
scandir(path [, options]);
 - returns an array of directory contents 
 - options
  SCANDIR_SORT_ASCENDING (default)
  SCANDIR_SORT_DESCENDING

basename(string [, suffix])
 - like Split-Path -Parent
 - suffix is optional and having a value will cause 
   result to have it removed (like GetFileNameWithoutExtension)
   
copy(string_src, string_dest)
 - copies from source to dest
 
dirname(string [, level=1]);
 - gets the parent directory 
 - EXAMPLE 
  dirname("C:\\Projects\\31g\\trunk\\bin\\php\\stuff"); //C:\Projects\31g\trunk\bin\php
  dirname("C:\\Projects\\31g\\trunk\\bin\\php\\stuff", 2); //C:\Projects\31g\trunk\bin
  
chmod(path, octal) 
 - changes the access perms of a file
  - 0600 Read and write for owner, nothing for everybody else
  - 0644 Read and write for owner, read for everybody else
  - 0755 Everything for owner, read and execute for others
  - 0750 Everything for owner, read and execute for owner's group
  
clearstatcache()
 - PHP has a virtual results table for various file ops 
 - to imporve performance
 - this clears that virtual table
 - GOTCHA 
  - calling file_exist on non-existent file returns false
  - file is created, file_exist returns true
  - file is then deleted, file_exist still returns true
   - use this function or unlink()
   
fflush(resource)
 - flushes all buffered output to the resouce.
 
fgetcsv(resource, [,length=0 [,delimiter="," [, enclosure='"' [, escape = "\"]]]])
 - for reading data on file in CSV format into an array
  - max line length, 0 is unlimited
  - delimiter  Must be one char string
  - enclosure  Appearance of delimiter within are not considered as such
  - escape  Char which appearing before delimiter makes it not as such
 - is one call per line EXAMPLE:  while (($data = fgetcsv($handle, 1000, ",")) !== FALSE)
   
fputcsv(resource, ,array [,delimiter="," [, enclosure='"' [, escape = "\"]]])
 - for writing arrays as CSV
 - one array is one line written

fgets(resource [, length])
 - reads a buffer from an opened file
 - results are a string
 
fgetss(resource [, length [, allow_tags]])
 - reads a buffer from an opened file
 - will strip out '\0' HTML and PHP tags from output
 
is_writable(filename)
 - tests if a file may be written to
is_readable(filename)
 - tests if a file may be read from
file_exists(string)
 - tests if a file exists
is_uploaded_file(string)
 - tests if a file is present via HTTP POST	
is_link(string)
 - tests if a file is a short-cut to another file
feof(resource)
 - tests if file is at its EOF
is_dir(string)
 - tests if a path is a directory
is_file(string)
 - tests if a path is a file
 
file_get_contents(string [, bool])
 - read the entire file into a single string
 - bool will search php.ini's "include_path"

file_put_contents(string, data, options)
 - writes content to a fils
 - data may be a string, an array or a stream
 - join more than one option using bar "|"
 - options:
   FILE_USE_INCLUDE_PATH  See below
   FILE_APPEND  To have the data overwrite or append
   LOCK_EX  To have an exclusive lock on the file

file(string, options)
 - read an entire file into an array
 - join more than one option using the bar "|"
 - options:
   FILE_USE_INCLUDE_PATH  Will search in the 
    php.ini's "include_path"
   FILE_IGNORE_NEW_LINES  each array element 
    will NOT have a newline at the end.
   FILE_SKIP_EMPTY_LINES  Empty lines will 
    not be added to the returned array

mkdir(string [, mode=0777 [, recursive=FALSE])
 - creates a directory
 - mode is ignored on Windows
 - recursive is to create any parent directory needed

parse_ini_file(string [, process_sections=FALSE])
 - reads an ini file and returns the results as an array
 - having it process sections will return a multi-dim array
 
parse_ini_string(string [, process_sections=FALSE])
 - same as the above only operates on the ini's contents 
   as a string

pathinfo(string)
 - parse a path into parts
 - returns an assoc. array having
  "dirname", "basename", "extension", "filename"

filesize(string)
 - gets the size of a file

fnmatch(pattern, string)
 - test if string matches shell wildcard pattern

fopen(string, mode [, bool])
 - opens a file stream, path may be URI with schema
 - returns a 'resource'
 - mode is a string each having some access meaning
  'r' opens for reading only 
  'r+' opens for reading and writing
  'w' opens for writing only, truncate prev. 
      content, create file if not present
  'w+' same as above only allow for reading too
  'rb' read as a binary file (not text)
 - bool is TRUE if search should include the path(s)
   assigned in php.ini "include_path"

fclose(resource)
 - closes a file

rename(oldname, newname)
 - renames a file
 
fread(resource, length)	
 - read a buffer by the given length or EOF
 
rewind(resource)
 - sets the file pointer back to the begining
 
rmdir(string)
 - removes a directory
 
fseek(resource, offset)
 - moves the filepointer by offset
 
stat(filename)
 - gets files metadata 
 - returns metadata as an assoc. array
   "size", 
   "atime"  Last access time
   "mtime"  Loat modified time
   
fstat(resource)
 - same as stat() only for an open file
 
ftell(resource)
 - gets the current file pointer position
 
tempnam(dir, prefix)
 - creates a temp file returning the full path as a string
 
ftruncate(resource, size)
 - truncates a files content by a given size
 - exceeding the size will extend the file with '\0'
  - couple with filesize(path) to have the runtime file size
  
tmpfile()
 - creates a temp file in read-write and returns the resource handle
 
fwrite(resource, string [, length])
 - writes string to openned file
 - will stop at length if given
touch(string [, int])
 - will update last write times to a file
 - the int is the time and its optional
  - leaving the second arg out the current time is used

unlink(string)
 - deletes a file 
----

----
Numeric Parse
bindec(string)
 - converts binary string to int or float
decbin(int)	
 - converts int to binary string
dechex(int)
 - converts int to string hex
decoct(int)	
 - converts int to string octal
hexdec(stringHex)	
 - converts stringHex to int or float
octdec(stringOct)
 - converts stingOct to int or float
----

----
Math
exp(floatX)
 - 'e' raised to power floatX

expm1
 - 'e' raised to power floatX minus 1
	
fmod(floatX, floatY)	
 - get the remainder floatX/floatY
 - returns a float
 
max(array)
 - gets highest num in array
min(array) 
 - gets lowest num in array

mt_rand([min, max])
 - generates a random int
mt_srand([seed])
 - generates a random int with seed
lcg_value()
 - returns a random float between 0 and 1

sqrt(floatX)
 - get square root of floatX
 
pi()
 - gets pi upto 14 decimal places

pow(numBase, numExp)
 - raises numBase by numExp

round(float [,int])
 - round number up to decimal place
ceil(float)
 - next highest int
floor(float)
 - next lowest int
abs(num)    
 - gets absolute value
----

Strings
addslashes(string)
 - esc. reserved chars with backslash
	hebrev
bin2hex	hebrevc
chr	hex2bin
chunk_split	html_entity_decode
convert_cyr_string	htmlentities
convert_uudecode	htmlspecialchars_decode
convert_uuencode	htmlspecialchars
count_chars(string)
 - get the string's length
	implode
crc32	lcfirst
crypt	levenshtein
echo	localeconv
explode	ltrim
fprintf	md5_file
md5	strip_tags
metaphone	stripcslashes
money_format	stripos
nl_langinfo	stripslashes
nl2br	stristr
number_format	strlen
ord	strnatcasecmp
parse_str	strnatcmp
printf	strncasecmp
quoted_printable_decode	strncmp
quoted_printable_encode	strpbrk
quotemeta	strpos
rtrim	strrchr
setlocale	strrev
sha1_file	strripos
sha1	strrpos
similar_text	strspn
soundex	strstr
sprintf	strtok
sscanf	strtolower
str_getcsv	strtoupper
str_ireplace	strtr
str_pad	substr_compare
str_repeat	substr_count
str_replace	substr_replace
str_rot13	substr
str_shuffle	trim
str_split	ucfirst
str_word_count	ucwords
strcasecmp	vfprintf
strcmp	vprintf
strcoll	vsprintf
strcspn	wordwrap

PHP Language Tokenizer
token_get_all
token_name

URLs
base64_decode	parse_url
base64_encode	rawurldecode
get_headers	rawurlencode
get_meta_tags	urldecode
http_build_query	urlencode

Variables
debug_zval_dump	is_object
empty	is_resource
floatval	is_scalar
get_defined_vars	is_string
get_resource_type	isset
gettype	print_r
intval	serialize
is_array	settype
is_bool	strval
is_callable	unserialize
is_float	unset
is_int	var_dump
is_null	var_export
is_numeric
----