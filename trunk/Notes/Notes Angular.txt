Notes Angular
----
Learning Angular - Third Edition
By: Aristeidis Bampakos; Pablo Deeleman
Publisher: Packt Publishing
Pub. Date: September 7, 2020
Print ISBN-13: 978-1-83921-066-2
Web ISBN-13: 978-1-83921-557-5
Pages in Print Edition: 430
https://github.com/PacktPublishing/Learning-Angular--Third-Edition
----

----
Angular for Enterprise-Ready Web Applications - Second Edition
by Doguhan Uluca
Publisher: Packt Publishing
Release Date: May 2020
ISBN: 9781838648800
https://github.com/duluca/local-weather-app
https://github.com/duluca/lemon-mart
https://github.com/duluca/lemon-mart-server
----

----
https://angular.io/tutorial
----

----
StackBlitz.io
 - interactive VS Code inside the browser
----

----
Pertinent history
 2004 Asynchronous JavaScript and XML (AJAX)
 2006 jQuery
 2008 iPhone revolution
 2009 ASP.NET MVC
 2012 evergreen browsers (self-updating)
 2016 Angular (actually Angular 2 since prev. ver. was AngularJs)
----

----
Angular code structure
 - code is contained within Modules
 - other entities are 
  - Components
  - Services
  - Directives 
  - Pipes
  - User Controls
----

----
Angular versioning
 - uses the standard version numbers
  - major
  - minor
  - patch
  - build-number
----

----
Runtime dependencies
 - node.js
  - get the installed version of node using
  node -v
 - npm
  - get the installed version of npm using  
  npm -v 
 - Angular CLI
  - install Angular CLI using npm
  npm install -g @angular/cli
  - get the installed version of angular cli using
  ng version
----

----
Angular CLI common commands
 - creates, deploys, adds, etc. to angular projects
 - uses working directory as location
 - is invoked from cmd line as 'ng' space and:
   new : creates new project
   build : transpiles a project
   generate : creates new files for a project
   serve : builds and serves a project from a pre-configured web server
   test : runs unit tests on a project
   deploy : deploys a project to a web-host provider
   add : installs third-party lib's 
   update : updates Angular and dependencies to the latest
 - for build, serve and test, a specific environment 
   can be targeted using '--configuration=' param
----

----
Project files structure
 - 'src' all the source files of my Angular app
  - where most of everything generated will go
 - 'e2e' is for end-to-end testing
 - 'node_modules' all the npm dependencies needed by Angular
 - '.browserslistrc' browsers and version supported
 - '.editorconfig' coding style
 - '.gitignore' files\folders Git should not track
 - 'angular.json' config file of Angular CLI workspace
 - 'karma.conf.js' config file for running unit tests
 - 'package.json' & 'package-lock.json' definitions of exact 
    npm packages plus version required to run and test the app
 - 'tsconfig.*.json' TypeScript configurations
  - '.base' is used by Angular CLI
  - '.spec' is used for unit tests
  
 - 'assets' for fonts, images and icons
 - 'environments' folder for targeting a specific deployment environment
  - uses a naming convention of "environment.myName.ts' 
  - is tied in at the 'angular.json' config file
  - at the location of projects.my-application-name.architect.configurations
  - names are expected to match from file to JSON
  
 - 'index.html' & 'main.ts' the entry places for the whole app
 - 'polyfills.ts' scripts to enable support of features on 
    various browsers because not all browsers 
    support all the latest features
 - 'sytles.css' app-wide styles
 - 'test.ts' the main entry for unit tests
----

----
Module basics
 - modules are the main domain container space of Angular
 - modules may contain further modules, etc.
 ng generate module my-namespace
 
 - further, to generate a directive, component or pipe within a module
  - either set working dir to that module's folder
  - invoke the generate command with a the --module param
   - the module's name is its file-name, not its TypeName
 ng generate component my-namespace/my-item --module=my-namespace
 
 - module's use the @NgModule to define themselves to other modules
  - in @NgModule decorator:
   - 'exports' defines what is exposed to others
    - this will be available to other modules
    - this is not the same as the 'export' keyword on a class declaration
   - 'imports' defines what is defined elsewhere
    - this will then be available within this module
    - this is not the same thing as a the 'imports' statement 
      at the top of a .ts file
----
  
----
Component basics
 - directives are the main building block
 - a component is a directive with a view 
 - template is the name used for just the view portion of a component
 - components can be generated from the CLI
  - the command is given while working directory is 
    top-of-app (i.e. ~/), angular CLI adds it to the 
    proper place in the folder structure
  - when there is more than one file decorated with @NgModule 
    then you have to specify the module's file name
  ng generate component myNameHere --module=app.module
 
 - the component is contained in its own folder
 - the CLI command adds the new component to the 
   AppModule declarations
  - this the place where components are grouped 
    into modules
 - the folder contains four systematic named files
   with different extensions
  - paths appear as:
  ~/src/app/myNameHere/myNameHere.component.*
  
  - .html is the template
  - .ts is the component's class
  - .spec.ts are unit tests
  - .css is the style sheet
  
 - a TypeScript class becomes an Angular component
   through the use of the @Component decorator
  - the @Component decorator provides three property
    values:
    selector: the id-name used inside of HTML
    templateUrl: the relative path to the HTML file
    styleUrls: an array of relative paths to css files
----

----
Component reference in template
 - intended to set a variable within the template as a 
   reference to the component
 - expressions are presented in a template in four forms
 {{ expression }}              : interpolation
 [target]="expression"         : bind class var to html attribute
 (event)="expression"          : event handler assignment
 *ngDirective="expression"     : angular directives
 
 - two-way data-binding combines all of them
 [(ngModel)]="somePropertyOnClass"
  - square-braces are class-to-template
  - parenthesis are template-event-to-class
  - 'ngModel' is a directive
 
 - as such all public members are available in the 
   template
 - reference is made within the html node which shares the name of the 
   component's class 
 - reference another component's class as an alias 
   marked by prefix of '#' symbol
 - using reference, public properties are in scope 
 - use of the reference does not include the '#' symbol 
 <app-myother #myOther></app-myother>
 <span> {{ myOther.someProprty }} </span>
---- 

----
Communicating with the server
 - this is done through the angular module HttpClient
 - in the root module add the import 
 - and the add 'HttpClientModule' in the import's array of the @NgModule decorator
 import { HttpClientModule } from '@angular/common/http';
 import { Observable, Subscription } from 'rxjs';
 import { Component, OnInit } from '@angular/core';
 
 interface Product {
    id: number,
    description: string,
    price: number
 }
 
---- 
 
----
Passing data down to component
 - rough example, define actual value in AppComponent 
 - one example of its use is to refactor some code into its own
   component
 export class AppComponent {
  someAlias = "Some value";
 }

 - next is AppComponent's template .html
 <my-component-name [nameOfInputProperty]="someAlias"></my-component-name>
 
 - next is on my-component-name.ts 
  - need to import 'Input' from angular core
 import {Input} from '@angular/core';
 
  - then add a public property decorated with @Input
 @Input() public nameOfInputProperty: string = '';
 
  - last is to use the property in my-component-name's template (i.e. html)
 <p>{{nameOfInputProperty}} is here!</p>
----

----
Passing event up to component
 - first define the output on my-component-name's TypeScript class
 - again import the dependencies 
 import { Output, EventEmitter } from '@angular/core';
 
 - and add the decorated property to the class
 @Output() public liked = new EventEmitter();
 
 - next, in  my-component-name's template (i.e. html), add a web-forms 
   button whose click event is wired into the 'emit()' method of 
   the EventEmitter named 'liked'
 <button (click)="liked.emit()">Like</button>
 
 - next, in the my-component-name node, present within the
   app.component.html, tie the EventEmitter property of my-component-name
   to a method on app.component.ts class named 'onLike()'
  <my-component-name [nameOfInputProperty] = "someAlias" (liked)="onLike()">
  </my-component-name>
  
 - last, have the event handler in app.component, here named 'onLike' do something
 public onLike(){ console.log("on like event received."); }
----   

----
Using Pipes in the template
 - allows for filtering & transforming output at the view-level only
 - data in the component is unchanged
 - a pipe may have further options after its keyword name sep'ed by a colon
  - further options will also have a color in-front
   <!-- 'title' on the component isn't being changed to uppercase -->
   <span>{{title | uppercase}}</span>
 
 - there are various template pipes builtin
  - 'uppercase' & 'lowercase': transform a string 
  - 'percent': displays 0.1234 as 12%
  - 'currency': displays 100 as $100
  - 'slice:1:5': would filter any array to only 1 through 5
  - 'date': displays a date as 'MMMM d, Y' format
   - other options at https://angular.io/api/common/DatePipe#pre-defined-format-options
  - 'json': transforms an object into JSON format
   - mostly for debugging
  - 'async': used in autocomplete async operations

 - custom pipes can be written by the dev
  - can use Angular CLI to create a new one
  - the generate will have the required decorators and method implementations
 ng generate pipe my-pipe
 
 import {Pipe, PipeTransform } from '@angular/core';
 import { MyItem } from './myItem';
 
 @Pipe({name: 'myPipe'})
 export class MyPipePipe implements PipeTransform {
   
   // the variadic 'args' is what is passed in after each colon
   // the 'unknown' type on 'value' is replaced with a custom type (typically)
   // while the 'unknown' array on 'args' is replaced by a string array
   // last, the return type is changed to an array of the same type as 'value'
   transform(value: MyItem[], ...args: string[]): MyItem[] {
   
     //perform the transform here
     
     return null;
   }
 }
----

----
Using webform controls
 - two approaches to webforms data
  - Template-Driven
   - has declarations within the template 
     and the class variables implicitly created
   - is HTML syntax and therefore limited
   - there is no access to these declarations in the class file
    
  - Reactive
   - explicit declarations in class file
    - using types from '@angular/forms'
   - linked to template using builtin directives
----

----
Basics of Template-Driven webforms
 <!-- 
   onSubmit is actually implemented in the class 
    - contents are JSON of value pairs
     - names match what is declared in template
  -->
 <form #f="ngForm" (ngSubmit)="onSubmit(f.value)">
   <div>Username: 
    <!-- "ngModel" connects it back to the "f.value" by name "username" -->
    <input type="text" name="username" ngModel />
   </div>
   <!-- 
     - this produces another object inside of "f.value" named "passwordGroup"
     - "passwordGroup" will now have name-value pairs within it named 
       "password" and "pconfirm"
    -->
   <div ngModelGroup="passwordsGroup">
    <div>Password: 
     <input type="password" name="password" ngModel />
    </div>
    <div>
     <input type="password" name="pconfirm" ngModel />
    </div>
   </div>
   <button type="submit">Submit</button>
 </form>
----

----
Component Lifecycle events
 - similar to ASP.NET
 - events are themselves an Interface that a class must 
   implement
 - the interfaces are present in angular core
 - common event interfaces are:
  OnInit
  OnDestroy
  OnChanges
----

----
Use of Directives 
 - modify html elements
 - can be places within html element's attributes
 - is prefixed with an asterisk 
 <!-- the "else" is kludgy embedded within the *ngIf attribute's value
 <p *ngIf="name === 'FooBar'; else myNgTemplate"> 
 {{name}} here 
 </p>
 <ng-template #myNgTemplate>
    <p> not here dude </p>
 </ng-template>
 
 - *ngIf directive can be used to exclude a block of html when some
   variable is undefined
  <div *ngIf="selectedSomething">
    <!-- 
    this is only going to be present when 'selectedSomething' is defined
    while undefined it will not be present in the DOM
    -->
  </div>

 - a looping construct also exist with esoteric syntax
  - the name 'order' is local to the loop
  - the name 'orders' is defined in the component as an array
  - the name 'index' is a built-in variable of the ngFor directive
  - the name 'myIndex' is the local name of index in this loop
  - other ngFor directive built-in variables are boolean:
    'first', 'last', 'odd' and 'even'
  - 'selectedOrder' is an instance variable in the component
  - 'onSelect(order)' is a method on the component that handles the
     selected event of an item in the list
  - [class.selected] sets the CSS class of an item whenever the loop-local 
    'order' is the instance variable 'selectedOrder'
    
 <li *nfFor="let order of orders; index as myIndex"
      [class.selected]="order === selectedOrder"
      (click)="onSelect(order)">
  <span class="someStyleHere">{{myIndex+1}}. {{order.name}}</span> ({{order.orderedDate}})
 </li>
----

----
Declaration of Directives
 - are intended for some kind of reuseable code that is 
   not bound to a particular template (i.e. .html)
 - appears in html as an element called native host element
  - Angular CLI appends a prefix to the name to avoid collision with 
    native html element names - typically 'app'
 - generated using Angular CLI command 
 ng generate directive my-directive
 
 import { Directive, ElementRef, Renderer2, HostBinding, HostListener } from '@angular/core';
 
 //'selector' is the name used in the html as a element
 @Directive({
   selector: '[appCopyright]'
 })
 export class CopyrightDirective {
 
   //this gets access to the this native host element's 'class' attribute 
   @HostBinding('class')
   public currentClass: string;
   
   //this decorator accepts two params, 
    // name of the native event 
    // the args being passed to the method 
   @HostListener('keypress', ['$event'])
   public onKeyPress(event: KeyboardEvent): void {
   
     //get the numeric value of the keypress
     const charCode = event.key.charCodeAt(0);
     
     //test it for being in range of numeric characters 
     if (charCode > 31 && (charCode < 48 || charCode > 57)) {
     
       // actually use the other binding here
       this.currentClass = 'invalid';
       
       //undo of the user's input
       event.preventDefault();
        
     } else {
        this.currentClass = 'valid';
     }
   }
 
   //'el' is type 'ElementRef' and is used to get the current element in the DOM
   //'renderer' is type 'Renderer2', best practice, use this instead of global DOM
   constructor(el: ElementRef, renderer: Renderer2) {
   
     //the 'copyright' style class is defined in the global src/styles.css
     renderer.addClass(el.nativeElement, 'copyright');
     renderer.setProperty(
       el.nativeElement,
       'textContent',
       `Copyright ©${new Date().getFullYear()} All Rights Reserved.`
     );
   }
 }
----

----
Using and injecting Services
 - are for exogenous things like authentication, data-service, etc.
 - are by nature async and therefore Observable 
 - can be created from Angular CLI
 ng generate service hero
 
 - Angular CLI will place the service file at the ~/src/app 
 - will add the required @Injectable decorator 
 - the @Injectable decorator defines who provides the service 
   and how it is managed in-memory
  - the default 'providedIn' property is 'root' which is 
    basically global singleton 
  - to scope to a module:
   - you need to assign 'providedIn' to the module 
   - add it in the @NgModule's providers array
  - to scope to a component:
   - add the service to the @Component's providers array 
   - likewise, use ctor injection
 
 - the pattern for injection is slightly different from C#
  - the dependency is still present in the ctor 
  - uses the TypeScript shortcut to declare a private field in the 
    ctor's parameters
 constructor(private myService: MyService) {}
 
  - the diff comes in at this point where instance level var's 
    are assigned on the lifecycle ngInInit() event and not within
    the constructor's body itself
  - this is considered best practice in TypeScript(?)
  - when a service returns an Observable then its not direct assignment 
    but rather an anon enclosure on the .subscribe method
   - the .subscribe method is available on Observable in the rxjs 
   - as a rule Observable does nothing until something subscribes to it
   - whenever an instance variable is an Observable, itself, then its often
     suffixed with a dollar-sign
  this.myService.getData().subscribe(d => this.myInstanceData = d);
   
   -to use this you need to import Observable and "of" like:
  import {Observable, of} from 'rxjs';
  
 - dependency resolution 
  - first leap-frogs over modules to parent components
  - second leap-frogs over components to parent modules
----

----
Routing
 - has dependency on RouterModule and Routes for routing functionality
 - a "route" is typically a dictionary of a path string and a handling
   component
 - routing is used to defer loading additional modules via child-routers 
 - the Angular CLI command for gen of a router is 
  - --flat is for the location of code file in src/app folder
  - --module=app tells the CLI to add a register 
                  entry in the imports array of AppModule
 ng generate module app-routing --flat --module=app

 import { NgModule } from '@angular/core';
 import { RouterModule, Routes } from '@angular/router';
 import { MyComponent } from './my-component/my.component';
 
 const routes: Routes = [
   //this example localhost:4200/someUriPath displays 'MyComponent'
   {path: 'someUriPath', component: MyComponent },
   
   //next example of having the URI root path redirect to a 'someUriPath' which, in turn, goes to 'MyComponent'
   {path: '', redirectTo: '/someUriPath', pathMatch: 'full'},
   
   //third route is for passing an Id into the URI path (denoted by the ":id")
   //the get this value back out in-code, use ActivatedRoute type in @angular/router
   {path: 'someUriPath/:id', component: MyDetailComponent }
 ]
 
 @NgModule({
    //the 'forRoot' method is routes from the app's root dir
    imports: [RouterModule.forRoot(routes),
    
    //the export of RouterModule available to app.component.ts & .html
    exports: [RouterModule]
 })
 export class MyRoutingModule { }
 
 - from here there is an esoteric html node named 'router-outlet'
   which is a kind of place holder for content which the router 
   will handle
   
 - to use a router based path 
 <a routerLink='/someUriPath'>Click Me</a>
----