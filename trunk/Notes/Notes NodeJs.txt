Notes Node.js
----
Learning Node.js for .NET Developers
By: Harry Cummings
Publisher: Packt Publishing
Pub. Date: June 24, 2016
Web ISBN-13: 978-1-78528-751-0
Print ISBN-13: 978-1-78528-009-2
Pages in Print Edition: 248
Example code at
https://github.com/NodeJsForDevelopers

RESTful Web API Design with Node.js - Second Edition
By: Valentin Bojinov
Publisher: Packt Publishing
Pub. Date: May 26, 2016
Web ISBN-13: 978-1-78646-320-3
Print ISBN-13: 978-1-78646-913-7
Pages in Print Edition: 148
Example code at
https://github.com/PacktPublishing/RESTful-Web-API-Design-with-Node.JS-Second-Edition/tree/master

Secure Your Node.js Web Application
By: Karl Duuna
Publisher: Pragmatic Bookshelf
Pub. Date: December 28, 2015
Print ISBN-13: 978-1-68050-085-1
Pages in Print Edition: 200
Example code at
https://pragprog.com/titles/kdnodesec

----

----
Any organization that designs a system (defined broadly) 
will produce a design whose structure is a copy 
of the organization's communication structure.

-- Melvyn Conway, 1967
----

----
Overview & History
 - is Javascript
 - uses the V8 engine, same as Chrome
 - is not browser bound 
 - contains APIs for typical dev (e.g. File system)
 - is a non-blocking, single-threaded, event-driven
    exec model
   - non-blocking: all invocations are async
   - event-driven: a kernel of sorts decides which
      code to next exec based on a stream of events
   - single-threaded: is attainable since its a 
      non-blocking model
 - main program of Node.js will run in a 
   single continuous loop thread known as "the event loop"
    - it passes jobs to a thread pool
      and handles callbacks
 - on Windows, lives in $env:ProgramFiles\nodejs
 - npm is the node.js package manager
   - has the highest number of packages of any 
     platform (http://www.modulecounts.com/) [20170807]
   - global installs are in $env:APPDATA\npm
   - the --save flag cause the package to be added to the 
     app's packages.json file
 - best suited for apps with alot of IO since its non-blocking
 - the link between files and exec is the commands present in 
    the packages.json file
 - for security always add 'use strict' as the very first line
   of your .js code files
   - disallows global variables (variable decl's without 'var')
----

----
node CLI
 - get version 
  node --version
 - upgrade (MS)
  - just download .msi and install atop the previous one
----

----
Language Quirks
 - Number is double floating point
 (0.1 + 0.2) === 0.3 //this is false, its actually 0.30000000000000004
 
 - auto-conversions
 3 + 5 + "6" // "86" (3 + 5) + "6"
 (4 + 5 + "3") /3  //31 (9 + "3")/3 => 93/3
 
 - hexidecimal parse results
 parseInt("0x16") //22
 parseInt("0x16", 10) //0
 
 - may need to check its strongly-typed int
 (typeof x == 'number' && !isNaN(x)) //both are needed because typeof NaN is 'number'
 
 - loose comparisons
 Boolean(undefined) == false //is true
 false == undefined //is false
 
 var myUser = {name: "Dude"}; //forgot to add isAdmin
 var isAdmin = myUser && user.isAdmin; //is undefined
 //these look like to expression for the same thing
 // however they are not 
 var notTheSameThing = isAdmin == false && !isAdmin;
 
 - avoid these by using === instead
 "" == "0" //false
 0 == "" //true
 0 == "0" //true
 false == "false" //false
 false == "0" //true
 null == undefined //true
 " \t\r\n" == 0 //true
 
 - prototyping inherit both the state and behavior of 
   the parent class meaning you could change objects
   with direct access to them.
----
 
----
RESTful Services Digression
 - Representation State Transfer 
  - defined by Roy Fielding in '99
  - everything is a resource
  - computational identity is a unique URI
  - comm over HTTP
  - resource may be represented in multiple ways
  - stateless
 - all data has some MIME format
 - URI's should be readable
 - a resource is specified by a HTTP verb and URI
 - intent is bound the the HTTP common verbs
  - response codes are used as defined in which 
    there are many more than just 302, 200 and 404
  - the difference between POST and PUT is that PUT
    is creating a resource under a specific URI with 
    and ID provided by the caller
 - recent popularity likely because SOAP was so 
    overly complicated.
  - HTTP verbs and headers already define the various
    kinds of intent - there was no need to complicate
    them using internal xml representation
 - Save & Idempotent applied to HTTP verbs
  - save is when request has no side effects and
    has no change in state (like so-called 'pure functions')
  - idempotent is when a request always results in 
    the same response no matter how many times its called
    GET = {safe:true, idempotent:true}
    POST = {safe:false, idempotent:false}
    PUT = {safe:false, idempotent:true}
    DELETE = {safe:false, idempotent:true}
 - these services scale better since there is no state
   on which to coordinate in time
 - like SOAP with its WSDL, RESTful has WADL
----

----
Node.js Modules
 - each Javascript file is a treated like a module with its own scope
 - the name of the module is the name of the file
 - a module's "API" is whatever is added via 'exports'
 - a module is imported via 'require'
  - require takes a string as either a name or relative path
   - name is used for modules in the node_modules folder of app
    - these are called simply the npm packages of the app
   - relative paths are for your code
 - namespaces are simply the containing folder 
  - a index.js file is added to the root of folder to define whats 
    in said namespace
  - using something like require(./myNamespaceFolder) will cause 
     the engine to look for ./myNamespaceFolder/index.js
  - if there is ./myNamespaceFolder/packages.json present it will 
    be used instead of index.js 
----

----
Setting npm proxy server settings
 - set the proxy server settings to allow for access to npm
  - you need a value to set and its the same for both
  
  http://YourUserName:YourUserPwd@ProxyServerHostName:port
  
  - will save (in clear text) to $env:USERPROFILE\.npmrc
  - you may need to URL Encode the password if it has special chars
  npm config set proxy (above value)
  npm config set https-proxy (above value)
  
 - in VSCode you have to do this again at File > Preferences > Settings
  - again need a value on which to set and is the same for both
    but not quite the same as the previous one
  - note that the -gt,-lt chars enclosing the latter URI are required
  http://YourUserName:YourUserPwd@ProxyServerHostName:port <http://ProxyServerHostName:port> 
  
  "http.proxy":"(above value)",
  "https.proxy":"(above value)",
  "http.proxyStrictSSL":false,
  
 - also while you are in there set the default terminal to Powershell
 "terminal.integrated.shell.windows": "C:\\Windows\\Sysnative\\WindowsPowerShell\\v1.0\\powershell.exe",
----
  

----
Creating a new proj in VSCode
 - install node.js using the installer from the web
 - install VSCode likewise
  - see the above section on setting the proxy server crap
 - open VSCode
 - strike Ctrl+` to open the terminal
 - move to the directory where the new proj will be
 Push-Location C:\Projects
 - create a the directory to house the proj
 mkdir .\my-new-proj
 - initialze the proj with whatever
 npm init
 - to the needful of getting ref to the node_modules
 npm install
 - add the default base file
 "" | Out-File -FilePath ".\index.js" -Encoding utf8
  - add simple ps cmdlet to test for open ports
 function Test-IsPortInUse($portNum) { Invoke-Expression "netstat -an | findstr :$portNum" }
 Test-IsPortInUse 3000
 - go to it
 Ctrl+P index.js

var http = require('http');
var port = 3000;

function handle_request(request, response) {
    response.writeHead(200, {
        'Content-Type' : 'text/plain'
    });
    response.end('Hello World, derp');
    console.log('index.js handle_request invoked');
}

http.createServer(handle_request).listen(port, '127.0.0.1')

console.log(`Started http server on localhost ${port}`); 
----

----
Modules in node.js
 - seems to be different from the ES6 spec
 exports.myAdd = function(x, y) {
    return x + y;
 }; //notice this semi-colon here, think its required
 
 var myAdd = require('../some/path');
----

----
Running unit tests
 - add reference to the test target with 'require'
 - use the 'exports' syntax for the test cases
 var myMath = require('../module/myMath')
 exports.test_myAdd = function(test){
    test.equals(myMath.myAdd(1,1), 2);
    test.done();
 }
 
 - then run the test with 
 nodeunit mytest.js
----

----
Adding Mock Objects
 var sinon = require('sinon');
 exports.test_somethingMocked = function(test) {
    // need some shell of the testing API
    var myMathApi = {'myAdd': function(x, y) {} };
    
    //create the mock object thereof
    var mockMyMath = sinon.mock(myMathApi);
    
    //set the mock up
    mockMyMath.expects('myAdd').once().withArgs(1,1);
    
    // some test that depended on this
    
    mockMyMath.verify();
    test.done();
 };
----

----
Quick RESTful API 
 - install express-generator to setup the folders and basic 
    structure for a RESTful service
  - express seems to be some kind of more robust js 
    framework
  npm install -g express-generator
  > $someProjPath = "C:\Projects\my-restful"
  > mkdir $someProjPath
  > Invoke-Expression '"C:\Program Files (x86)\Microsoft VS Code\Code.exe" "$someProjPath"'
  [Ctrl+`]
  > npm init
  > express .\
  > npm install
  
  - from here you would split the biz logic from the 
    RESTful method handlers
   *
   |- /modules
   |  |- myBizLogic.js
   |  |- etc...
   |- app.js
   
   - in the actual app you use the express object to 
     define both what resources are present, what HTTP verb 
     the are assoc. to and the handler thereof
     
   var express = require('express');
   var url = require('url');
   var app = express();
   
   app.get('/someRESTmethod', function(request, response){
        //my handler here, probably using some logic defined
        // in modules
        
        var something = it_did_alot_of_work();
        
        //get the query params with the url node module
        var qParams = url.parse(request.url, true).query;
        //the pair is named as (arg, value)
        
        response.setHeader('content-type','application/json');
        response.end(JSON.stringify(something));
   });
   
   app.get('/someOtherSvc/:aUrlLiteral', function (request, response){
        //:aUrlLiteral is a place holder for some runtime value
        //access it using
        var whatIsUrlLiteral = request.params.aUrlLiteral;
   });
   
   http.createServer(app).listen(3000, function(){
    console.log("Listening on port 3000");.
   });
----

----
Package Management
 - in packages.json having a '*' means "install the latest version"
  - this is problematic since a you invoke this on each individual machine
    and one environment may end up with a diff version than another
 - invoke npm install with the --save will preserve the version of 
   that dependency but not that dependency's dependencies.
 - npm shrinkwrap is a command to lock-in the entire dependency tree
  - will output the dependency tree to another file named npm-shrinkwrap.json
----

----
Https on Node.js
 - pretty simple requiring either a cert.pem\key.pem file-pair
   or a cert.pfx and passphrase pair
 'use strict'
 const fs = require('fs');
 const https = require('https');
 const express = require('express');
 
 var app = express();
 app.get('/myrestmethod', function (request, response){
    let myJson = {aname: "a value", anothername: "another value"};
    response.setHeader('content-type','application/json');
    response.end(JSON.stringify(something));
 });
 
 //node doesn't auto-redirect http to https so you need this 
 // boilerplate code added
 var httpApp = express();
 httpApp.get('*', function (req, res) {
    res.redirect('https://' + req.headers.host + req.url);
 });
 httpApp.listen(80);
 
 const options = {
    pfx: fs.readFileSync(__dirname + '/certs/NoFuture.pfx'),
    passphrase: 'P@s$W0rd'
 };
 
 https.createServer(options, app).listen(3000);
----

----
HTTP logs
 - recommended is "morgan" 
 
 var express = require('express');
 var morgan = require('morgan');
 var fs = require('fs');
 var path = require('path');
 var rfs = require('rotating-file-stream');

 var app = express();
 
 var logDir = path.join(__dirname, 'log');
 var accessLogStream = rft('httpLog.log', {
    interval: '1d' //rotate daily
    path: logDir
 });
 
 /*has handful of predefined formats 
   - combined: standard apache combined log output
   - common: standard apache common log
   - dev: concise colored output for dev
   - short: 
   - tiny:
 */ 
 app.use(morgan('combined', {stream: accessLogStream});
----

----
Error Handling
 - an Error object is just an object, upon being thrown it becomes
   and exception
 - like performance, security and logging - you can't just "add on" 
    good error handling
 - its normal for lower layers to just propagate errors since they
   can't do anything usefull
 - try-catch does not work for async anonymous enclosures
   //this will not work
   try{
     comm.doSomething('foo', (err, data) => {
        //I am on another thread now 
        // probably only one down the stack 
        // from crashing the whole process
     });
   } catch(err) { 
     //I catch nothing
   }
 - Error is base type and is extended by 
   - AssertionError, programmatic 
   - RangeError, arg exceptions
   - ReferenceError, null-refs
   - SyntaxError, because its not compiled
   - TypeError, oh, now we have types...
   - SystemError, likely a wrapper from an OS error
   
 - node.js is single thread so an error could crash the whole app
  - async nature of node.js means the traditional idea of a 
    stack is gone
  - three main groups on error handling, 
   - exit the process
   - handle everything
   - something between
   
 - typical error propagation
  - synchronous
  throw new Error('bad times');
  - asynchronous
  callback(new Error('bummer'));
  connection.on('error', (err) => {console.error(err);});
  
 - there is a single built-in like ASP.NET's On_ApplicationError
  - intended as stop-gap
  - will leak memory and connections over time cause a crash anyway
 process.on('uncaughtException', function(err) {
    console.error(err); //error handling here
 })
 
 - its a good idea to wrap the whole node.js program in somekind
   of "restarter" - this way a process can just crash
----

----
Cryto stuff
 - two npm packages for hashing passwords
  bcrypt (lighter, easier)
  scrypt (heavy, very secure)
 
 - enforce strong password policy with something
   as simple as a blacklist of unacceptable passwords
 - add delays to the entic process 
 - lock-out after failed attempts
  - this can be abused by someone else to lock up
    another user
 - double-up the entic with cell-phone text messages and such
 - create new session tokens for each login span of time
 
 - session storage packages 
  express-session
  connect-sqlite3
  
 - use best practice with cookies of 
  secure (sent on HTTPS only)
  http-only (cannot access through javascript)
  expires 
  domain (explicitly set this)
  use the Cache-Control header to force browser to 
    not cache cookies.
---- 