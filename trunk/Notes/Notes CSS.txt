"CSS: The Definitive Guide, 3rd Edition" 
by Eric Meyer 
Publisher: O'Reilly 
Pub Date: November 2006 
Print ISBN-10: 0-596-52733-0 
Print ISBN-13: 978-0-59-652733-4 
Pages: 536

CSS Mastery: Advanced Web Standards Solutions 
by Andy Budd; Cameron Moll; Simon Collison 
Publisher: Apress 
Pub Date: February 2006 
Print ISBN: 978-1-59059-614-2 
Web ISBN: 1-59059-614-5 
Pages: 280 

Modern CSS: Master the Key Concepts of CSS for Modern Web Development
by Joe Attardi
Publisher: Apress
Release Date: October 2020
ISBN: 9781484262948

----
CSS Overview
 - HTML was intended as a Markup language, not a presentation language
 - CSS is intended as the complement presentation language
 - initial standard published in late 1996
 - second publication in May 1998
 - third publications (CSS 2.1) in June 2011
 - MIME type is text/css
----

----
CSS Syntax
 - CSS style sheet consist of Rules
 - Rules target HTML elements via Selectors
 - each Rule has one or more Selector(s)
 - each Rule has one Body enclosed by curly-braces
 - within the Body are the Properties of the CSS Rule
 - Properties are delimited from each other by a semi-colon
 - each Property is a name-value pair separated by a colon
 - the Property-Value may one or more items separated by a space
  - space-separated property values is known as 'shorthand properties'

    Selector
       |
       V                      --+
    .header {                   |
      background-color: red;    +- Rule
      border: 1px solid blue;   |
    } .    .  .             . --+
      |_____________________| 
      .    .  . |           .
      .    .  . Property    .
      |____|  .             .
        |     .             .
Property Name .             .
              .             .
              |_____________|
                     |
                Property Value
----

----
CSS Directives At-Rule
 - are a kind of preprocessor which instructs the CSS interpretor 
 - called "At-Rule" because they start with '@' symbol
 - play a large role in defining animation
 - have a regular form 
  @charset "utf-8";
  
 - there is also a nested form
 @font-face {
   font-family: 'SomeNameGiven';
   src: url('/some-font.woff2') format('woff2'),
        url('/some-font-woff') format('woff);
 }
 
 - for testing accessibility (e.g. vestibular or seizure 
   disorders related to rapidly moving element) 
 @media (prefers-reduced-motion: reduce) {
  .my-css-animation-class {
    animation: none;
  }
 }
 
 - for specifying a set of CSS rules for a given screen size
 @media screen and (max-width: 400px) {
   /* 
    Rules for just this media rule
   */
 }
----

----
Style Sheets Types: 
 - declared within the <head> tag
 - precedence given to style declared closest to tag
 
Linked: stored on a separate file
 - default type
 - set in a separate document
 - CSS syntax is contained in separate doc
 <head>
 <link rel="stylesheet" href="myStyleSheet.css" type="text/css">
 </head>
 
Embedded: set at top of the html source file
 - override linked for single source file
 <head>
 <style type="text/css">
 table.myTable {background:black;
                text-align:center}
 </style>
 </head>
 
Inline: set at each occurrence within source file
 - override linked or embedded for tag by tag basis
 <table style="background:black; text-align:center">
 
----

----
Link Tag
 <link rel="stylesheet" type="text/css" href="sheet.css" media="all" />
  - must be placed w/i the <head> </head> element
  - more than one <link /> element is ok - will be combined
  - link: associate other documents to this document
  - rel: relationship
  - type: MIME typename
  - href: absolute || relative path to css sourcefile
  - media: to specify which (or all) media types (eg brail, tty, tv, handheld)
  - alternative: <style text="text\css">@import url(mycss.css) </style>
    - @import must first statement 
    - must appear within the style element
    - 1 to many @import statements OK 
----

----
Comments
 - /* ...*/ type only 
 - may exceed single line
----

----
Universal Selector
* { margin:0; padding0;}
 - override the entire sheet
----

----
Class Selector
table.myTable {background:black;}
  - declare myTable css class within the <style> html tag
  - table is html tag reference

<table class="myTable" width="50%">
  - instantiate myTable within the table html tag

.myClass {font-style: bold;}
table.myClass {font-style: italic;}
 - any element using 'myClass' will have bold font style
 - table elements using 'myClass' will have both bold and italic font styles

.myClass {font-style: bold;}
.myOtherClass {font-style: italic;}
.myClass.myOtherClass {background: red;}
<p class="myClass myOtherClass">Text here </p>
  - calls to "myClass myOtherClass" will get all three values
  - calls must have space separator between class names
----

----
Id Selector
#my-id {background: blue;}
<p id="my-id">A blue background here </p>
 - similar effect as CSS Classes
 - may only be called once per HTML doc
 - classes may be called many times per HTML doc
 - cannot be combined like classes
----

----
Attribute Selectors
p[censorme] {foreground: black;}
<p censorme="freedom">Freedom</p>
<p censorme="of-speech">Of Speech</p>
 - any paragraph that has a 'censorme' attribute will get a black foreground
 - useful for XML where attributes are custom
 - what the attribute is assigned to does not matter
  
p[denyme] [censorme] {foreground: black;}
 - may have more than one attribute attached
 
p[censorme="top-secret"]
 - may specify attribute having value
 - attribute value must match exactly (eg top-secret vs top secret)
 
p[censorme~="secret"]
 - may match using wildcard string, included tilde before equal sign

p[censorme^="secret"] /*must begin with "secret"*/
p[censorme$="secret"] /*must end with "secret"*/
p[censorme|="secret"] /*match "secret" and "secret-" */
----

----
Descendant Selectors
h1 em {color: gray;}
 - will color only em elements found within h1 elements
 - spacing between h1 and em is considered "found within"
 
ul ol ul {color: gray;}
 - specific to and only to nodes in this order
----

----
Multiple Independent Selectors
.class-one, .class-two {color: gray;}
 - will apply the style to any element of class 'class-one' 
   and any element of class 'class-two'
----
 
----
Child Selectors
h1 > em {color: gray;}
 - only em nodes that are children of h1 
 - affective upon h1 direct child nodes, not em's child nodes
----

----
General Sibling Selector
.header ~ div
 - would match to div elements that are direct siblings after 
   the element with the 'header' class
 - would not match the element with the 'header' class itself
----
 
----
Adjacent Sibling Selectors
h1 + p {color: gray;}
 - given h1 and p having same parent node, affect p element that follows h1
 - h1 and p are siblings
 - p element must follow h1 sibling immediately
 - such order is known as "source order" as in source-code order
----
 
----
Pseudo-Classes
 - often used as event selectors
 - concern the state of an element
 - may be used alone or with another selector
----

----
UI State Pseudo-Classes
:active 
 - matches elements that are currently being activated
 
:checked
 - matches radio-button, checkbox or option inside a 'select' element 
 
:focus
 - matches an element that currently has focus, typically buttons, links and text

:hover
 - matches elements that are currently being hovered by the mouse cursor
 
:valid, :invalid
 - used with HTML5 validation

:visited {color: purple;}
 - matches link elements that have already been visited 
----

----
Document Structure Pseudo-Classes
:first-child, :last-child
 - matches an element that is the first or last child of a parent element
 
:nth-child(1)
 - matches the first child element of the parent
 - index begins at 1 not 0 
 
:nth-child(2n)
 - matches every other child element of the parent
 
:nth-child(4n)
 - matches every forth child element of the parent
 
:nth-child(odd)
 - matches every child element whose ordinal is odd
 
:nth-child(even)
 - matches every child element whose ordinal is even
 
:root
 - matches to the root element of the DOM
----

----
Negation Pseudo-Class
:not(.my-class)
 - would select any element that is not of class 'my-class'
----

----
Pseudo-Element
 - apply to block elements only
 - allows for match to only part of the element
 - have a double-colon instead of just a single colon
  - this changed in CSS3, in CSS2 there was only one-colon

h1::first-letter {color: red;}
 - first letter of any h1 element will be red

p::first-line {color: gray;}
 - first line of any p element is always gray 
 
 - special case pseudo-elements actually create new elements 
   by appending content to the end of the block 
h2::before {content: "[";}
h2::after {content:"]";}
----

---- 
Specificity
 - resolves element with more than one selector
 - valued by ordered four-set (n4,n3,n2,n1)
 - determined left to right (e.g. 0,1,0,0 still greater than 0,0,0,9)
 - highest value is what is selected by browser
 - inline declaration adds one to {n4}
 - CSS-ID adds 1 to {n3}
 - CSS Classes, Attribute Selectors each add 1 to {n2}
 - each element in the selector adds 1 to {n1}
 - the universal selector (* {something: here;}) adds nothing to any
 - trump all by adding !important right before the closing semicolon
 - resolve specificity equality by appearance in sheet - lowest entry wins 

 h1#a-specific-id {background: black;} /*0,1,0,1*/
 h1.myClass {background: black;} /*0,0,1,1*/
 h1[myAttribute] {background: black;} /*0,0,1,1*/
 h1 em body {background: black;} /*0,0,0,3*/
----
 
----
Inheritance
 - elements inherit style settings from parent element (eg <ul> to <li>)
 - certain styling elements do not inherit, like borders, padding, etc
 - inherited style add nothing to elements specificity
----

----
Cascade determination
 - !important marked elements win out, even over in-line style entries
 - author origin wins out over reader origin w/o !important involved
 - reader origin wins out over author origin w/ !important declared on both
 - specificity comes into play after origin and !important
 - last determination is location in sheet - lowest wins
----

----
CSS Variables
 - are officially called 'CSS custom properties'
 - useful for avoiding shotgun surgery changes and magic numbers
 - are defined within the body of a rule 
 - are defined same as a property except they are prefixed with two dashes
 - are resolved using the CSS var() Function 
 - variable scope is is preserved in Descendant Selectors
 - global variables are defined in the 'root' pseudo-class
 
 :root {
  --my-variable: blue;
 }
 
  - variables may be assigned value from other variables
  :root {
    --border-color: red;
    --border-style: solid;
    --border-width: 3px;
    --border: var(--border-color) var(--border-style) var(--border-width)
  }
----

----
CSS Global Keywords
 - built-in property values as keywords
 - are assigned to a Rule's property value
  - initial: the initial value assigned by the browser
  - inherit: the value of the parent element
  - unset: combines the latter two giving 'inherit' precedence
  - currentColor: this resolves to the 'color' value of the text 
----

----
CSS Functions
 - are builtin and global scoped
 - calc() will resolve some value
 - var() will resolve some variable back to its value
 - url() will lookup an image based on URI (abs or rel)
 
 :root {
   --some-variable: 0.5rem;
 }
 
 .some-class {
   padding: calc(var(--some-variable) * 2);
 }
----

----
CSS Colors and Color Functions
 - 17 standard colors supported in CSS2.1
 - 140 colors supported in CSS3.0
 - rgb(100%, 100%, 100%) is white
 - rgb(0%, 0%, 0%) is black
 - rgb([red],[green],[blue]) is the order, hence 'rgb'
 - opacity may be set as a float separated by a forward slash
  rgb(255 0 0 / 0.5) is red with 50% opacity
  rgb(#FF00007F); is the exact same as the above
  
 - to get grey's set each percent to the same value
 - may use integer values instead of percents, range from 0 to 255
 - may use hex notation in literal as #RRGGBB (eg #FFFFFF is black)
 - recommended percent values are divisible by 20
 - background-color may be set to a picture itself
----

----
URIs
 - is a CSS function
 - relative URI is w/ respect to CSS doc, not HTML doc
 - url(protocol://server/pathname) /*absolute*/
 - url(pathname) /*relative*/
----

----
Units
 - are equivalent to different units of measurement
 
 - px is 'pixel'
  - is assigned a whole number
  - is resolution of rendering device
  - since device resolution is so high 1px is barely visible
 
 - em is 'emphemeral unit'
  - is assigned a float
  - is some percentage of the font-size
 
 - rem is 'root emphemeral unit'
  - is assigned a float
  - is some percentage of the base-font size
 
 - vw & vh is 'viewport width' & 'viewport height'
  - is assigned a whole number between 1-100
  - each unit is 1% of the total viewport
  - for responsive design mostly
  
 - % is 'percentage'
  - is assigned a whole number between 1-100
  - is relative to some other unit (e.g. element's width)
 
 - deg is 'degrees'
 
 - ms is 'milliseconds'
 
 - s is 'seconds'
 
 - fr is 'fraction'
  - for use in CSS Grid
 
 - absolute (in, cm, mm, pt, pc)
   - pt is 'point' there are 72 points to an inch
   - pc is 'picas' equals 12 points
   - absolutes are for use in printed documents
----

----
Fonts
 - font family is term to describe many similar varied fonts
   - example: times font has timesItalic, timesBold... each is unique
 - font face is term for singular unique font 
   - example: timesItalic
 - syntax data-type is font-family
   body {font-family: sans-serif;}
 - include generic font-family as second value per chance font is not installed
   body {font-family: Chicago, sans-serif;}
 - set order of values as order of preference
 - enclose font value in single-quotes if value is string 
   eg 'New Century Schoolbook'
 - use the 'font' element to adjust weight, size and style written in any order
----

----
Web-Fonts
 - are defined using the @font-face CSS at-rule (a.k.a. a directive)
 - will download a font from the server as a binary file 
 - both versions of Web Open Font Format are supported (viz. .woff, woff2)
 - each file will only contain one font-style (e.g. italic, normal, etc.)
 - separate @font-face at-rules are needed to get the other font-styles
 
 /* get the normal font */
 @font-face {
   font-family: 'SomeNameGiven';
   src: url('/some-web-font.woff2') format('woff2);
   font-style: normal;
 }
 
 /* get the italic font (note: the font-family name is the same) */
 @font-face {
   font-family: 'SomeNameGiven';
   src: url('/some-web-italic-font.woff2') format('woff2);
   font-style: italic;
 }
----

----
Font and color
 - color property applies to both the text and text decorations
 - color value is inherited from the direct parent element
 - using 'initial' will set color to whatever the _browser_ 
   considers the default
 - currentColor can be used to apply color to a parent based
   on the child element's color
---- 

----
Font-Weight
 - specified using relative string values (normal, bold, bolder, lighter)
   - relative strings map to numerical values
 - specified using numerical values of 100
 - 100 is lightest font weight, 900 is heaviest
 - 400 is normal weight
 - if 500 is unassigned then 500's font weight equals 400's
 - if 300 is unassigned then 300's weight is next light to 400's
   - same is true of 200 and 100
 - if 600 is unassigned then 600's weight is one heavier than 400
   - same is true of 700, 800 and 900
----
 
----
Font-Size
 - specified using relative string values 
   (xx-small, x-small, small, medium, large, x-large, xx-large)
 - also specify with relative string values in relation to parent value
   (smaller, larger)
   font-size: larger;
 - size may be specified in emphemeral unit'
   font-size: 0.87em;
 - also specify using exact pixel values
  - default is 16px
   font-size: 14px; 
 - specify using percentage value in relation to parent value
   font-size: 125%
----

----
Font-Style
 - specify using keyword (italic, normal, oblique)
 - italic has slant and slight texture change 
 - oblique is simply normal with a slant
 - italic may substituted for oblique
 - oblique may not be substituted for italic
 - use font-variant to specify small-caps 
   - simply an all caps setting where implied capital letter are just larger
----

----
Font parts 
 - X-height: the height of the body of a lower-case letter less the
    any ascenders or descenders
  - good readability will have font's with the larger x-height
 - Counter: the empty space in letters such as 'p', 'a', 'o', etc.
  - good readability will have font's with open and consistent counters
 - Serifs: the swooshes and feet on a letter form
  - good readability will avoid fonts with these
  - 'sans-serif' means without-serifs
----

----
Vertical Text Elements
 - text-height is total area in which text is rendered
 - 'leading' is the difference between the line-height and the font-size
 - upon box containing multiple font-size, leading value is added to largest
 - leading is divided by 2 with one-half at top and the other at bottom
 - vertical-align is placement of text around baseline
   - assume baseline ______ then normal text rest upon
   - subscript text will hang upon 
   - superscript text will rest atop baseline text
   - bottom will align text upon bottom of element box
   - middle will align text along a center line through inline element
   
 - text-align is the common idea from word-processors with 
   values of left, right, center and justify
----

----
Spacing
 - various properties to effect spacing of text content
 - word-spacing uses integer value as additive to normal word spacing
  - double space the words
  word-spacing: 2;
   
 - letter-spacing also uses an integer, same as word-spacing
  - stretches out the word 
  letter-spacing: 5px;  
  
 - text-indent adds indentation to the front of the text content 
  - can be given a negative number to have the opposite effect
  text-indent: 50px;
  
 - white-space determines how whitespace is handled within the text of an element
  - white-space value of 'normal' is default
  - with default all redundant whitespace is striped
  - white-space value of 'pre' will stop the stripping of any whitespace
  white-space: pre;
  
  - other white-space values are 
   - nowrap: changes default behavior of having text content word-wrap to a newline
   - pre-wrap: same as pre but performs word-wrap as needed
   - pre-line: only preserves newlines, redundant whitespace is striped
   
 - text-overflow is used with other properties to add '...' to the end
   of a truncated text
  - requires overflow: hidden; and white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
----
 
----
Text-Transform
 - changes the case of a text content
  text-transform: uppercase;
  text-transform: lowercase;
   
 - default display text casing 'as is' from source html
 - useful in quick change of elements
----

----
Text-Decoration
 - regards lines on, through, below text
  text-decoration: underline
   
 - underline, overline and line-through supported 
 - may also specify none to undo any existent lining
  text-decoration: none; 
   
 - specify 'underline overline' to enclose text in lines
 - the text-decoration is not inherited
 - may specify different kinds of underline styles 
   (solid, double, dotted, dashed, wavy)
 - may specify the color of the text-decoration line
  text-decoration: underline wavy red
   
 - another decoration is text-shadow
  - works similar to box-shadow
  - example would add a red haze around each letter of the text
  text-shadow: 0px 0px 5px red; 
----
 
----
The Box Model
 - Each element has a content pane shaped as a rectangle
 - the rectangle is layered
 - at the center is the block level element contained within
 - block level element is wrapped in a padding 
 - the padding is offset by a border
 - a margin wraps around the border
    ______________________
    |margin
    |  ___________________
    |  |border
    |  |  ________________
    |  |  |padding
    |  |  | ______________
    |  |  | |block content
    
 - margins may be negative
 - values may be set with percentages - except for borders
 - values may be set per side 
   h1{margin: 10px 20px 5px 15px;} 
   /*order is always Top, Right, Bottom, Left (aka clockwise)*/
   /*upon left missing - use right*/
   /*upon bottom missing - use top*/
   /*upon right missing - use top*/
 - values set explicitly with "margin-left" datatype
 - vertical margins adjacent - small is collapsed to zero
   li{margin-top 5px; margin-bottom 10px;}
   /*distance between each row is 10, not 15*/
 - percentage value will calculate off parent width only (not height)
----

----
Box-Sizing
 - box-sizing is a CSS rule property whose value may 
   be either content-box or border-box
  - this will effect what height and width is applied to 
  .my-box {
    box-sizing: content-box; /* this is the default */
    width: 100px;
    height: 100px;
    padding: 10px;
    border: 2px solid red
  }
   - the sum-total width and height is 124 (2px + 10px + 100px + 10px + 2px)
 
  .my-other-box {
    box-sizing: border-box;
    width: 100px;
    height: 100px;
    padding: 10px;
    border: 2px solid red    
  }
   - here the sum-total is 100 and the content-area is 76 (100px - (2px + 10px + 10px + 2px))
----

----
Box-Model Display
 - each html element follows the Block-Model
 - there are three forms-of-display for an html Box-Model
  - block, inline, inline-block
 - each html element is already associated to one of the three 
   forms-of-display by default
   - e.g. div is a 'block', span is 'inline'
 - an element's form-of-display may be changed using the 'display'
   property in a CSS rule
  
  /* would cause all div's to display as inline - bad idea */
  div {
    display: inline;
  }
 
 - for 'block' 
  - element always appears on its own line
  - width will take up the full width of its parent element
  - height will default to the least-required to fits its content 
  
 - for 'inline'  
  - element appears within the same line
  - height and width are always least-required to fit its content
  - height and width cannot be assigned
  - height and width values, if assigned, have no effect
  - padding-left and padding-right may be set and will have an
    effect
  - padding-top and padding-bottom may be set but will only cause
    problems
   
 - for 'inline-block' 
  - element appears within the same line
  - height and width may be assigned and will have an effect
  - padding and margins may, also, be set and will have an 
    effect
----

----
Inline-Text rendering
 - font-size: height of single character boxes in which characters of text reside
 - line-height: 
  - greater-than font-size  
  - (line-height - font-size)/2 is area above/below character box
----

----
Borders
 - always present - set to as 'none' value
 - has width, style, color and, optionally, radius
  - border-width
  - border-style
  - border-color
  - border-radius
 - extends to edge of background color (aka padding's edge)
  - margin area does not have contents background color
 - lay atop the padding so dotted line style have background's color between
 - styles: solid; dotted; dashed; double; groove; ridge; inset; outset
  - inset, outset look like border's on buttons
 - curved corners are assigned using border-radius
 - border-radius is defined as radius 
  - for round corners a single value 
  - for elliptical corners two values separated by a forward slash
   - first value is horizontal radius, second is vertical radius
  - radius may be defined for each corner of the box
----

----
Padding
 - will expand background color
 - paddings do not collapse
 - paddings are not inherited from parent (unlike margins which are)
 - are default to zero for most elements
 - calculate on width only (like margins)
 - may be set on a per-side basis
 - inline padding may extend over adjacent lines
----

----
Margins 
 - will not expand the background color
 - setting margin to 'auto' will cause the child element
   to be centered horizontally within its parent
  - the child element will _not_ be centered vertically
  
 - margins do collapse 
  - when vertical margins butt up against one another
    they will collapse to just one margin
  - a parent's horizontal margins will collapse 
    when the parent has zero border and zero padding
    
 - margins are inherited from parent 
 - are default to zero
 - may be assigned to the value 'auto'
  - causes the inner-box whose margin is auto 
    to be centered inside it parent
----

----
Box Shadows
 - allows for a box to appear to be have a shadow or shading
 - are defined using:
  - X offset: how far the shadow will appear of the x-axis
  - Y offset: how far the shadow will appear of the y-axis
  - Blur radius: how far out the shadow is blurred
  - Spread radius: how far the shadow extends beyond the element's dimensions
  - Color: the color of the shadow
  - 'inset': allows for the shadow inside the element instead of behind it
  
  - setting the X & Y offsets to zero will have the shadow appear all the way around 
    the element
  - an element can have both an outer and inner shadow separated with a comma and
    one have the 'inset' added
  
  .my-shadow {
   box-shadow: 0 0 10px 0 black, 0 0 25px red inset;
   background: #CCCCCC;
   width: 10rem;
   height: 5rem;
  }
----

----
Backgrounds
 - backgrounds cover the area of the content, padding and border
 - margins are not included in the background
 
 - background-color: [any CSS color, e.g. hex, named, rgb() function, etc.) 
 - background-image: [url() function, radial-gradient() function, linear-gradient() function]
  - this property can take more than one value and will combine them for graphic effect
 - background-repeat: [ 'no-repeat' | 'repeat-x' | 'repeat-y'] 
  - default is to just tile the image to cover the area 
 - background-position: ['top' | 'bottom' | 'left' | 'right' | 'center']
  - can also specify a x,y coord as a unit (e.g. 50px)
 - background-size: cover (will stretch the image to fit the area)
 - background-clip: ['border-box' | 'padding-box' | 'content-box' ]
  - border-box: will extend the image to the border (i.e. default behavior)
  - padding-box: will extend the image to the padding but not the border
  - content-box: will extend the image to just the content box
 - background: is the shorthand property
  - few rules background-size's value must come directly after background-position's 
    value and the two are separated by a slash
  - background-color must always come last  
----

----
Gradients
 - are now builtin features of CSS
 - are CSS functions linear-gradient() and radial-gradient()
  - linear, gradient goes top to bottom, left to right, or some angle)
  - radial, starts at a center point and radiates outward
 - gradient functions are assigned as the value of the background-image's property
 - each function is overloaded to control all the varieties available
 - the background-image's value can be given multiple value separated by a comma
  background-image: radial-gradient(
                     ellipse at top left,
                     white 25%,
                     transparent),
                    url('my-image.jpg);
----
 
----
Linear Gradient
 - basic example
  background-image: linear-gradient(red, blue);
  
 - three color gradient
  background-image: linear-gradient(red, blue, green);
  
 - using transparent in place of a color
  background-image: linear-gradient(transparent, blue);
 
 - having gradient move right to left
  background-image: linear-gradient(to right, red, blue);
 
 - have gradient at an angle
  background-image: linear-gradient(45deg, red, blue);
  
 - control over gradient's rate-of-change
  - the percent unit following the color is where the color is supposed to 'begin'
  - in this case, like a progress bar, red starts at 0 and blue starts at 25 moving
    left to right
  background-image: linear-gradient(to right, red 0%, blue 25%)
----

----
Radial Gradient
 - basic example
  background-image: radial-gradient(red, blue); 
  
 - have the gradient radiate in a circle instead of default ellipse
  background-image: radial-gradient(circle, red, blue);
  
 - to move the center of the radiance 
  - the center of the radiance would begin 25% from the left (think, like 
    a progress-bar)
  background-image: radial-gradient(circle at 25%, red, blue);

 - to move the center of radiance up, down, left, right
  - the gradient would radiate from the top left corner
  background-image: radial-gradient(circle at top left, red, blue);
----

----
Layout management
 - floating places element in content forcing content to flow around it
 - values can be left, right, inline-start, inline-end (for other 
    languages that read right-to-left)
 .my-float { float: right; }
 - floating element's margins do not collapse
 - a floated element is contained w/i its parent's content block
 - can be used in combination with 'clear' property
 - using clear makes it so the element does not flow around some
   floating element 
 - values of 'clear' can be  none (default), left, right, 
    both, inline-start, inline-end
----

----
Positioning
 - is defined by the 'position' property of a rule
 - is moved around using assign values to generic left, right, top and bottom
  - conflicts between top & bottom, top wins
  - conflicts between left & right, left wins  
  
 - 'static' position is the default, same as none at all
  - any element with a position value other than 'static'
    is considered as 'positioned'
    
 - 'relative' position is relative to where the element _would_ 
   be if its position was static
  position: relative:
  top: 10px;
  left: 10px;
  
 - 'absolute' is removed from the document flow 
  - is not sized in relation to its parent content area
  - is positioned in relation to its closest ancestor's positioned element
   - meaning, if no ancestor (parent or higher) has some value for 'position'
     other than static the closest ancestor becomes the document root
   - will behave differently based the some ancestor's position value
  
 - 'fixed' is positioned in relation to the viewport 
  - this will cause an element to remain in its position even if the 
    user scrolls down
    
 - 'sticky' is a combination of relative and fixed
 
 - 'z-index' will override previous relative, fixed and absolute positioned 
   elements 
  - the higher the z-index value the closer it will appear to the user
  - the z-index is not global, it is relative to other elements 
----

----
Stacking Context
 - represents the z-axis of any element
 - default is only one z-axis from the root <html> element
 - various rules may establish a new stacking context
  - any element with a position value other than 'static' _and_ 
    a z-index value other than 'auto'
  - any element with an opacity less than 1
  - any element which is a child of a flex or grid container _and_ 
    a z-index value other than 'auto'

 - stacking context, may, in turn, themselves stack (i.e. one context 
   over top another)
  - z-index, in one stacking context will not override another despite
    it having a higher value
----

----
Overflow
 - for the condition of an explicit height in which the content does not fit
 - when content does not fit it will wrap to a new line
 p {overflow: visible;} /*will let the content just 'go out' of the box */
 p {overflow: scroll;} /*to set content into a scrollpane */
 p {overflow: hidden;} /*exceeding content is simple truncated */
----

----
Clip Area
 clip: rect(10px, 10px, 0, 0);
 - for setting the area of rendering w/o changing the content block size
 - only excepts absolute values or the keyword 'auto'
----

----
Transforms
 - are CSS functions 
 - are applied to the property named 'transform'
 - multiple transforms are stacked as space-separated calls to 
   the various transform functions
----

----
Rotation functions 
 - are CSS functions
 - is a kind of CSS Transform
 - rotate function
  - takes a value as a CSS unit of deg, grad, rad and turn
  - is based (0,0) of Cartesian graph as top-left corner
  - rotation point is defaulted to the center of an element
  - rotation point can be moved using the transform-origin property
   - transform-origin can take the CSS units of px and % or discrete
     values of left, center, right, top and bottom
 transform: rotate(45deg);

 - perspective function
  - applies a kind of vanishing point perspective to an element
  - used in conjunction with other transform functions
 
 - rotateX function
  - imagines the x-axis as a kind-of pole on which the element swings around
  - illustrated best when used with the 'perspective' function
 transform: perspective(200px) rotateX(45deg);
 
 - rotateY function
  - same as its counterpart, rotateX, only the 'pole' is now the y-axis
  
 - rotate3d function 
  - like other rotate functions; however, option to specify 'pole' upon
    which rotation is centered as a vector in 3d space (x,y,z) in the form of
    a float value between 0 and 1
 transform: rotate3d(0.5,0.25,0,45deg) perspective(200px);
----

----
Translate functions
 - are CSS functions 
 - is another kind of CSS Transform
 - moves an element from its original position
 - has more options than position: relative
 
 - translate (translateX, translateY) function
  - does the basics just like position relative
  
 - translateZ function
  - causes the element to appear as if it is hovering 
    above the other elements in 3d space  
 transform: translateZ(2rem);

 - translate3d function
  - takes 3 parameters for offsets of the x, y and z-axis
 transform: translate3d(1rem, 2rem, 3rem);
----

----
Scale functions
 - are CSS functions
 - is another kind of CSS Transform
 - scales an element along one of the 3 axis 
 
 - scale (scaleX, scaleY) function
 transform: scale(2,3);
 
 - scaleZ function
  - must be used in combination with one of the other
    transform functions
 transform: perspective(200px) scaleZ(5) rotateX(45deg)
 
 - scale3d function
  - performs scaling effect along a specified vector 
----

----
Skew functions
 - are CSS functions
 - is another kind of CSS Transform
 - skews an element (making a square look like a diamond)
 
 - skew function
 transform: skew(45deg, 20deg);
----

----
Transitions
 - is a CSS property which allows control for the rate-of-change
   of other CSS property values
 - is expressed in a the CSS unit of milliseconds
 
 - simplest example is just one ms unit value
 transition: 500ms;
 
 - transition can be specified to specific properties of a rule
  - example would transition color over half-a-second and 
    while the transformation would delay for half-a-second then
    change, likewise, over half-a-second
  - the property value's format is <property-name> <duration> <delay>
 transition: background-color 500ms 
             transform 500ms 500ms;
             
 - long-hand specification is possible like most CSS properties
 transition-property: background-color, transform;
 transition-duration: 500ms, 500ms;
 transition-delay: 0ms, 500ms;
----

----
Transition Easing functions
 - are CSS functions
 - deal with the duration timing of some property's state-change
 - may be specified as discrete steps 
 - or may be expressed as a cubic-bezier (continuous) function
  - cubic-bezier are specifying to coordinates as x and y
 transition-timing-function: cubic-bezier(0.14, 0.26, 0.3, 0.4);
 
 - linear cubic-bezier value
  - same as cubic-bezier(0, 0, 1, 1);
 transition-timing-function: linear;
 
 - ease cubic-bezier value
  - same as cubic-bezier(0.25, 0.1, 0.25, 1.0);
 transition-timing-function: linear;

 - ease-in cubic-bezier value
  - same as cubic-bezier(0.42, 0.1, 1.0, 1.0);
 transition-timing-function: ease-in;
 
 - ease-out cubic-bezier value
  - same as cubic-bezier(0.0, 0.0, 0.58, 1.0);
 transition-timing-function: ease-out;

 - ease-in-out cubic-bezier value
  - same as cubic-bezier(0.42, 0.0, 0.58, 1.0);
 transition-timing-function: ease-in;
----

----
Animations
 - like transition only with many discrete steps 
 - use special at-rule called @keyframes
 - @keyframes is nesting of two or more rules in which 
   the selector is percentage or some keyword (e.g. from, to)
 - multiple animations can be defined, all will begin with
   the @keyframes at-rule
 - the selector name given in the @keyframes is then
   assigned to the 'animation' property of a CSS Rule
 - the animation property is short-hand for many animation-related 
   values
  - ordinal of animation-related values are mostly all different
    CSS units so the browser figures out what is what
  - one exception is two values that are both 'ms' or 's' time units
   - the first one is always treated as duration, the second as delay
 - animation is performance heavy, can hint to browser what may be 
   animated using the 'will-change' property whose value is the other
   CSS Rule properties that are animated (e.g. will-change: opacity; )   
 
 @keyframes my-colors {
  0% { background: red;} 
  50% { background: blue; }
  100% { background: green; }
 }
 .box00 {
   animation: my-colors 2s;
   width: 10rem;
   height: 10rem;
 }
 /* animation properties long-hand */
 .box01 {
   animation-name: my-colors;
   animation-duration: 2500ms;
   
   /* same as values in transition */
   animation-timing-function: ease-in;
   
   /* how long before animation begins */
   animation-delay: 4s;
   
   /* 
    changes the fill behavior, default is none, other 
    values include forward, backwards and both
   */
   animation-fill-mode: none;
   
   /* how many times to replay, default is 1 */
   animation-iteration-count: infinite;
   
   /* 
    direction to play the animation, default is normal, other
    values include reverse, alternate, and alternate-reverse
   */
   animation-direction: normal;
   
   /* 
    intended to allow JavaScript to assign as either 
    running or paused
   */
   animation-play-state: running;
 }
----

----
Flexible Box Layout Module
 - commonly known as flexbox
 - is one-dimensional layout of elements either
   horizontally or vertically (but not both)
 - using flexbox 
  - containing element is called 'flex container'
  - items therein are called 'flex items'
 - create a flex container by assigning the display to flex
  - inline elements use 'inline-flex'
 - specify the direction of the flex container using flex-direction
 - flex-grow value of 1 will force each item to take an equal
   portion of the flex-container
 display: flex;
 flex-direction: row;
 flex-grow: 1;
----

---- 
Justify Content of Flex Container
 - 'justify-content' how the flex items are arranged 
   along the main axis of a flex container
  - flex-start: the default, flex items start on left
    extra space appears on the right
  - flex-end: just the opposite of flex-start
  - center: flex-items are arranged at the center
  - space-between: maximizes the space between each flex item
  - space-around: maximizes the space between each flex item
    with extra space between first and last flex item and the 
    edge of the flex container
  - space-evenly: maximizes the space between each edge of the 
    flex container and the space between each flex item
 justify-content: center
----

----
Align Items of Flex Container
 - 'align-items' how the flex items are arranged 
   along the cross axis of a flex container
  - stretch: flex items are stretched to fill available
    space along cross axis
  - flex-start: flex items are arranged a the start of the
    cross axis
  - flex-end: just the opposite of flex-start
  - center: flex items are arranged along the center 
    of the cross axis
  - baseline: flex items are arranged along the baseline
    of their own text
 align-items: center;
----

----
Responsive Design
 - requires a meta tag added in the head element
 <meta name="viewport" content="width=device-width, initial-scale=1.0">
 
 - media query is a CSS At-Rule that specifies a medium (viz. all,
   print, screen, speech) and a condition
  - media query values are pragmatic based on crowding of content 
    and not targeting specific devices
 @media screen 
    and (min-width: 600px)
    and (orientation: landscape) {
   /*
     the rules for this screen here
   */  
 }
    
 - clamp function
  - used to specify a min, preferred and max size
 font-size: clamp(48px, 4.8vw, 64px); 
----

----
CSS Grid
 - for a lattice like layout
 - create a grid container by assigning the display to grid
  - inline elements use 'inline-grid'
 - using CSS Grid
  - containing element is called 'grid container'
  - items therein are called 'grid items'
  - the lines that divide one grid item from another is called 'grid lines'
   - grid lines are ordinal numbered starting at 1 from 
     left to right/top to bottom
  - the rows and columns formed from grid items are called 'grid tracks'
   - are also ordinal numbered starting at 1 from 
     left to right/top to bottom
  - any space enclosed by 4 grid lines is called a 'grid area'
  - any explicit definition of grid tracks are called 'explicit grid'
  - additional tracks added are called 'implicit grid'
 .container {
   display: grid;
   
   /* 
    this is defining both the size and number of columns
     - 1fr means each column is split equally within total space 
       of the grid container
   */
   grid-template-columns: 1fr 1fr 1fr;
   
   /* 
    this is defining the size and number or rows
     - repeat function to repeat a number of tracks (count, size-thereof)
     - minmax function to stretch size to avoid overflow
     - auto-fill keyword will adjust the number of rows
       to match the number of HTML entries
     - auto-fit keyword will adjust both the number to match 
       the HTML and fit them to fill the track
   */
   grid-template-rows: repeat(auto-fill, minmax(3rem, auto));
   
   /* default size of any additional rows */
   grit-auto-rows: 5rem;
   gap: 5px;
 }
 
 - gain direct reference to a grid item via index (one-based)
  - the values of grid-row and grid-column, etc are the grid lines
 .my-grid-item {
   background-color: skyblue;
   grid-row: 2;
   grid-column: 3;
 }
 
 - have a single grid item span multiple rows or columns
  - is with reference to the grid lines 
  .my-multi-grid-item-1 {
    grid-row: 2;
    gird-column-start: 3;
    grid-column-end: 5;
  }
  
 - short-hand version of multiple rows or columns
 .my-multi-grid-item-2 {
   grid-row: 2;
   
   /* start at grid line 3 and stop at grid line 5 */
   grid-column: 3 / 5
 }
 
 - another short-hand version of multiple rows or columns
 .my-multi-grid-item-2 {
   grid-row: 2;
   
   /* start at grid line 3 and continue for two more gird lines */
   grid-column: 3 / span 2;
 }
 
 - give grid lines an alias during declaration of a grid container
 .grid-container-with-named-lines {
   display: grid;
   grid-template-rows :
    [header-start] 2rem
    [content-start] 10rem
    [footer-start] 2rem
    [footer-end];
   grid-template-columns:
    [sidebar-start] 5rem
    [content-start] 1fr
    [content-end];
 }
 
 - reference to the grid line's alias without the square braces
 .header {
   grid-row: header-start / content-start;
   grid-column: sidebar-start / content-end;
 }
 
 .footer {
   grid-column: sidebar-start / content-end;
 }
 
 - give a grid area an alias by reusing the same name for some group
   of grid tracks
  - aliased grid areas are enclosed in single quotes
 .grid-container-with-named-areas {
   display: grid;
   
   /* we have a 3 X 2 grid */
   grid-template-rows: 2rem 10rem 2rem;
   grid-template-columns: 5rem 1fr;
   grid-template-areas:
     'header header header'
     'sidebar content content'
     'footer footer footer';
 }
----

----
Visibility
 - for setting a block to invisible 
 - while not begin seen, the content block and padding still affect the layout
 p.myClass {visibility: hidden;}
 /*will remove content text, borders, colors, etc */
----

----
Basics
 - use id(s) names for persistent structural elements (eg navBar, contentArea) 
 - use id(s) for one-time elements as well
 - class(s) are used for types of content (eg date, formLabel)
 - both id and class names need to be as un-presentational as possiable
  - use 'error' instead of 'red'
  - use 'secondContent' instead of 'leftContent'
 - don't over-use class(s)
 <h3 class="h3-news">A Fancy Header</h3>
 <p class="p-news">A listing of news</p>
 <p class="p-news">More details</p>
 <!--INSTEAD USE THIS-->
 <div class="news">
 <h3>A Fancy Header</h3>
 <p>A listing of news</p>
 <p>More details</p>
 </div>
 /* having the CSS look as Such*/
 div.news {
  font-size:8px;
 }
 div.news h3{
  font-color:red;
 }
 div.news p{
  font-color:grey;
 }
 
 - don't overuse the <div> markup either 
  - use div when there is no other element that does the job
  - eg: don't wrap a list in a div if you can just give the list an Id
----

----
Positioning
 - blocks move naturally from top to bottom
  <div style="border-style:groove;
             border-width:thin;">
    <p>Here is box one
  </div>
  <div style="border-style:groove;
             border-width:thin;">
    <p>Here is box two - its just below box 1
  </div>
 
 -use the 'float' keyword to change the top-to-bottom flow
  <div style="border-style:groove;
             border-width:thin;
             float:right;">
    <p>Here is box one and its on the right now
  </div>
  <div style="border-style:groove;
              border-width:thin;">
    <p>Here is box two an it moved 'up' - taking box 1's old space
       Notice that Box one is actually w/i box two because assigning a float
       caused the box one to move 'outside' the normal top-to-bottom flow
  </div>

  <div style="border-style:groove;
             border-width:thin;
             float:left;">
    <p>Here is box one and its on top of box two!
  </div>
  <div style="border-style:groove;
             border-width:thin;">
    <p>---Notice that text 'butts' up against Box 1.  Even though Box 1 is atop
       Box 2 the text moves around the obstruction.
  </div>
 
  <div style="border-style:groove;
             border-width:thin;
             float:left;">
    <p>Here is box one.
  </div>
  <div style="border-style:groove;
             border-width:thin;
             float:left;">
    <p>Here is box 2. We now have a horizontal look.  This is the opposite of 
       what we get by specifying no float.
  </div>
 
  <div style="border-style:groove;
             border-width:thin;
             float:left;
             width:800px;">
    <p>Here is box one.
  </div>
  <div style="border-style:groove;
             border-width:thin;
             float:left;">
    <p>Box 2 has moved back below Box 1 because there isn't enough width 
       to have a horizontal appearance.
  </div>
  
  <div style="border-style:groove;
             border-width:thin;
             float:left;
             width:200px;
             height:200px">
    <p>Imagine this is an image.
  </div>
  <div style="border-style:groove;
             border-width:thin;">
    <p>Like expected the text appears butted up against the image.
  </div>
  <div style="border-style:groove;
              border-width:thin;
              clear:left;">
    <p>using the 'clear' attribute we force the text to appear down here
  </div>              
----
 
----
Force Float Elements Into a Div
 - start with the wrapper div
 - enclose the regular floated elements
 - add another invisible div with the clear attribute set to both
 - the invisible div needs to be enclosed in the wrapper div
 <div style="border-style:groove;
             border-width:thin;">
  <p style="border-style:groove;
            border-width:thin;
            float:left">This is floated to the left.</p>
  <p style="border-style:groove;
            border-width:thin;
            float:right;">This is floated to the right</p>
  <div style="clear:both;"></div>
 </div>
----