"CSS: The Definitive Guide, 3rd Edition" 
by Eric Meyer 
Publisher: O'Reilly 
Pub Date: November 2006 
Print ISBN-10: 0-596-52733-0 
Print ISBN-13: 978-0-59-652733-4 
Pages: 536

CSS Mastery: Advanced Web Standards Solutions 
by Andy Budd; Cameron Moll; Simon Collison 
Publisher: Apress 
Pub Date: February 2006 
Print ISBN: 978-1-59059-614-2 
Web ISBN: 1-59059-614-5 
Pages: 280 

Modern CSS: Master the Key Concepts of CSS for Modern Web Development
by Joe Attardi
Publisher: Apress
Release Date: October 2020
ISBN: 9781484262948

----
CSS Overview
 - HTML was intended as a Markup language, not a presentation language
 - CSS is intended as the complement presentation language
 - initial standard published in late 1996
 - second publication in May 1998
 - third publications (CSS 2.1) in June 2011
 - MIME type is text/css
----

----
CSS Syntax
 - CSS style sheet consist of Rules
 - Rules target HTML elements via Selectors
 - each Rule has one or more Selector(s)
 - each Rule has one Body enclosed by curly-braces
 - within the Body are the Properties of the CSS Rule
 - Properties are delimited from each other by a semi-colon
 - each Property is a name-value pair separated by a colon
 - the Property-Value may one or more items separated by a space
  - space-separated property values is known as 'shorthand properties'

    Selector
       |
       V                      --+
    .header {                   |
      background-color: red;    +- Rule
      border: 1px solid blue;   |
    } .    .  .             . --+
      |_____________________| 
      .    .  . |           .
      .    .  . Property    .
      |____|  .             .
        |     .             .
Property Name .             .
              .             .
              |_____________|
                     |
                Property Value
----

----
CSS Directives At-Rule
 - are a kind of preprocessor which instructs the CSS interpretor 
 - called "At-Rule" because they start with '@' symbol
 - have a regular form 
  @charset "utf-8";
  
 - there is also a nested form
 @font-face {
   font-family: 'SomeNameGiven';
   src: url('/some-font.woff2') format('woff2'),
        url('/some-font-woff') format('woff);
 }
----

----
Style Sheets Types: 
 - declared within the <head> tag
 - precedence given to style declared closest to tag
 
Linked: stored on a separate file
 - default type
 - set in a separate document
 - CSS syntax is contained in separate doc
 <head>
 <link rel="stylesheet" href="myStyleSheet.css" type="text/css">
 </head>
 
Embedded: set at top of the html source file
 - override linked for single source file
 <head>
 <style type="text/css">
 table.myTable {background:black;
                text-align:center}
 </style>
 </head>
 
Inline: set at each occurrence within source file
 - override linked or embedded for tag by tag basis
 <table style="background:black; text-align:center">
 
----

----
Link Tag
 <link rel="stylesheet" type="text/css" href="sheet.css" media="all" />
  - must be placed w/i the <head> </head> element
  - more than one <link /> element is ok - will be combined
  - link: associate other documents to this document
  - rel: relationship
  - type: MIME typename
  - href: absolute || relative path to css sourcefile
  - media: to specify which (or all) media types (eg brail, tty, tv, handheld)
  - alternative: <style text="text\css">@import url(mycss.css) </style>
    - @import must first statement 
    - must appear within the style element
    - 1 to many @import statements OK 
----

----
Comments
 - /* ...*/ type only 
 - may exceed single line
----

----
Universal Selector
* { margin:0; padding0;}
 - override the entire sheet
----

----
Class Selector
table.myTable {background:black;}
  - declare myTable css class within the <style> html tag
  - table is html tag reference

<table class="myTable" width="50%">
  - instantiate myTable within the table html tag

.myClass {font-style: bold;}
table.myClass {font-style: italic;}
 - any element using 'myClass' will have bold font style
 - table elements using 'myClass' will have both bold and italic font styles

.myClass {font-style: bold;}
.myOtherClass {font-style: italic;}
.myClass.myOtherClass {background: red;}
<p class="myClass myOtherClass">Text here </p>
  - calls to "myClass myOtherClass" will get all three values
  - calls must have space separator between class names
----

----
Id Selector
#my-id {background: blue;}
<p id="my-id">A blue background here </p>
 - similar effect as CSS Classes
 - may only be called once per HTML doc
 - classes may be called many times per HTML doc
 - cannot be combined like classes
----

----
Attribute Selectors
p[censorme] {foreground: black;}
<p censorme="freedom">Freedom</p>
<p censorme="of-speech">Of Speech</p>
 - any paragraph that has a 'censorme' attribute will get a black foreground
 - useful for XML where attributes are custom
 - what the attribute is assigned to does not matter
  
p[denyme] [censorme] {foreground: black;}
 - may have more than one attribute attached
 
p[censorme="top-secret"]
 - may specify attribute having value
 - attribute value must match exactly (eg top-secret vs top secret)
 
p[censorme~="secret"]
 - may match using wildcard string, included tilde before equal sign

p[censorme^="secret"] /*must begin with "secret"*/
p[censorme$="secret"] /*must end with "secret"*/
p[censorme|="secret"] /*match "secret" and "secret-" */
----

----
Descendant Selectors
h1 em {color: gray;}
 - will color only em elements found within h1 elements
 - spacing between h1 and em is considered "found within"
 
ul ol ul {color: gray;}
 - specific to and only to nodes in this order
----

----
Multiple Independent Selectors
.class-one, .class-two {color: gray;}
 - will apply the style to any element of class 'class-one' 
   and any element of class 'class-two'
----
 
----
Child Selectors
h1 > em {color: gray;}
 - only em nodes that are children of h1 
 - affective upon h1 direct child nodes, not em's child nodes
----

----
General Sibling Selector
.header ~ div
 - would match to div elements that are direct siblings after 
   the element with the 'header' class
 - would not match the element with the 'header' class itself
----
 
----
Adjacent Sibling Selectors
h1 + p {color: gray;}
 - given h1 and p having same parent node, affect p element that follows h1
 - h1 and p are siblings
 - p element must follow h1 sibling immediately
 - such order is known as "source order" as in source-code order
----
 
----
Pseudo-Classes
 - often used as event selectors
 - concern the state of an element
 - may be used alone or with another selector
----

----
UI State Pseudo-Classes
:active 
 - matches elements that are currently being activated
 
:checked
 - matches radio-button, checkbox or option inside a 'select' element 
 
:focus
 - matches an element that currently has focus, typically buttons, links and text

:hover
 - matches elements that are currently being hovered by the mouse cursor
 
:valid, :invalid
 - used with HTML5 validation

:visited {color: purple;}
 - matches link elements that have already been visited 
----

----
Document Structure Pseudo-Classes
:first-child, :last-child
 - matches an element that is the first or last child of a parent element
 
:nth-child(1)
 - matches the first child element of the parent
 - index begins at 1 not 0 
 
:nth-child(2n)
 - matches every other child element of the parent
 
:nth-child(4n)
 - matches every forth child element of the parent
 
:nth-child(odd)
 - matches every child element whose ordinal is odd
 
:nth-child(even)
 - matches every child element whose ordinal is even
 
:root
 - matches to the root element of the DOM
----

----
Negation Pseudo-Class
:not(.my-class)
 - would select any element that is not of class 'my-class'
----

----
Pseudo-Element
 - apply to block elements only
 - allows for match to only part of the element
 - have a double-colon instead of just a single colon
  - this changed in CSS3, in CSS2 there was only one-colon

h1::first-letter {color: red;}
 - first letter of any h1 element will be red

p::first-line {color: gray;}
 - first line of any p element is always gray 
 
 - special case pseudo-elements actually create new elements 
   by appending content to the end of the block 
h2::before {content: "[";}
h2::after {content:"]";}
----

---- 
Specificity
 - resolves element with more than one selector
 - valued by ordered four-set (n4,n3,n2,n1)
 - determined left to right (e.g. 0,1,0,0 still greater than 0,0,0,9)
 - highest value is what is selected by browser
 - inline declaration adds one to {n4}
 - CSS-ID adds 1 to {n3}
 - CSS Classes, Attribute Selectors each add 1 to {n2}
 - each element in the selector adds 1 to {n1}
 - the universal selector (* {something: here;}) adds nothing to any
 - trump all by adding !important right before the closing semicolon
 - resolve specificity equality by appearance in sheet - lowest entry wins 

 h1#a-specific-id {background: black;} /*0,1,0,1*/
 h1.myClass {background: black;} /*0,0,1,1*/
 h1[myAttribute] {background: black;} /*0,0,1,1*/
 h1 em body {background: black;} /*0,0,0,3*/
----
 
----
Inheritance
 - elements inherit style settings from parent element (eg <ul> to <li>)
 - certain styling elements do not inherit, like borders, padding, etc
 - inherited style add nothing to elements specificity
----

----
Cascade determination
 - !important marked elements win out, even over in-line style entries
 - author origin wins out over reader origin w/o !important involved
 - reader origin wins out over author origin w/ !important declared on both
 - specificity comes into play after origin and !important
 - last determination is location in sheet - lowest wins
----

----
CSS Variables
 - are officially called 'CSS custom properties'
 - useful for avoiding shotgun surgery changes and magic numbers
 - are defined within the body of a rule 
 - are defined same as a property except they are prefixed with two dashes
 - are resolved using the CSS var() Function 
 - variable scope is is preserved in Descendant Selectors
 - global variables are defined in the 'root' pseudo-class
 
 :root {
  --my-variable: blue;
 }
 
  - variables may be assigned value from other variables
  :root {
    --border-color: red;
    --border-style: solid;
    --border-width: 3px;
    --border: var(--border-color) var(--border-style) var(--border-width)
  }
----

----
CSS Global Keywords
 - built-in property values as keywords
 - are assigned to a Rule's property value
  - initial: the initial value assigned by the browser
  - inherit: the value of the parent element
  - unset: combines the latter two giving 'inherit' precedence
  - currentColor: this resolves to the 'color' value of the text 
----

----
CSS Functions
 - are builtin and global scoped
 - calc() will resolve some value
 - var() will resolve some variable back to its value
 - url() will lookup an image based on URI (abs or rel)
 
 :root {
   --some-variable: 0.5rem;
 }
 
 .some-class {
   padding: calc(var(--some-variable) * 2);
 }
----

----
CSS Colors and Color Functions
 - 17 standard colors supported in CSS2.1
 - 140 colors supported in CSS3.0
 - rgb(100%, 100%, 100%) is white
 - rgb(0%, 0%, 0%) is black
 - rgb([red],[green],[blue]) is the order, hence 'rgb'
 - opacity may be set as a float separated by a forward slash
  rgb(255 0 0 / 0.5) is red with 50% opacity
  rgb(#FF00007F); is the exact same as the above
  
 - to get grey's set each percent to the same value
 - may use integer values instead of percents, range from 0 to 255
 - may use hex notation in literal as #RRGGBB (eg #FFFFFF is black)
 - recommended percent values are divisible by 20
 - background-color may be set to a picture itself
----

----
URIs
 - is a CSS function
 - relative URI is w/ respect to CSS doc, not HTML doc
 - url(protocol://server/pathname) /*absolute*/
 - url(pathname) /*relative*/
----

----
Units
 - are equivalent to different units of measurement
 
 - px is 'pixel'
  - is assigned a whole number
  - is resolution of rendering device
  - since device resolution is so high 1px is barely visible
 
 - em is 'emphemeral unit'
  - is assigned a float
  - is some percentage of the font-size
 
 - rem is 'root emphemeral unit'
  - is assigned a float
  - is some percentage of the base-font size
 
 - vw & vh is 'viewport width' & 'viewport height'
  - is assigned a whole number between 1-100
  - each unit is 1% of the total viewport
  - for responsive design mostly
  
 - % is 'percentage'
  - is assigned a whole number between 1-100
  - is relative to some other unit (e.g. element's width)
 
 - absolute (in, cm, mm, pt, pc)
   - pt is 'point' there are 72 points to an inch
   - pc is 'picas' equals 12 points
   - absolutes are for use in printed documents
----

----
Fonts
 - font family is term to describe many similar varied fonts
   - example: times font has timesItalic, timesBold... each is unique
 - font face is term for singular unique font 
   - example: timesItalic
 - syntax data-type is font-family
   body {font-family: sans-serif;}
 - include generic font-family as second value per chance font is not installed
   body {font-family: Chicago, sans-serif;}
 - set order of values as order of preference
 - enclose font value in single-quotes if value is string 
   eg 'New Century Schoolbook'
 - use the 'font' element to adjust weight, size and style written in any order
----

----
Web-Fonts
 - are defined using the @font-face CSS at-rule (a.k.a. a directive)
 - will download a font from the server as a binary file 
 - both versions of Web Open Font Format are supported (viz. .woff, woff2)
 - each file will only contain one font-style (e.g. italic, normal, etc.)
 - separate @font-face at-rules are needed to get the other font-styles
 
 /* get the normal font */
 @font-face {
   font-family: 'SomeNameGiven';
   src: url('/some-web-font.woff2') format('woff2);
   font-style: normal;
 }
 
 /* get the italic font (note: the font-family name is the same) */
 @font-face {
   font-family: 'SomeNameGiven';
   src: url('/some-web-italic-font.woff2') format('woff2);
   font-style: italic;
 }
----

----
Font-Weight
 - specified using relative string values (normal, bold, bolder, lighter)
   - relative strings map to numerical values
 - specified using numerical values of 100
 - 100 is lightest font weight, 900 is heaviest
 - 400 is normal weight
 - if 500 is unassigned then 500's font weight equals 400's
 - if 300 is unassigned then 300's weight is next light to 400's
   - same is true of 200 and 100
 - if 600 is unassigned then 600's weight is one heavier than 400
   - same is true of 700, 800 and 900
----
 
----
Font-Size
 - specified using relative string values 
   (xx-small, x-small, small, medium, large, x-large, xx-large)
 - also specify with relative string values in relation to parent value
   (smaller, larger)
   font-size: larger;
 - size may be specified in emphemeral unit'
   font-size: 0.87em;
 - also specify using exact pixel values
  - default is 16px
   font-size: 14px; 
 - specify using percentage value in relation to parent value
   font-size: 125%
----

----
Font-Style
 - specify using keyword (italic, normal, oblique)
 - italic has slant and slight texture change 
 - oblique is simply normal with a slant
 - italic may substituted for oblique
 - oblique may not be substituted for italic
 - use font-variant to specify small-caps 
   - simply an all caps setting where implied capital letter are just larger
----

----
Vertical Text Elements
 - text-height is total area in which text is rendered
 - 'leading' is the difference between the line-height and the font-size
 - upon box containing multiple font-size, leading value is added to largest
 - leading is divided by 2 with one-half at top and the other at bottom
 - vertical-align is placement of text around baseline
   - assume baseline ______ then normal text rest upon
   - subscript text will hang upon 
   - superscript text will rest atop baseline text
   - bottom will align text upon bottom of element box
   - middle will align text along a center line through inline element
   
 - text-align is the common idea from word-processors with 
   values of left, right, center and justify
----

----
Spacing
 - various properties to effect spacing of text content
 - word-spacing uses integer value as additive to normal word spacing
  - double space the words
  word-spacing: 2;
   
 - letter-spacing also uses an integer, same as word-spacing
  - stretches out the word 
  letter-spacing: 5px;  
  
 - text-indent adds indentation to the front of the text content 
  - can be given a negative number to have the opposite effect
  text-indent: 50px;
  
 - white-space determines how whitespace is handled within the text of an element
  - white-space value of 'normal' is default
  - with default all redundant whitespace is striped
  - white-space value of 'pre' will stop the stripping of any whitespace
  white-space: pre;
  
  - other white-space values are 
   - nowrap: changes default behavior of having text content word-wrap to a newline
   - pre-wrap: same as pre but performs word-wrap as needed
   - pre-line: only preserves newlines, redundant whitespace is striped
   
 - text-overflow is used with other properties to add '...' to the end
   of a truncated text
  - requires overflow: hidden; and white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
----
 
----
Text-Transform
 - changes the case of a text content
  text-transform: uppercase;
  text-transform: lowercase;
   
 - default display text casing 'as is' from source html
 - useful in quick change of elements
----

----
Text-Decoration
 - regards lines on, through, below text
   text-decoration: underline
   
 - underline, overline and line-through supported 
 - may also specify none to undo any existent lining
   text-decoration: none; 
   
 - specify 'underline overline' to enclose text in lines
 - the text-decoration is not inherited
 - may specify different kinds of underline styles 
   (solid, double, dotted, dashed, wavy)
 - may specify the color of the text-decoration line
   text-decoration: underline wavy red
----
 
----
The Box Model
 - Each element has a content pane shaped as a rectangle
 - the rectangle is layered
 - at the center is the block level element contained within
 - block level element is wrapped in a padding 
 - the padding is offset by a border
 - a margin wraps around the border
    ______________________
    |margin
    |  ___________________
    |  |border
    |  |  ________________
    |  |  |padding
    |  |  | ______________
    |  |  | |block content
    
 - margins may be negative
 - values may be set with percentages - except for borders
 - values may be set per side 
   h1{margin: 10px 20px 5px 15px;} 
   /*order is always Top, Right, Bottom, Left (aka clockwise)*/
   /*upon left missing - use right*/
   /*upon bottom missing - use top*/
   /*upon right missing - use top*/
 - values set explicitly with "margin-left" datatype
 - vertical margins adjacent - small is collapsed to zero
   li{margin-top 5px; margin-bottom 10px;}
   /*distance between each row is 10, not 15*/
 - percentage value will calculate off parent width only (not height)
----

----
Box-Sizing
 - box-sizing is a CSS rule property whose value may 
   be either content-box or border-box
  - this will effect what height and width is applied to 
  .my-box {
    box-sizing: content-box; /* this is the default */
    width: 100px;
    height: 100px;
    padding: 10px;
    border: 2px solid red
  }
   - the sum-total width and height is 124 (2px + 10px + 100px + 10px + 2px)
 
  .my-other-box {
    box-sizing: border-box;
    width: 100px;
    height: 100px;
    padding: 10px;
    border: 2px solid red    
  }
   - here the sum-total is 100 and the content-area is 76 (100px - (2px + 10px + 10px + 2px))
----

----
Box-Model Display
 - each html element follows the Block-Model
 - there are three forms-of-display for an html Box-Model
  - block, inline, inline-block
 - each html element is already associated to one of the three 
   forms-of-display by default
   - e.g. div is a 'block', span is 'inline'
 - an element's form-of-display may be changed using the 'display'
   property in a CSS rule
  
  /* would cause all div's to display as inline - bad idea */
  div {
    display: inline;
  }
   
 - a 'block' element always appears on its own line
 - a 'block' element's width will take up the full width of its parent element
 - a 'block' element's height will default to the least-required to fits its content 
   
 - an 'inline' element appears within the same line
 - an 'inline' element's height and width are always least-required to fit its content
 - an 'inline' element's height and width cannot be assigned
 - an 'inline' element's height and width values, if assigned, have no effect
 - an 'inline' element's padding-left and padding-right may be set and will have an
   effect
 - an 'inline' element's padding-top and padding-bottom may be set but will only cause
   problems
   
 - an 'inline-block' element appears within the same line
 - an 'inline-block' element's height and width may be assigned and will have an effect
 - an 'inline-block' element's padding and margins may, also, be set and will have an 
   effect
----

----
Inline-Text rendering
 - font-size: height of single character boxes in which characters of text reside
 - line-height: 
  - greater-than font-size  
  - (line-height - font-size)/2 is area above/below character box
----

----
Borders
 - always present - set to as 'none' value
 - has width, style, color and, optionally, radius
  - border-width
  - border-style
  - border-color
  - border-radius
 - extends to edge of background color (aka padding's edge)
  - margin area does not have contents background color
 - lay atop the padding so dotted line style have background's color between
 - styles: solid; dotted; dashed; double; groove; ridge; inset; outset
  - inset, outset look like border's on buttons
 - curved corners are assigned using border-radius
 - border-radius is defined as radius 
  - for round corners a single value 
  - for elliptical corners two values separated by a forward slash
   - first value is horizontal radius, second is vertical radius
  - radius may be defined for each corner of the box
----

----
Box Shadows
 - allows for a box to appear to be have a shadow or shading
 - are defined using:
  - X offset: how far the shadow will appear of the x-axis
  - Y offset: how far the shadow will appear of the y-axis
  - Blur radius: how far out the shadow is blurred
  - Spread radius: how far the shadow extends beyond the element's dimensions
  - Color: the color of the shadow
  - 'inset': allows for the shadow inside the element instead of behind it
  
  - setting the X & Y offsets to zero will have the shadow appear all the way around 
    the element
  - an element can have both an outer and inner shadow separated with a comma and
    one have the 'inset' added
  
  .my-shadow {
   box-shadow: 0 0 10px 0 black, 0 0 25px red inset;
   background: #CCCCCC;
   width: 10rem;
   height: 5rem;
  }
----

----
Backgrounds
 - backgrounds cover the area of the content, padding and border
 - margins are not included in the background
 
 - background-color: [any CSS color, e.g. hex, named, rgb() function, etc.) 
 - background-image: [url() function, radial-gradient() function, linear-gradient() function]
  - this property can take more than one value and will combine them for graphic effect
 - background-repeat: [ 'no-repeat' | 'repeat-x' | 'repeat-y'] 
  - default is to just tile the image to cover the area 
 - background-position: ['top' | 'bottom' | 'left' | 'right' | 'center']
  - can also specify a x,y coord as a unit (e.g. 50px)
 - background-size: cover (will stretch the image to fit the area)
 - background-clip: ['border-box' | 'padding-box' | 'content-box' ]
  - border-box: will extend the image to the border (i.e. default behavior)
  - padding-box: will extend the image to the padding but not the border
  - content-box: will extend the image to just the content box
 - background: is the shorthand property
  - few rules background-size's value must come directly after background-position's 
    value and the two are separated by a slash
  - background-color must always come last  
----

----
Gradients
 - are now builtin features of CSS
 - are CSS functions linear-gradient() and radial-gradient()
  - linear, gradient goes top to bottom, left to right, or some angle)
  - radial, starts at a center point and radiates outward
 - gradient functions are assigned as the value of the background-image's property
 - each function is overloaded to control all the varieties available
 - the background-image's value can be given multiple value separated by a comma
  background-image: radial-gradient(
                     ellipse at top left,
                     white 25%,
                     transparent),
                    url('my-image.jpg);
----
 
----
Linear Gradient
 - basic example
  background-image: linear-gradient(red, blue);
  
 - three color gradient
  background-image: linear-gradient(red, blue, green);
  
 - using transparent in place of a color
  background-image: linear-gradient(transparent, blue);
 
 - having gradient move right to left
  background-image: linear-gradient(to right, red, blue);
 
 - have gradient at an angle
  background-image: linear-gradient(45deg, red, blue);
  
 - control over gradient's rate-of-change
  - the percent unit following the color is where the color is supposed to 'begin'
  - in this case, like a progress bar, red starts at 0 and blue starts at 25 moving
    left to right
  background-image: linear-gradient(to right, red 0%, blue 25%)
----

----
Radial Gradient
 - basic example
  background-image: radial-gradient(red, blue); 
  
 - have the gradient radiate in a circle instead of default ellipse
  background-image: radial-gradient(circle, red, blue);
  
 - to move the center of the radiance 
  - the center of the radiance would begin 25% from the left (think, like a progress-bar)
  background-image: radial-gradient(circle at 25%, red, blue);

 - to move the center of radiance up, down, left, right
  - the gradient would radiate from the top left corner
  background-image: radial-gradient(circle at top left, red, blue);
----

----
Padding
 - will expand background color
  p {padding: 10px;}
 - paddings do not collapse (unlike margins)
 - calculate on width only (like margins)
 - may be set on a per-side basis
 - inline padding may extend over adjacent lines
----

----
Layout management
 - floating places element in content forcing content to flow around it
  p img{float: left;}
 - floating element's margins do not collapse
 - a floated element is contained w/i its parent's content block
 - position places element in content with respect to its parent content block
 p img{position:relative; top: 50%; bottom: 0; left: 50%; right: 0;}
 - offset is position with respect to left side / top side
----

----
Position Types
 - static: default, same as none at all
 - relative: content acts like default except an off-set is now set 
 - absolute: content is specific in its size 
  - box is not sized in relation to its parent content area
  - box is positioned in relation to its parent content area
  - box is positioned in relation to the containing block (probably window)
  - is removed from the document flow
 - fixed: content is viewport
 - elements may be positioned outside thier content area
 - limit with min-width; min-height; max-width; max-height
----

----
Overflow
 - for the condition of an explicit height in which the content does not fit
 - when content does not fit it will wrap to a new line
 p {overflow: visible;} /*will let the content just 'go out' of the box */
 p {overflow: scroll;} /*to set content into a scrollpane */
 p {overflow: hidden;} /*exceeding content is simple truncated */
----

----
Clip Area
 clip: rect(10px, 10px, 0, 0);
 - for setting the area of rendering w/o changing the content block size
 - only excepts absolute values or the keyword 'auto'
----

----
Visibility
 - for setting a block to invisible 
 - while not begin seen, the content block and padding still affect the layout
 p.myClass {visibility: hidden;}
 /*will remove content text, borders, colors, etc */
----
 
----
CSS Practice
 - have html element's id's named un-presentational
 - use the <div> tag in the html to make divisions/sub-division of content
 - use <div id="myBanner"> to assert a format for a section
  - id is used for singular portions of page
  - use class for repeating styles
 - use pretty-printing of the CSS syntax as such
 
 #myID {
    margin-bottom: 0px;
	  position: absolute;
	  top: 75px;
	  left: 5px;
 }
 
 - organize CSS-sheet typical
  /**************
  HTML TAGS  
  **************/
  body {
    font-size: 8px
    /* - would specify other 'overall' styles*/
  }
  #main-content p {
    /* - relative basic html tags contained w/i a div also here*/
  }
  
  /******************
  LAYOUT DIVS
  ******************/
  #top-horizontal{
    /* - height, width, margins/padding, borders, background, float
       - these are specific to just layout 
       - style of elements contained within defined elsewhere
       - these are almost always applied to div tags
    */
  }
  #side-vertical{
  }
  #main-content{
  }
  #footer{
  }
  /******************
  LINKS
  ******************/
  /* - links need to be style in this order top to bottom*/
  a:link{
    /* - color, text decoration(think underline)*/
  }
  a:visited{
  }
  a:hover{
  }
  a:active{
  }
  #main-content a:link{
    /* - would also use this area to style links within div contents*/
  }
  /******************
  HEADINGS
  ******************/
  h1{
    /* - font-size and margins, that about it...*/
  }
  h2{
  }
  h3{
  }
  h4{
  }
  h5{
  }
  h6{
  }
  #main-content h3{
    /* - likewise, style div specific headers here too*/
  }
  /*************
   FORM STYLES  
  **************/
  #main-content form {
    /* - padding and margins at the top here 
       - typically these are always specific to a layout div tag
    */
  }
  #main-content fieldset{
    /* - margins, padding and also borders */
  }
  #main-content legend {
    /* padding/margins, font and color, perhaps other text attributes */ 
  }
  #main-content label{
    /* display type, padding/margins and text again */
  }
  /******************
  LISTS
  ******************/
  #side-vertical ul.myList {
    /*  - this defines a specific class used within this specific div */
  }
  #side-vertical ul.list li {
    /* - very specific to the style of this div's classes' list item */
  }
  
  #main-content ul {
    /* - style specific to a menu/list */
  }
  #main-content li {
    /* - list-style, margin/padding and background are typical */
  }
  /******************
  TABLE STYLES
  ******************/
  table {
    /* - width (not height, that is for the items), border and background */
  }
  thead th {
    /* - style the table's headers */
  }
  tfoot { 
  }
  .myTable-specific-style td {
    /* - use a direct class to take total control of line-items style */
  }
  /******************
  CLASSES 
  ******************/
  .none{
    /* - pretty standard utility class in the style sheet */
    display:none;
  }
  .clear{
    clear:both;
  }
  img.my-image-style{
    /* - float, border and margin/paddings
       - specific, one-time images are typically styled here
    */
  }
----

----
Basics
 - use id(s) names for persistent structural elements (eg navBar, contentArea) 
 - use id(s) for one-time elements as well
 - class(s) are used for types of content (eg date, formLabel)
 - both id and class names need to be as un-presentational as possiable
  - use 'error' instead of 'red'
  - use 'secondContent' instead of 'leftContent'
 - don't over-use class(s)
 <h3 class="h3-news">A Fancy Header</h3>
 <p class="p-news">A listing of news</p>
 <p class="p-news">More details</p>
 <!--INSTEAD USE THIS-->
 <div class="news">
 <h3>A Fancy Header</h3>
 <p>A listing of news</p>
 <p>More details</p>
 </div>
 /* having the CSS look as Such*/
 div.news {
  font-size:8px;
 }
 div.news h3{
  font-color:red;
 }
 div.news p{
  font-color:grey;
 }
 
 - don't overuse the <div> markup either 
  - use div when there is no other element that does the job
  - eg: don't wrap a list in a div if you can just give the list an Id
----

----
Positioning
 - blocks move naturally from top to bottom
  <div style="border-style:groove;
             border-width:thin;">
    <p>Here is box one
  </div>
  <div style="border-style:groove;
             border-width:thin;">
    <p>Here is box two - its just below box 1
  </div>
 
 -use the 'float' keyword to change the top-to-bottom flow
  <div style="border-style:groove;
             border-width:thin;
             float:right;">
    <p>Here is box one and its on the right now
  </div>
  <div style="border-style:groove;
              border-width:thin;">
    <p>Here is box two an it moved 'up' - taking box 1's old space
       Notice that Box one is actually w/i box two because assigning a float
       caused the box one to move 'outside' the normal top-to-bottom flow
  </div>

  <div style="border-style:groove;
             border-width:thin;
             float:left;">
    <p>Here is box one and its on top of box two!
  </div>
  <div style="border-style:groove;
             border-width:thin;">
    <p>---Notice that text 'butts' up against Box 1.  Even though Box 1 is atop
       Box 2 the text moves around the obstruction.
  </div>
 
  <div style="border-style:groove;
             border-width:thin;
             float:left;">
    <p>Here is box one.
  </div>
  <div style="border-style:groove;
             border-width:thin;
             float:left;">
    <p>Here is box 2. We now have a horizontal look.  This is the opposite of 
       what we get by specifying no float.
  </div>
 
  <div style="border-style:groove;
             border-width:thin;
             float:left;
             width:800px;">
    <p>Here is box one.
  </div>
  <div style="border-style:groove;
             border-width:thin;
             float:left;">
    <p>Box 2 has moved back below Box 1 because there isn't enough width 
       to have a horizontal appearance.
  </div>
  
  <div style="border-style:groove;
             border-width:thin;
             float:left;
             width:200px;
             height:200px">
    <p>Imagine this is an image.
  </div>
  <div style="border-style:groove;
             border-width:thin;">
    <p>Like expected the text appears butted up against the image.
  </div>
  <div style="border-style:groove;
              border-width:thin;
              clear:left;">
    <p>using the 'clear' attribute we force the text to appear down here
  </div>              
----
 
----
Force Float Elements Into a Div
 - start with the wrapper div
 - enclose the regular floated elements
 - add another invisible div with the clear attribute set to both
 - the invisible div needs to be enclosed in the wrapper div
 <div style="border-style:groove;
             border-width:thin;">
  <p style="border-style:groove;
            border-width:thin;
            float:left">This is floated to the left.</p>
  <p style="border-style:groove;
            border-width:thin;
            float:right;">This is floated to the right</p>
  <div style="clear:both;"></div>
 </div>
----

----
Add Image as Background
 - basic background
 <body style="background:url(myBackground.pdf);"></body>
 
 - use background image via a div hook
 <div style="background-image:url(myBackgroun.gif);
             background-repeat:no-repeat;
             height=200px;
             width=700px;">
 </div>
 
 - background images may be set as a bullet point as well
 - padding-left is what places space between image and text content
 - w/o position image would appear in center 
 - w/o repeat image would tile
 <h1 style="padding-left:30px;
            background-image:url(myBullet.gif);
            background-repeat:no-repeat;
            background-position:center left;">
   My Header One Here
 </h1>

 - create rounded corners 
 - have a box and place atop it a horizontal rectangle
  - rectangle atop has top-left corner rounded
  - rectangle atop also has top-right corner rounded 
 - have a box image and place it abottom the horizontal rectangle
  - rectangle abottom has bottom-left and corner 
  - same for the bottom-right corner
 <div style="width:418px;
             background-color:#effce7;
             background-image:url(bottom.gif);
             background-repeat:no-repeat;
             background-position:bottom left;
             ">
    <h2 style="background-image:url(top.gif);
               background-repeat:no-repeat;
               background-position:top left;
               padding: 10px 20px 0 20px;">
        So here is the H1 text and it has the div's background color.
    </h2>
    <p style="padding: 0 20px 10px 20px;"> 
    now a little more text here and it receives the div's bottom pattern</p>
 </div>
 
 - add further complexity by having rounded edges based on 4 images
 - have the main div with bottom left curve and main box itself
 - have the bottom right curve as a div wrapped in the main box
 - have the top left curve applied to another inner div
 - have the header with the top right curve
   <div style="width:20em;
               background-color:#effce7;
               background-image:url(bottom-left.gif);
               background-repeat:no-repeat;
               background-position: bottom left;">
    <div style="background-image:url(bottom-right.gif);
                background-repeat:no-repeat;
                background-position:right bottom;
                padding-bottom:5%;">
      <div style="background-image:url(top-left.gif);
                  background-repeat:no-repeat;
                  background-position: top left;">
        <h2 style="background-image:url(top-right.gif);
                   background-repeat:no-repeat;
                   background-position: top right;
                   padding-top:5%;
                   padding-left:5%;
                   padding-right5%;">
             Here is my header two. </h2>
          <p style="padding-left:5%;
                    padding-right:5%">
            Here is the contents of the p tag.
          </p>
      </div>
    </div>
   </div>
----

----
Add Shadow to Image
 - start with pre-existing shadow graphic
 - graphic acts as background for a <div>
 - the <div> will wrap around the image
 - the shadow graphic is reveled by having negative margins on the image
 - recipe will not function on IE 5.x or Mac
 - this is written for IE7
 <div style="background-image:url(shadow.gif);
             background-repeat:no-repeat;
             background-position: bottom right;
             clear:right;
             float:left;">
    <img style="margin: -5px 5px 5px -5px;
                border:1px solid #a9a9a9;
                padding:4px;
                background-color: #fff;
                display: block;
                position: relative;"
         src="Space Invader_SprayPaint.jpg"
         width="300"
         height="300"
         alt="Space Invader"/>
  </div>
----

----
Have Link Underline Upon Selection
 - the order these are listed is critical
 - if reversed then the functionality fails
<html>
  <head>
  <title></title>
  <style type="text/css">
    a:link, a:visited {text-decoration:none;}
    a:hover, a:active {text-decoration:underline;}
  </style>
  </head>
  <body>
  <p>This is just text </p>
  <a href="www.google.com">Click Me</a>
  </body>
</html>
<!--
  apply these links in the order of link, visited, hover, active
  remember with acronym of LoVe:HAte
 -->
 
Use a Border Instead of Underline
  <style type="text/css">
    a:link, a:visited {text-decoration:none;
                      border-bottom: 1px dotted #000;}
    a:hover, a:active {border-bottom-style: solid;}
  </style>
 
Use a Image Instead of Underline
  <style type="text/css">
    a:link, a:visited {color:#666;text-decoration:none;
                       background: url(underline1.gif) repeat-x left bottom;}
    a:hover,a:active {background:url(underline1-hover.gif);}
  </style>
----

----
Add Small Icon To Link
 - use a link icon for external links
 - use a different icon for email and im links
 - use yet another for downloadable documents
<html>
 <head>
  <style type="text/css">
    .external{background:url(externalLink.gif) no-repeat right top;
              padding-right:10px;}
  </style>
  <title>External Link Example</title>
 </head>
 <body>
  <a class-"external" href="www.google.com">External Link</a>
 </body>
</html> 
----

----
Have Link Appear As A Button
<html>
 <head>
  <style type="text/css">
    a {display:block; width:6em;padding:0.2em; line-height:1.4;
       background-color: #94B8E9; border: 1px solid black; color:#000;
       text-decoration:none; text-align:center;}
    /* - setting the display to 'block' is the real work here 
       - need to apply 'width' or the "button" will fill the width of the parent
       - using line-height is a trick to force the text to be centered
    */
    a:hover {background-color:#369; color:#fff;}
  </style>
  <title>Example of Button-Style Link</title>
 </head>
 <body>
  <a href="www.google.com">Click Me!</a>
 </body>
</html>

<style type="text/css">
  a {display:block;width:200px;height:40px;line-height:40px;color:#000;
     text-decoration:none;
     background: #94B8E9 url(button.gif) no-repeat left top;
     text-indent:50px;}
  a:hover{background:#396 url(button-over.gif) no-repeat left top;
          color:#fff;}
  /* - uses an image instead of a colored background
     - upon hover event server has to fetch other image
  */
</style>

<style type="text/css">
  a {display:block;width:200px;height:40px;line-height:40px;color:#000;
     text-decoration:none;
     background: #94B8E9 url(pixy-rollover.gif) no-repeat left top;
     text-indent:50px;}}
  a:hover{background-color:#369; background-position:right top;
          color:#fff;}
  /* - instead of using a separate image use single image
     - left of image is simple display
     - right of image is hover display 
     - no need for reload
     - for IE have the parent of anchor's background equal the rollover state
       - eg p{background: #94B8E9 url(pixy-rollover.gif) no-repeat right top;}
  */
</style>
----

----
Simple List With Custom Bullet
<html>
 <head>
  <style type="text/css">
  ul{margin:0; padding:0; list-style-type:none;}
  /* - list are indented by default
     - IE and Opera use the margin 
     - Firefox and Safari use the padding
     - need to reduce both to zero to have no indentation
  */
  li{background: url(bullet.gif) no-repeat 0 50%; 
     padding-left: 30px;
     padding-bottom:5px;}
  </style>
  <title>Simple List With Custom Bullet Image</title>
 </head>
 <body>
  <ul>
  <li>Choice 1</li>
  <li>Choice 2</li>
  <li>Choice 3</li>
  <li>Choice 4</li>
  </ul>
 </body>
</html>
----

----
Create Vertical Nav Bar
<html>
 <head>
  <style type="text/css">
  /* - remove the default bullets and indentation */
  ul{margin:0;padding:0;list-style-type:none;}
  /* - need to style the anchors(links) not the list items
     - each anchor needs block display to allow hover over entire block
     - use the Pixy image tech to style with background
     - each image has same border so stacking will have border x2 between each
      - trick: set the block 1px less than image
               set background as left bottom
  */
  ul a{display:block;width:200px;height:39px;line-height:39px
       color:#000;text-decoration:none;
       background:#94B8E9 url(pixy-rollover.gif) no-repeat left middle;
       text-indent:50px}
  /* - no top li needs to have its top black border back
      - trick: set the create li class for anchor and assign it to 1st li
  */
  li.first a {height:40px;line-height:40px;}
  /* - last is to add the hover effect to the li's*/
  a:hover {background-position:right bottom; color #fff;}
  /* - IE adds space above and below list items - fix with this!!*/
  li {display:inline;}
  </style>
  <title>Nav Bar!</title>
 </head>
 <body>
  <ul>
  <li class="first"><a href="www.google.com">Choice 1</a></li>
  <li><a href="www.google.com">Choice 2</a></li>
  <li><a href="www.google.com">Choice 3</a></li>
  <li><a href="www.google.com">Choice 4</a></li>
  </ul>
 </body>
</html>
----

----
Simple Horizontal Nav Bar
<html>
 <head>
  <style type="text/css">
     /* having li of ul as 'inline' means no LfCr after each items*/
    .simpleNav li {display:inline;}
  
  </style>
 </head>
 <body>
  <ul class="simpleNav">
    <li>Item 1</li>
    <li>Item 2</li>
    <li>Item 3</li>
  </ul>
 </body>
</html>
----

----
Horizontal Block Nav Bar
<html>
 <head>
  <style type="text/css">
  /* - remove the padding, margins and bullet points
     - specify the length in px 
     - float the parent element
      - recall that float means its out of the document's flow
      - you will need to add the <div style="clear:both;"></div> somewhere
  */
  ul {margin:0;padding:0;list-style:none;width:720px;
      background: #FAA819 url(mainNavBg.gif) repeat-x;
      float:left;text-transform:uppercase;}
  /* - get the list horizontal using 'float:left;'*/
  ul li {float:left;}
  /* - get the links to behave like buttons using 'block' 
     - remove the underlines using text-dec.. none
     - you can set relative width by adding padding
     - add a divider using the background attribute
  */
  ul a {display:block;padding:0 2em;line-height:2.1em;
        text-decoration:none;color:#fff;
        background:url(mainNavBorder.gif) repeat-y left top;}
  /* - the far left item will have the divider
     - again using a 'first' class, remove it
  */
  ul .first a{background:none;}
  /* - setup the hover property */
  ul a:hover{color:#333;}
  /* - set the font to fit into the new menu */
  body {font:76%/1.8 "Lucida Grande", Verdana, Arial, Helvetica, sans-serif;
        background-color: #fff;}
  </style>
  <title>Horizontal Nav Bar</title>
 </head>
 <body>
  <ul>
    <li class="first"><a href="#">Home</a></li>
    <li><a href="#">About</a></li>
    <li><a href="#">News</a></li>
    <li><a href="#">Products</a></li>
    <li><a href="#">Services</a></li>
    <li><a href="#">Clients</a></li>
    <li><a href="#">Case Study</a></li>
   </ul>
 </body>
</html>
----
         
----
IE to Firefox - unique rendering
 - IE 7 <ul><li>.. will have block size of ul auto-expand to fit all <li>
 - Firefox <ul><li>.. will just let <li> move outside of <ul> content box
 - Firefox will auto add about 20px margin-top
  - explicit set margin-top:0; to override
 - Firefox <ul> will auto-add left padding
----

----
Fixed Center Page Display
<html>
<head>
  <style type="text/css">
    body {
          width:760px;
          /*grey will be the color of the left and right margins*/
          background-color:grey;
          /*these are what make the main div always appear in the middle*/
          margin-right:auto;
          margin-left:auto;
         }
  </style>
</head>
<body>
  <p>My paragraph appears in the middle of the page</p>
</body>
</html>
----

----
Stretch Page Display
<html>
<head>
  <style type="text/css">
    body {
          /*
            - typically use a div wrapper instead of body
            - body may have a background and main div a width > 100%
          */
          width:100%;
          padding:10px;
          }
  </style>
</head>
<body>
  <p>This will stretch to the length of the page.</p>
</body>          
</html>
----

----
Have content in area with scroll bar
<html>
<head>
  <style type="text/css">
    div {
          height:50px;
          width:300px;
		  display:block;
		  overflow-y:auto;		  
	}
  </style>
</head>
<body>
<div>
<span> header div </div>
</div>
<div>
<table>
<tr><td><span>This is content must squeeze </span></td></tr>
<tr><td><span>into an area to small for it</span></td></tr>
<tr><td><span>The browser is adding a scroll bar</span></td></tr>
<tr><td><span>automatically</span></td></tr>
</table>
</div>
<div>
<span> footer div </span>
</div>
</body>
</html>
----