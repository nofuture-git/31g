----
Notes Git
Complete Git Guide: Understand and Master Git and GitHub
Bogdan Stashchuk
Released February 2020
21h21m
----

----
Basics
 - is a distributed source control system
 - control of changes is through hidden .git folder 
 - 'config' file in hidden .git folder is INI file
 - is its own file system
----

----
Git Object Types
 - allows for tracking all forms of change to 
   any file therein
 - all objects are defined as a SHA1 hash
 
 - Blob
  - actual files
  - text and binary files
  
 - Tree
  - the directories (aka folders)
  
 - Commit
  - tracking of changes 
  
 - Annotated Tag
  - persistent pointer to a specific commit
  - tag names must be unique across entire repo
  
   - lightweight tags
    - stored in .git/refs/tags
    - cannot determine who nor when lightweight tag was
      created
    - will not be pushed to remote repo
 
   - annotated tags
    - stored in both .git/refs/tags & .git/objects
    - allow for adding tag message, author & date
----

----
Git Object binary format
 - actual content is compressed and not readable in text editor
 - git will store the kind of object and the size 
   of the object at the front of the binary 
 - blob content of "Hello, Git" will be hashed
   as "blob 11`0Hello, Git"
 - tree headers are the same only named 'tree'
 - tree content, per line, is: 
   - the permissions, object-type, sha1 hash, folder\file name
 - blob file names are not in the blob itself, only in the tree 
 - commit objects are likewise prefixed (type, length, `0, content)
 - commit objects content is:
  - tree-pointer, author-name, author-email, description, parent-commit, 
  - parent is optional 
  - commit objects wraps a tree object 
  
----

----
Git Areas
 - git divides three distinct "areas"
 - Git Repo
  - this is where all the objects (e.g. blobs, trees, etc.)
    are stored as SHA1 hash
 - Staging Area 
  - also known as Index
 - Working Directory
----

----
Git File Status
 - each file will have one of four status
  - Untracked
  - Unmodified
  - Modified
  - Staged
  - Ignored
 - tracked files will be one of the latter three
 - Untracked & Modified files can only exist 
   in the Working Directory
 - Staged files will only exist in Staging Area
 - Git Repo objects (i.e. files) are always Unmodified
 - Ignored files are neither Tracked nor Untracked
----

----
Git Branches
 - root branch is called 'master'
 - branches are text reference to a specific Git Commit object
 - branch names cannot contain spaces 
  - replace with '-' (dashes)
 - the text reference link between a branch-name and
   a Git Commit object is within .git/refs/heads
  - the name of the branch is the file-name
  - the Git Commit it points to is the single line SHA1
    hash within the file
----

----
Git HEAD
 - can be only one locally
 - determines which branch is currently in context
   in the Working Directory
 - the link between HEAD and branch is the path
   present on the .git/HEAD file
 - the HEAD determines the perspective of time 
  - moving HEAD to a past commit will cause
    any subsequent commits (those coming after 
    the past commit HEAD is currently on) as 
    unseen
----

----
Git FETCH_HEAD
 - per line is the SHA1 hash of a commit, a 'branch' 
   or 'not-for-merge' label, branch name and remote 
   URL
 - is used in the 'git pull' command in the second step
 - local Working Directory will be updated with changes
   from the one-and-only line _NOT_ labeled 
   with 'not-for-merge'
----

----
Git Merge
 - Fast-forward Merge
  - simple linear 
  - changes on feature can simply be concat'ed to master 
    with nothing between 
  - git simply moves the 'master' pointer to the end of 
    the feature branch
  
 - 3-way Merge
  - git creates a new commit for this merge
   - therefore, a commit message is typically required
  - one, the common commit where the branches first split
   - this is the most-recent commit the two branches have in common
  - two, the most-recent commit of the first branch
   - this is one of the two parent's of the merge commit
  - three, the most-recent commit of the second branch
   - this is the other parent in the merge commit
----

----
Git Merge Conflicts
 - merge conflict only possible with 3-way Merge
 - git places 3 copies of the files in the Staging Area
  - one is the file from the common origin
  - one is from the receiving branch (i.e. your copy)
  - the last one is from the incoming branch
 - git will make a mess of the file(s) in the working directory
  - will mark conflicted lines in a similar manner as SVN
 - user must clean up the conflicted files themselves
 - upon resolution use 'git add' to mark as resolved in 
   Staging Area
 - git will create a new file at .git/MERGE_HEAD
  - this file points to the last commit of the incoming branch
  - is transient while conflict persist
----

----
Git Rebasing
 - the intent is to simplify the commit history into 
   a linear one
  - each commit will have only one parent commit
 - is a destructive process in that history is being 
   re-written with some commits being deleted
 - general process
  - checkout feature branch
  - rebase the master branch 
  - checkout the master branch
  - merge feature branch into master 
   - will result in a fast-forward merge instead of
     3-way
----

----
Git Remote Repo
 - Push
  - to move changes from local Git Repo to remote Git Repo
  - creds will be saved and only first Push will require entry
 - Fetch
  - to move changes from remote Git Repo to local Git Repo
  - this command does not update local Working Directory
  - nor does it update the Staging Area (index)
  - this is also used to get new branches on the remote Git
    Repo and copy them to the local Git Repo
 - Pull
  - updates all areas: local Git Repo, 
    Staging Area and Working Directory
  - two step, first is Fetch, second is Merge
   - actual commands are 'git fetch' & 'git merge FETCH_HEAD'
  - the second step, Merge, is only performed on current
    checked-out tracking branch
----

----
Git Tracking Branch
 - the local branch that is connected to a remote branch
 - upon git clone remote repo, Git creates only one local
   branch with the same name as the default branch of the 
   remote repo
 - connection can be viewed with either 'git branch -vv' 
   or 'git remote show origin'
 - a branch created locally that does not have a tracking 
   branch on remote repo requires special git push command
 git push --set-upstream origin MY_BRANCH_NAME
 
 - when a remote branch is deleted but is still tracking
   as a local branch
  - this command will only stop tracking, the branch remains
    present in the Working Directory
  - to remove, likewise, in Working Dir, use the remove command
 git remote update origin --prune
 
 - to quickly test if a local branch is different from its remote
   tracking branch
 git show-ref NAME_OF_BRANCH
----

----
Git Pull Request
 - this is a feature of the git hosting service, not Git itself
 - Pull Request is a proposal of the potential changes
 - actual mechanics is request code-review + merge-into-master
 - GitLabs more appropriately calls this a Merge Request
 - "Pull Request" is more appropriate for pulling in a whole 
   forked repo
----

----
Git Forked Repo
 - is a feature of the git hosting service
 - exist as a copy of a public repo to your GitHub user account
  - 'microsoft/dotnet' -> forked to -> 'my_gitHub_username/dotnet'
  - in such case, 'microsoft/dotnet' is named "upstream" repo
 
 - to associate another remote repo of a Local Git Repo  
 git remote add upstream https://github.com/microsoft/dotnet.git
  
 - to then fetch in changes of upstream remote repo
 git fetch upstream -v
  - the '-v' is for verbose output
  - this would fetch the changes into Local Git Repo
   - no changes to are made to Staging Area nor Working Directory
 
 - to move changes from upstream remote repo
 git pull upstream master
  - this would pull the changes from 
    the upstream's remote repo's master branch
---- 

----
Git Ignore
 - are within specially named ".gitignore" file at the root 
   of the repo
 - common templates are available at gitignore.io
 
 - to ignore files of a particular extension use classic
 *.dll

 - ignore all files in some folder
  - folder name followed by forward-slash
 bin/
 
 - line-comments are allowed with '#' 
 # python ignores 
 
 - more complex regex patterns are possible 
 report.[0-9]*.json
----

----
Git Reset
 - to hard-set the state of just some or all of the 
   Git Areas (Working Dir, Staging, Git Repo)
 - is destructive in removing history
 
 - Mixed Reset
 git reset --mixed 276c0829c
  - discards commits in Git Repo
  - discard changes in Staging Area
  - keep changes in Working Directory
  - is the default reset
  
 - Soft Reset
 git reset --soft 276c0829c
  - discards commits in Git Repo
  - keeps changes in Staging Area
  - keeps changes in Working Directory
  
 - Hard Reset
 git reset --hard 276c0829c
  - discards commits in Git Repo
  - discards changes in Staging Area
  - discards changes in Working Directory
----  

----
Git Revert
 - to rollback a particular commit
 - is addition of commit as a negation of the 
   previous commit
 - no entries are removed from history
  - is idempotent 
 git revert 276c0829c
----

----
Git Commands
 - init a new repo
 git init
  
 - clone an existing repo
  - .git\objects folder will contain a compressed .pack file
 git clone https://github.com/leachim6/hello-world.git
 
 - state of Git Repo
 git status
 
 - history of commits
 git log
 
 - advanced git log search and print
 git log --grep="3.12.1" --pretty="format:%cn %h %cd"
  - full list of variables for 'format' at 
    https://devhints.io/git-log-format
 
 - is used for both adding Unmodified and Modified 
    files to Staging Area
  - this is also used to mark a merge-conflict file
    as resolved
 git add myNewFile.txt
 
 - move all changes into the Staging Area
  - when a file is deleted from Working Directory 
    and the 'deleted' status is to be moved
    to the Staging Area
 git add .
 
 - merge MY_BRANCH into current local branch
  - git will decide on which merge method 
    (viz. Fast-Foward, 3-way)
 git merge MY_BRANCH
 
 - change a file in Staging Area back to Untracked
 git rm --cached myNewFile.txt 
 
 - writes changes from Staging Area to Git Repo
  - the '-a' performs all 'git add' 
  - the '-m' if for the commit message 
 git commit -a -m "Here is my commit description"
 
 - copies from Git Repo to Working Directory
  - 'master' would be replaced by branch name
 git checkout master
 
 - create a branch and switch to it
  - if MY_BRANCH is remote, Git will pull it down from 
    remote repo
 git branch My_New_Branch
 git checkout My_New_Branch
 
 - to move to a previous commit of a branch
  - 'detached HEAD' state will result
  - the branch in .git/refs/heads will remain unchanged
  - .git/HEAD file will now point to this '0d592...' commit
 git checkout 0d592
 
 - calc a git file hash
 git hash-object .\my-file.txt
 
 - reflect on kind of object
  - '-t' for the type of object
  - '-p' for content of object
  - '-s' for size of object
  - only first four characters of SHA1 hash are required
 git cat-file -t 6fe402b35d6e80a187adc393f36ce10e4fdd259f

 - list all the files in the Staging Area (aka Index)
  - the '-s' parameter prints tree 
    content (i.e. perms, type, hash, etc.)
 git ls-files -s
  
 - move objects (e.g. files, folders) from Git 
   Repo to Staging Area
 git read-tree 045e
 
 - move objects from Staging Area to Working Directory
  - the '-a' parameter is for "all files"
 git checkout-index -a
 
 - set the git project's user-name and email
 git config user.name MY_NAME_HERE
 git config user.email MY_EMAIL_HERE
 
 - list branches
 git branch
 
 - list branches both remote and local
  - use '-r' for 'just-remote branches' 
 git branch -a
 
 - create branch
 git branch MY_BRANCH_NAME_HERE
 
 - rename a branch
 git branch -m OLD_NAME NEW_NAME
 
 - both create new branch and switch over to it
 git checkout -b NEW_BRANCH_NAME
 
 - remove a local branch
  - use '-D' to force remove
 git branch -d NAME_OF_BRANCH
 
 - remove a remote branch
 git push origin -d NAME_OF_BRANCH
 
 - see tracking branch (local to remote)
 git branch -vv
 
 - view remote source of Git Repo
 git remote -v
 
 - view details between local and remote branches
 git remote show origin
 
 - list tags of a repo
 git tag
 
 - create a lightweight tag
 git tag v1.0.0

 - create an annotated tag
 git tag -a v1.0.0 -m "my message"  
 
 - get details of an annotated tag
 git tag -v v1.0.0
 
 - to force garbage collection
  - will move many files into the .git/objects/pack 
    pack files
 git gc
 
 - to force a local repo to match a remote one
 git fetch origin
 git reset --hard origin/main
----

----
Break Repo Up
 - from working directory of what is being split off
 - following command will copy all the history of this 
   directory and make it as-if its the root of the repo
 git filter-branch --prune-empty --subdirectory-filter my_new_repo_dir/ -- master
----
