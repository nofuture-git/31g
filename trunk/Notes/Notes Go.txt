----
Notes Go
Learning Go
First Edition And Idiomatic Approach to Real-World Go Programming
by Jon Bodner
O'Reilly Media 
978-1-492-07721-3
----

----
Overview
 Go does not have:
  - inheritance
  - generics
  - function overloading
  - operator overloading
  - pattern matching
  - named parameters
  - exceptions

 Go does have Pointers
----

----
Basics
 - download the installer from 
  https://go.dev/dl/
  
 - the installer adds the necessary environment variables
  
 - to explicitly set the GOPATH environment variable
 [System.Environment]::SetEnvironmentVariable("GOPATH",(Join-Path $env:USERPROFILE "go") ,"Machine")

 - get installed version
 go version

 - get go environment settings
 go env
 
 - to run a go file like a script
 go run myGoFile.go
 
 - to build a go .exe
 go build myGoFile.go

 - get third party components
  - this will install a .exe in \bin folder of you GOPATH
  - Go seems to have no problems with corporate firewalls (?)
 go install github.com/rakyll/hey@latest
 
 - in Go the formatting is explicit 
  - best-practices at https://go.dev/doc/effective_go
 - the Go compiler will add semi-colons to all statements
 - the dev has to explicitly call a formatting command prior to compiling
 go fmt
 
 - another code scanning command used to find things like
  - wrong number of parameters
  - unused variables with assignment
  - run the vetting tool across your entire project 
 go vet ./...
 
 - third party linting tool 
  - one-time install command
 go install golang.org/x/lint/golint@latest
 
  - run the linter across your entire project
 golint ./...
----

----
Go Module Basics
 - modules are the main domain container 
 - a module is defined by a top-level file named go.mod
  - this file will name the module along with dependencies and such
  - the first line will define the modules path
module github.com/nofuture/somejunk

 - installed modules will be at the $env:GOPATH\pkg\mod
  - within this folder the folder structure will match
    the modules definitional structure (like Java packages)
    
 - to create a module the go command line is used
 
 go mod init github.com/nofuture/somejunk 
----

----
Go Primitives
 - integer
  - has the common 8 types (4 signed, 4 unsigned)
  - can be written in decimal, binary, octal or hex
  - binary is prefixed with 0b
  - octal is prefixed with 0o
  - hex is prefixed with 0x
  - go allows for underscore to be present 
    in integer literal for readability
   - for example, speed of light m/s
  299_792_458

 - floats
  - can be written in decimal or hex
  - scientific notation is allowed
   - for example Avogadoros Number
  6.022e23
  
 - chars
  - these are called 'runes' in Go
  - uses single quotes like C#
  - are Unicode 
   - literals can be 8, 16 or 32 bit
  '\x61' '\u0061' '\U00000061'
  
 - strings
  - literals are enclosed in double quotes
  - verbatim strings are enclosed in back-tick (0x61)
  `here is my 
  Here-String in go`
  
 - booleans
  - same as elsewhere
  - literal values are keywords 'true' and 'false'
  - default value is false
----

----
Go Operators
  
 
 

 
 