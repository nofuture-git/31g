----
Notes dotnet core
----

----
https://docs.microsoft.com/en-us/dotnet/core/
----

----
.NET Core in Action
By: Dustin Metzgar
Publisher: Manning Publications
Pub. Date: July 20, 2018
Print ISBN-10: 1-61729-427-6
Print ISBN-13: 978-1-61729-427-3
Pages in Print Edition: 288
----

----
Overview
 - .NET Framework is the original, Windows-only framework
 - dotnet core is the rewrite machine-independent 
  - many dotnet SDK's may be installed on a single machine
PS C:\> dotnet --info

  - Windows-only stuff is not supported
   - registry
   - WIN32/COM interop
   - GAC
   - Special folders
  - AppDomain is out 
   - there is stuff in System.Runtime.Loader and
     Microsoft.Extensions.DependencyModel packages
  - WPF/XAML is out
  - distributed transactions are out
  - Remoting is out 
  - .asmx are not supported
  - LINQ to SQL is replaced with Entity Framework
  - WCF Services (as a host) are out 
   - there is some stuff for client's
  - Workflow Foundation, this depends on the other 
    stuff already rem'ed (WCF, XAML, etc.)
  - type reflection has changed
   - uses new class named TypeInfo 
 - ver. 1.0 used 'project.json', ver. 2.0 switched
   back to MSBuild .(vb|cs|fs)proj XML
 - idea of web.config\app.config is out 
  - many "forms" of configuration where those
    based on a file is but one of many
   - for file-based, use of file named "appsettings.json" 
     and "appsettings.{Environment}.json" 
   - use of containers means each is an autonomous 
     environment so the machine's environment var's
     are used for what was, prev., defined in web.config
 - idea of build's targeting an environment is out
  - instead the same build is used for all
  - the host defines its environment using environment varibles
   - for ASP.NET Core the variable is "ASPNETCORE_ENVIRONMENT"
----

----
Terminalogy (mostly NuGet in origin)
 - Moniker: the keyword name used to specify 
    a framework, runtime or platform (e.g. net471)
 - Target Framework: flavor of .NET 
  - e.g. net471, netcoreapp1.0
 - .NET Standard: another kind of target framework
    which works for all
  - a kind of, "I don't need to specify the 
    target framework because it works on all of them..."
 - Runtime: a couple, operating system and CPU arch
  - e.g osx.10.11-x64, linuxmint.17.1.x86
 - Platform: used without any sense to 
    mean runtime, framework, both or all
----

----
.(cs|vb|fs)proj Files Differences
 - there is no XML namespace 
 - expected that dev's will directly modify the (cs|vb|fs)proj file 
  - adding EmbeddedResource would need the dev to open it and add
    the node 
  - dev can use the MSBuild Conditional's 

 <PropertyGroup Condition="'$(MyParam)' == 'true'" />
 <PropertyGroup Condition="'$(OtherParam)' == 'false'" />
  - involves variable nesting (e.g. single quotes inside double-quotes)
  - can then be assigned another value at the dotnet CLI
PS C:\> dotnet build -p:MyParam=false,OtherParam=true
  
 - build output paths are not defined within proj file
  - instead are specified in the invocation of "dotnet build"
 - each src-code file does not get added as a "Compile" node
  - the src-code files to include in compilation is assumed 
    from current working dir.
 - references are of the two typical forms, binary or source-code
  - appears only binary form is as NuGet packages 
 - projects do not include an independent "packages.config" 
   since those are specified in the .(cs|vb|fs)proj file itself
 
PS C:\> dotnet add package Newtonsoft.Json
 - add a nuget (binary) package reference
 
PS C:\> dotnet add reference "C:\Projects\MyOtherProj\MyOtherProj.csproj"
 - add a source-code (project) reference
 
 - the new "PackageReference" node is a NuGet binary reference
  - the "Include" attribute is the NuGet package id
  - the "Version" attribute is the NuGet package version
 
 - the old "Reference" was a ref to a .dll 
  - the "Include" attribute was the assembly name 
   - for NuGet packages it was the full-qual. assembly name
   - for GAC references it was simple assembly name 
  - the "HintPath" child-node was only present on NuGet package ref's
 
 - new "ProjectReference" is mostly the same
  - the "Project" child-node is not added from dotnet CLI
   - probably still present when added from Visual Studio (.sln files)
  - the "Name" child-node is not added from dotnet CLI
----