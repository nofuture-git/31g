Notes JavaScript

"Learning JavaScript" 
by Shelley Powers 
Publisher: O'Reilly 
Pub Date: October 01, 2006 
Print ISBN-10: 0-596-52746-2 
Print ISBN-13: 978-0-59-652746-4 
Pages: 351 

----
A function is a object, an object is a function
----

----
Tools
 - Internet Explorer Developer Toolbar
 - Firefox Web Developer's toolbar extension
 - JsUnit (JavaScript unit testing framework)
 - Alban's Script Editor (text editor)
 - Strong JS (compress JS and replace variable names to gain more space)
----

----
Basic Script
 - JavaScript works throught the browser
 - Current standard is ECMA-262
 - is loosely typed (no variable type declaration required)
 - written with HTML syntax - interpreted by browser
 - write in-line type w/i html body tag
 
 <script type="text/javascript">
 //<![CDATA[
 
 //]]>   
 </script>
----

----
Script Tag
<script type="text/javascript" src="myJavaScript.js" defer="defer">

</script>

<!--
self-enclosed javascript nodes will not load
<script type="text/javascript" src="noGonnaLoad.js" />
-->
 - src is the relative path of the source file
 - defer script not involved in page gen' - browser return when done gen'

<!-- to import a source file from a source file -->
<script type="text/javascript">
	//start with a function which will run on load implicitly
	(function (){ 
		//create a script element 
		var importScript = document.createElement('script');
		importScript.async = true; //exec async, as soon as available	
		
		//set the type 
		importScript.type = 'text/javascript';
		
		//set the src (may be across domains as well as local)
		importScript.src = './script/importedScript.js'; //.async only has sense when this is assigned
		
		//'importedScript.js' itself having a (function(){ /*load more stuff*/ })();
		
		//get some context element from which to attach the script to
		var contextElement = document.getElementsByTagName('script')[0];
		contextElement.parentNode.insertBefore(importScript, contextElement);
		
	})();
</script> 
----

----
Page Lifecycle and Events
 - all browsers promise to load javascript in the order it appears in the
   html (from top-down).
 - older browsers will pause loading html when a <script> tag is encountered 
    - these older browsers would execute the script entirely and then return
	  to the html
	- with FireFox 3.5+ javascript is loaded/executed in the background 
	  while the html continues to load.  A 'redraw' is performed whenever
	  document.write is encountered
	- IE allows for a script tag to have an additional 'defer' attr. for 
	  similar reasons
 - DOMContentLoaded is the event fired when the browser has loaded all HTML
   and created the tree in memory.
 - in the above example is a self-executing anonymous function and is particular
   for concern with scope of variable names.
----

----
Use and Control
 - Validate Form fields
 - Set and Retrieve Web Cookies
 - Dynamically alter the appearance of a page element
 - Hide and show elements
 - Move elements about the page
 - Capture user events and adjust the page thereby
 - scroll content
 - interface with the server-side w/o leaving the page
----

----
Identifiers 
 - begin w/ dollar-sign, underscore or character
 - is a case-sensitive language
 - best-practice, use an underscore to mark variable private (eg _myVariable)
 - other best-practice naming http://dojotoolkit.org/developer/StyleGuide
 - declaration/instantiation looks the same as assignment
  myVariable = 4;
 - recommended that declaration begin with 'var' keyword
  var myVariable = 4;
 - declaration w/o 'var' keyword forces variable to Global scope
 - the same rules apply to function parameters
----
  
----
Primitives
 - String 
  - enclosed in single or double quotes
  - Backslash is used to escape characters in a string
  - use escape("any string literal here is ok") to avoid use of backslash
  - use unescape("") to set string value back to the original 
 
    var myStr = escape("http://www.thesiteofitall.org");
    //comes out at http%3A//www.thesiteofitall.org
 
  - method calls perform implicit conversions
 
 - Boolean
  //- literals false true
  var myBool; 
  myBool = Boolean(false); //false
  myBool = Boolean(true); //true
  myBool = false; //false
  myBool = true; //true
  
  //- cast as string is true unless string is empty-string
  myBool = Boolean(""); //false
  myBool = Boolean("false"); //true
  
  //- cast as number is true unless number is zero
  myBool = Boolean(99); //true
  myBool = Boolean(-99); //true
  myBool = Boolean(0); //false
  
  //- cast as object is true 
  var myObj = document.getElementById("frmLogin");
  myBool = Boolean(myObj); //true
  
  //- keyword Null is cast as false
  myBool = Boolean(null); //false
 
 - Number
  //- literals may be integer or decimal
  //- value typical limit is 32-bit signed 
  var myNum;
  myNum = Number(1);
  myNum = 1.1; 
  typeof(myNum); //"number"
  
  //- literals as 0x for hex, 0 (just zero) for oct and normal dec
  myNum = 0xA; //10
  
  //- boolean true is 1, otherwise 0
  myNum = Number(true); //1
  myNum = Number(false); //0
  
 - Null and Undefined
  //- is Null upon no declaration (eg myVariable; -vs- var myVariable;)
  //myUndeclared; //errors!
  myUndeclared = null; //OK
  typeof(myUndeclared); //"object" 
  
  //- is Undefined upon declaration w/o assignment
  var myUndefined;
  myUndefined; //nothing
  typeof(myUndefined); //"undefined"
  
  //- Undefined and Null may be passed as parameter
  function MyFunc(myArg){console.log(typeof(myArg));}
  MyFunc(myUndeclared); //object
  MyFunc(myUndefined); //undefined
  MyFunc(null); //object
  
 - NaN (Not a Number)
  //- result of failed cast of string or Boolean to a number
  var myObj = document.getElementById("frmLogin");
  Number(myObj); //NaN
  
  //- test with static function isNaN(myVariable)
  var myNan = Number(myObj);
  typeof(myNan); //"number"
  isNaN(myNan); //true
  
 - Constants
  //- declared with 'const' syntax
  const myConst = 7; //syntax error in IE, doesn't work in most the rest
----

----
Statement & Assignment declartion 
 - statements end in a semicolon
 - semicolon may be ommitted upon a whole, complete statement
 - whitespace has no effect on syntax
 - assignment operator is a single equal sign
----

----
Unary Operators
 ++ increment numeric value
 -- decrement numeric value
 - change the sign of numeric
 ! for NOT
----

----
Ternary Operators
<boolean expression> ? <upon True>: <upon False>
----

----
Arithmetic Operators
 + for additon
 - for subtraction
 * for multiplication
 / for division - always a float result
 % for Modulus 
----

----
Concatination
 - uses the '+' operator
 - is overloaded, as summing with math, concat with string
 - string and numeric operands on a '+' results in a string
----

----
Logical Operators
 && for AND, is a short-circuit operator
 || for OR, also short-circuit
 ^ for XOR
 == value equality
 === value and type equality (JS 1.3)
 != not value equals
 !== not value and type equals
 < less than
 > greater than
 <= less than, equal to
 >= greater than, equal to
----

----
Order of Operation
 - division 
 - multiplication
 - subtraction
 - addition 
 - assignment
----

----
Compound Assignment Operators
 += plus, equals
 -= minus, equals
 *= product, equals
 /= ratio, equals
 %= mod, equals
----

----
Bitwise Operators
 &   bitwise AND
 |   bitwise OR
 ^   bitwise Exclusive OR
 ~   bitwise NOT
 <<  left shift
 >>  right shift
 >>> zero fill right shift
 
 - bitwise operations are used more in JS since the conserve space
----
 
----
Branching Statements
 var myBool = Boolean(true);
 var myOtherBool = Boolean(false);
 if (myBool ^ myOtherBool) 
 {
    //XOR works as intended you arrive here
 } 
 else if (isNaN(myUndeclared)) 
 {
    //further branching
 } 
 else 
 {
    //final branch
 }
 
 if (myBool) console.log("myBool was true"); //single line conditional
 if(myBool) {console.log("myBool was true");} //ok
----

----
Switch Case Statement
 - JS has 'Fall-through' case statements just like java
 - break is optional if fall-through is desired
 - notice colon following a case
var myString = "myStringVal";
switch (myString)
{
   case "myStringVal":
	console.log("works on strings");
	break;
   default:
	console.log("no match");
}

----

----
Iterations

Do While: execute upon single condition
 do while (i < 10){
  i++;
  //loop body
 }
 
 do {
  i++;
  //loop body will execute at least once
  } while (i < 10)

For: specific to known count of iterations
 for(var i = 0; i < 10; i++){
  //loop body - will go for number of iterations allowed
  }
  
For In: for array of values
 for (<variable> in <object>){
  //loop body using the <variable> reference
  }
----

----
Constructor
 - constuctor syntax:
  var myNumber = new Number("10");
----

----
Other Operators
 //-with statement function, no use of prefix dot operator
 var myString = "a string ";
 with(myString)
 {
	length
 }
----

----  
Number Object
 myNumber.toExponential(3) //1.000e+1
 myNumber.toPrecision(3) //10.0
 myNumber.toFixed(6) //10.000000
----

----  
String Object
 
 var myString = "This is a string that is really a full sentence.";
 myString.length; //48
 myString.charAt(8); //"a"
 //convert to byte array 
 var buffer = [];
 for(var i = 0; i< myString.length;i++) { buffer.push(myString.charCodeAt(i));}
 
 // \n and \r, both work
 "my \n newline";
 "my \n\r newline";
 /*
 "my 
 newline" 
 */
 
 //use concat like a stringbuilder
 myString.concat(" Now, ", "having this we have ","created a paragraph.");
 /*"This is a string that is really a full sentence. Now, having this we have created a paragraph."*/
 
 //regular concat operator works too
 myString + "  Here is my second sentence."
 /*"This is a string that is really a full sentence.  Here is my second sentence."*/
 
 //original value preserved without assignment, same as Java/.NET
 myString; //"This is a string that is really a full sentence." 
 
 //full regex support built in to string
 var myrgx = myString.match(/is/);
 for(member in myrgx){console.log(myrgx[member]);}
 /*
 	0 : "is",
	input : "This is a string that is really a full sentence.",
	index : 2,
	lastIndex : 4
 */
 
 //replace first occurance
 myString.replace(/is/,"was");
 /*"Thwas is a string that is really a full sentence."*/ 
 
 //regex pattern is case sensitive
 myString.replace(/\sIS/," was ");//no change, regex is case-sensitive
 
 //include switch an end of regex literal to ignore case
 myString.replace(/\sIS\s/i," was ");
 /*"This was a string that is really a full sentence."*/
 
 //use a 'g' switch to have every occurance replaced
 myString.replace(/\sis\s/g," was "); 
 /*"This was a string that was really a full sentence."*/
 
 //may combine switches as needed
 myString.replace(/\sIS\s/gi," was "); 
 /*"This was a string that was really a full sentence."*/
 
 //substring(n,m) doesn't work the same as .NET, 
 //n is 'startAt' and m is 'endAt' in terms of index
 myString.substring(4,8); 
 /*" is "*/
 
 //is zero-index based
 myString.substring(1); 
 /*"his is a string that is really a full sentence."*/
 
 //Oddly, since n,m are indices, whichever is smaller is 
 //used as start, regardless of order
 myString.substring(4,1); //"his"
 
 //delimiter is not included in the results
 myString.split("is")
 /*
 	0 : "Th",
	1 : " ",
	2 : " a string that ",
	3 : " really a full sentence."
 */
 //may limit the number of splits with second arg
 myString.split("is",2);
 /*
 	0 : "Th",
	1 : " "
 */
 
 //all your favorites 
 myString.toLowerCase(); //"this is a string that is really a full sentence."
 myString.toUpperCase(); //"THIS IS A STRING THAT IS REALLY A FULL SENTENCE."
 var myOtherString = "           spaces       ";
 //IE 9 only
 myOtherString.trim();//"spaces"
----

----
RegExp Object
 - g is regex switch for match-all or 'global'
 - i is regex switch for ignore-case, default is case-sensitive
 var myString = "This is a string that is really a full sentence.";
 var myRegex = new RegExp(' is ',g);//no escape sequences
 var myOtherRegex = /\sis\s/; //regex literal with escape sequences
 //only returns first match in IE9 irrespective of global switch
 myRegex.exec(myString);
 /*
 	0 : " is ",
	input : "This is a string that is really a full sentence.",
	index : 4
 */
 myRegex.test(myString); //true
 //members are available on regex literals
 /\sis\s/.test(myString); //true
 
 //escape a string literal to all hex representation
 var stringWithRegexChars = "[0-9]";
 var listRegex = "";
 for (var k = 0; k < stringWithRegexChars.length; k++) {
    listRegex += '\\x' + stringWithRegexChars.charCodeAt(k).toString(16);
 }
 var myRegex = new RegExp(listRegex, "i");
 myRegex.exec("Enter all numeric values [0-9]")
----
 
----
Date Object 
 //no-arg constructor gets system-time
 new Date(); //Wed Aug 29 16:00:50 CDT 2012 
 //unix time
 var mydate1 = new Date(1346277265456); //Wed Aug 29 16:54:25 CDT 2012 
 //string literal
 var mydate2 = new Date("August 20, 2008 4:20:20");//date literal format
 
 //integer literals
 var mydate3 = new Date(2008, 8,20,4,20,20,1);//year,month,day,hour,minute,etc
 
 //parse features
 new Date("August 20, 2008 4:20:20").getFullYear(); //2008
 new Date(1346277265456).getMilliseconds(); //456
 new Date(1346277265456).getMonth(); //7
 new Date(1346277265456).getSecnods(); //25
 new Date(1346277265456).getMinutes(); //54
 myDate.getHours(); //16
 //gets day-of-week
 myDate.getDay(); //3
 //gets calander day
 myDate.getDate(); //29
 //get unix time
 new Date().getTime();//1346274540498
 //number of minutes sys-clock is off UTC
 new Date().getTimezoneOffset(); //300
 new Date().toString; //"Wed Aug 29 16:10:33 CDT 2012" 
----

----
Math Object (Static)
 Math.ceil(3.01);//return 4 (next whole number)
 Math.ceil(-3.99);//return -3 
 Math.floor(3.95);//return 4
 Math.floor(-3.05);//return -4
 Math.exp(4);//is e^4 
 Math.pow(3,2);//is 3^2
 Math.min(1,2,3);//returns 1
 Math.max(1,2,3);//returns 3
 Math.random(); //return a random between 0 and 1 as a double
----

----
Arrays: 
 - are flexable like collections in compile-type languages
 
 var myArray = new Array('one', 'two');
 var myArray1 = ['one', 'two']; //use literals for annomyous  
 var myArray2 = new Array(); //no length definition
 
 myArray2[0] = "a literal";
 myArray2[1] = "another";
 myArray2[2] = "more";  //array elements just being added in-time
 //arrays have no type-restrictions
 myArray2[3] = true;
 myArray2[4] = new Date();
 myArray2[5] = 1.1;
 ----
 
 ----
 Array Mutators
 //pop, push, reverse, splice, shift, 
 //unshift all change the array they are called on
 
 //push & pop ~ Vector
 var myPop = ["A", "B", "C", "D"];
 myPop.pop(); //returns "D"
 myPop
 /*{
	0 : "A",
	1 : "B",
	2 : "C"
}*/

 var myPush = ["A", "B", "C", "D"];
 //no-arg calls works, returns current length
 myPush.push(); //4
 //call with arg returns new length
 myPush.push("Z"); //5
 myPush
 /*{
	0 : "A",
	1 : "B",
	2 : "C",
	3 : "D",
	4 : "Z"
}*/
 //operates with var-args (paramarray)
 myPush.push("X","Y",true); 
 /*pushing an array causes the recipent to become jagged, but it works
   use .concat to make a linear addition*/
 var myAddition = ["T",new Date(),11]; 
 myPush.push(myAddition);
/*{
	0 : "A",
	1 : "B",
	2 : "C",
	3 : "D",
	4 : "Z",
	5 : "X",
	6 : "Y",
	7 : true,
	8 : T,Wed Aug 29 16:35:18 CDT 2012,11
}*/
 
 var myReverse = ["A", "B", "C", "D"];
 //calls to this affect the source but also return it as well
 myReverse.reverse();
 /*{
	0 : "D",
	1 : "C",
	2 : "B",
	3 : "A"
}*/
 
 var mySplice = ["A", "B", "C", "D"];
 mySplice.splice(2,0,"Z","y")
 /*{
	0 : "A",
	1 : "B",
	2 : "Z",
	3 : "y",
	4 : "C",
	5 : "D"
}*/
 
 var mySort = [1, "01", "A", 10];
 //called with no function then sort is by string values
 //which differs from numerical values
 mySort.sort();
/*{
	0 : "01",
	1 : 1,
	2 : 10,
	3 : "A"
}*/
/*may perform with comparefunction(a,b)
a is less than b by some ordering criterion == -1
a is greater than b by the ordering criterion == 1
equality == 0*/
mySort.sort(function(a,b){
	var P = typeof(a) == "string";
	var Q = typeof(b) == "string";
	if(!P && Q) return -1;
	if(P && !Q) return 1;
	return 0;
});
/*{
	0 : 1,
	1 : 10,
	2 : "01",
	3 : "A"
}*/

 //shift & unshift ~ Stack
 var myShift = ["A", "B", "C", "D"];
 //returns the item which was removed
 myShift.shift();//"A"
 myShift;
 /*{
	0 : "B",
	1 : "C",
	2 : "D"
}*/
 
 var myUnshift = ["A", "B", "C", "D"];
 //returns new length
 myUnshift.unshift("Z");//5
 myUnshift;
 /*{
	0 : "Z",
	1 : "A",
	2 : "B",
	3 : "C",
	4 : "D"
}*/
----

----
Function Declaration 
 function myfunction(param1, param2) {
    return "something";
    //body of function here
 }
 - parameters are pass-by-value semantics 
 - primitives are copied 
 - objects are by reference
 - return keyword is used to return a value
 
 var myVar = new Function("parameter","alert(parameter);");
 - functions may be declared anonymously
 - created at runtime upon each call 
 
 var func = ("myParameter"){
  //statements
 }
 - function may be declared anonymously 
 - 'func' int the example may be passed into a function as a parameter
 
 //functions and objects are the same in javascript
 function ClassicFunction(){
	console.log("a classic");
 }
 
 var refToClassic = new ClassicFunction();//this is valid, will run immediately
 
 ClassicFunction();//this operates the same as above, but no ref remains after exe
 
 //extension in almost any form
 (function($){
	$.addedMethod = function(){
		console.log("no longer a classic...")l
	};
 })(refToClassic);
 
 function MyDemoOfArguements(param1, param2, param3){
 
	//arguments is a sorta keyword that has each of the 
	//parameters passed into the the call to this f(x)
	console.log(arguments[0] == param1);
	console.log(arguments[1] == param2);
	console.log(arguments[2] == param3);
	
	//arguments is not an actual array but may be made into one 
	// by using a call to slice
	var args = Array.prototype.slice.call(arguments);
 }
 
----

----
Array Accessors Functions
 - do not modify the underlying array but return a new array 

var myAccessArray = [true,10,"01",new Date()];
myAccessArray.concat(false, new Date().getDate(),"here");
/*{
	0 : true,
	1 : 10,
	2 : "01",
	3 : Wed Aug 29 17:08:43 CDT 2012,
	4 : false,
	5 : 29,
	6 : "here"
}*/

//returns the contents a string
myAccessArray.join();//"true,10,01,Wed Aug 29 17:08:43 CDT 2012"
myAccessArray.join(", ");//"true, 10, 01, Wed Aug 29 17:08:43 CDT 2012" 
myAccessArray.join("|");//"true|10|01|Wed Aug 29 17:08:43 CDT 2012" 

//like the operation in string, both values are indices
myAccessArray.slice(1,3);
/*{
	0 : 10,
	1 : "01"
}*/

var myIndices = [true,10,"01",new Date(),"01"];
myIndices.indexOf("01");//2
myIndices.lastIndexOf("01"); //4
----

----
Array Iterations (callback) Functions
//anonymous function returns boolean
var myFilteredArray = ["01",0xA,new Date(),false];
myFilteredArray.filter(function(element, index, array){
	 return typeof(element) == "string";
});
/*{
	0 : "01"
}*/


var myForeach = [0xA,false,new Date().getMinutes(),"my string",new Date()];
//element assignment within anonymous function doesn't change the array
myForeach.forEach(function(element, index, array){
	var eType = typeof(element);
	console.log(eType);
	switch(eType)
	{
		case "string":
			element = element + " added foreach";
			break;
		case "number":
			element += 1;
			break;
	}
});
/*{
	0 : 10,
	1 : false,
	2 : 34,
	3 : "my string",
	4 : Wed Aug 29 17:34:19 CDT 2012
}*/
//change the array using the indices on the original array
// this is not recommended, use 'map' to get modified results
myForeach.forEach(function(element, index, array){
	var eType = typeof(element);
	console.log(eType);
	switch(eType)
	{
		case "string":
			myForeach[index] = element + " added foreach";
			break;
		case "number":
			myForeach[index] += 1;
			break;
	}
});
/*{
	0 : 11,
	1 : false,
	2 : 35,
	3 : "my string added foreach",
	4 : Wed Aug 29 17:34:19 CDT 2012
}*/

//every is used to confirm some truth-value concerning the whole array
var myEvery = [0xA,false,new Date().getMinutes(),"my string",new Date()];
myEvery.every(function(element, index, array){	return element == 0xB;});//true

//some is the opposite of every in logical form
var mySome = [0xA,false,new Date().getMinutes(),"my string",new Date()];
mySome.some(function(element, index, array){	return element == 0xB;}); //false

//generates a new array, original is unchanged
/*every iteration returns something, upon nothing being returned
  the result at 'index' in the new array is 'undefined'*/
var myMap = [0xA,false,new Date().getMinutes(),"my string",new Date()];
var myResult = myMap.map(function(element, index, array){
	if(typeof(element) == "number") return element += 10;
});
/*{
	0 : 20,
	1 : undefined,
	2 : 58,
	3 : undefined,
	4 : undefined
}*/

//reduce is used to distill an array into something else
// it operates affectively as a recursive function 
// without an intial value, on first call into 
// 'reduce' a is index 0 and b is index 1
 var flattened = [[0, 1], [2, 3], [4, 5]].reduce(function(a, b) {
     return a.concat(b);}); 
/*{
	0 : 0,
	1 : 1,
	2 : 2,
	3 : 3,
	4 : 4,
	5 : 5
}*/
//given an 'initial value' the first call into 'reduce' 'a' 
//  is that initial value and b is index 0 of array
var flattened = [[0, 1], [2, 3], [4, 5]].reduce(function(a, b) {    
    return a.concat(b);},["front"]); 
/*{
	0 : "front",
	1 : 0,
	2 : 1,
	3 : 2,
	4 : 3,
	5 : 4,
	6 : 5
}*/
----

----
Nested Function 
 - also known as 'Closure'
 - functions may be nested
 - inner function has access to outer functions variables
 - outer function doesn't have access to inner functions variables
 - calling application doesn't have access to inner function
 - outer function may return inner function itself as a literal
 - upon assignment inner function literal outer/inner function not gc'ed
 
 function myOuterFunction(param){
  var _str = ".";
  function myInnerFunction(innerParam){
    return param + innerParam + _str;
    }
    return myInner;
  } 
  
  //myOuterFunction is instantiated 
  //the literal is a ref to the instance of myInnerFunction w/i myOuter instance
  var functionLiteral = myOuterFunction("Begin");
  
  //since myOuter is still instantiated the "Begin" is still available
  //function literal has access to "Begin" via instance of myOuter
  var myReturnString = functionLiteral(" End");
  
  //return Begin End.
----

----
Error Handling
 - JavaScript 1.5 uses traditional try..catch..finally
 - try/catch statement appears w/i the funtion/object
 - use static instanceof to test exception's type
 
function myfunction {
  try{
    //risky code here
  } catch (e){
    if (e instanceof TypeError){}
    //other instanceof testing here
  } finally {
    //some always run code here
  }
}
----

----
Events
<img>
onabout 
onload
onerror 

<body>,<form>,<button>,<checkbox>
<fileupload>,<hidden>,<password>
<radio>,<reset>,<select>,<submit>
onblur 
onchange 
onfocus 
onkeydown
onkeypress
onkeyup
onload
onresize
onunload
onsubmit

ALL
onclick 
ondblclick
onmousedown
onmousemove
onmouseout
onmouseover
onmouseup
----

----
Event Handling
 - historic method embedded in html
 - syntax begin with 'on' then concat event name
 - syntax of 'onevent' is all lower case
 - only one handler per event
 <body onload= "var i = 138; i *= 9; alert(i);">
  - here the handler is implemented w/i the double-quotes
  
 myObject.onload = myFunction;
 - assign function to object's event handler property
 
 <body onload="weAre138( );">
  - here the handler is calling a function
----

----
Event Object 
 - IE event object is a property of the 'window' object 
 - Mozilla event object is passed as parameter into function
 
 document.onmousedown=myHandler;
 
 //IE
 function myHandler() {
    var x = window.event.screenX;
    }
 //Mozilla
 function myHandler(mozillaEvent) {
    var x = mozillaEvent.screenX;
    }
----

----
Event Object Properties
	//capture key event example
	var keyHandler = {
			CTRL_KEY_VALUE : 17,
			SHIFT_KEY_VALUE : 16,
			ENTER_KEY_VALUE : 13,
			ALT_KEY_VALUE : 18,
			TAB_KEY_VALUE : 9,
			BKSP_KEY_VALUE : 8,
			WINDOWS_KEY_VALUE : 92,
			CONTEXT_MENU_KEY_VALUE : 93,
			ESC_KEY_VALUE : 27,
			F1_KEY_VALUE : 112,
			F2_KEY_VALUE : 113,
			F3_KEY_VALUE : 114,
			F4_KEY_VALUE : 115,
			F5_KEY_VALUE : 116,
			F6_KEY_VALUE : 117,
			F7_KEY_VALUE : 118,
			F8_KEY_VALUE : 119,
			F9_KEY_VALUE : 120,
			F10_KEY_VALUE : 121,
			F11_KEY_VALUE : 122,
			ctrlKeyPressed : false,
			init : function() {
				document.onkeydown = keyHandler.captureKeyDown;
				document.onkeyup = keyHandler.captureKeyUp;
			},
			captureKeyDown : function(evt){
				var keyCodeVal = 0;
				if(window.event) {
					keyCodeVal = window.event.keyCode; //IE
				}
				else {
					keyCodeVal = evt.keyCode; //all else
				}
				
				console.log(keyCodeVal);
				
				if(keyCodeVal == keyHandler.CTRL_KEY_VALUE){
					keyHandler.ctrlKeyPressed = true;
				}
			},
			captureKeyUp : function(evt){
				var keyCodeVal = 0;
				if(window.event) {
					keyCodeVal = window.event.keyCode; //IE
				}
				else {
					keyCodeVal = evt.keyCode; //all else
				}
				
				console.log(keyCodeVal);
				
				if(keyCodeVal == keyHandler.CTRL_KEY_VALUE && keyHandler.ctrlKeyPressed){
					keyHandler.ctrlKeyPressed = false;
				}
			}
		};	

 - altKey: boolean, alt key depressed at event time
 - clientX: client x-cord at event time
 - clientY: client y-coord 
 - ctrlKey: boolean, ctrl key is depressed at event time
 - keyCode: code-mapping to key depressed 
 - screenX: screen x-coord
 - screenY: screen y-coord
 - shiftKey: boolean, shift key depressed at event time
 - type: type of the event object    
----

----
Add Remove Event Handler 
 - DOM 0
  - Mozilla: event object, invoke 'stopPropagation' method
  - IE: event object, set 'cancelBubble' property
 - DOM 2
  - 'addEventListener('event',myFunction {},boolean);'
  - 'removeEventListener('event', myFunction {}, boolean);'
   - 'event' is the event object 
   - myFunction is who is registered as a listener of the event
   - myFunction receives the event as an arguement
   - boolean describes if the event bubbles back up the stack
  - DOM 2 model follows as:
   - event is passed down the node-tree from the browser (main being the top)
   - event is received by a registered event handler
   - if handler is bubbles up is set 'true' - event moves back up the tree
----

----
Reflection
 - functions are objects, and document and window are objects
for(var member in object){console.log(member + " = " + object[member]);}
----

----
Forms
 - accessed via document property root
  var myForm = document.forms[0];
 - forms are w/i document array, access with index or form's propername
  <form name="someForm"..>
  var myForm = document.someForm;
 - may also access with direct inline declaration
  <form name="someForm" onsubmit="return myForm();">
 - may also invoke addEventListener code 
  document.someform.addEventListerner("submit", myForm, false);
----
 
----
Validation of Html Drop-Down Options
 <form name="myForm">
  <select name="myDropDown">
   <option value="choice1">Choice 1 </option>
   <option value="choice2">Choice 2 </option>
  </select>
 </form>
 - select object has accessable properties
 var theOptions = document.myForm.myDropDown.options;
 
 - access selected option with
 var theindex = document.myForm.myDropDown.selectedIndex; //return an int
 var theselected = document.myForm.myDropDown.options[theIndex];
 
 - through options array ref, new options may be added on-the-fly
 - all options my be removed likewise
 - also register to receive change events to selection
 document.myForm.myDropDown.selectedOpts.onchange = myFunction;
 
 --two box example, the fromIdentifier and toIdentifier are html Select elements
var Util = {
	Move: function(fromIdentifier,toIdentifier){
		var numOfOptions = document.getElementById(fromIdentifier).options.length;
		var toBeMoved = [];
		for(var i = 0;i<numOfOptions;i++)
		{
			var moveMe = document.getElementById(fromIdentifier).options[i];
			if(moveMe != undefined && (moveMe.selected || false))
			{
				//need to push them to a local array since calling 'remove' will change the indices
				toBeMoved.push(document.getElementById(fromIdentifier).options[i]);
			}
		}
		
		for(var j=0; j<toBeMoved.length;j++)
		{
			document.getElementById(fromIdentifier).remove(toBeMoved[j].index);
			document.getElementById(toIdentifier).add(toBeMoved[j]);
		}
	}
}
 
----

----
Validation of Html Radio Buttons \ Check Box 
 <form name="myForm">
  <input type="radio" value="Radio1" name="radioGroup"/>
  <input type="radio" value="Radio2" name="radioGroup"/>
 </form>
 
 - access input from document root
 var anArray = document.myForm.radioGroup;

 - disable a group with 'disabled' property
 document.myForm.radioGroup.disabled = true;
 
 - handle UI with 'onclick' property
 document.myForm.radioGroup.onclick = myFunction;
 
 - new inputs may not be added in real-time
----

----
Validation of Text area
 <form name="myForm">
  <input type="text" name="text0"/> <br/>
  <input type="password" name="text1"/> <br/>
 </form>
 
 - access input from document root as well
 var theText = document.myForm.elements[1].value;
 var otherText = document.myForm.text0.value;
 
 - handle text area's three events
  - focus: when cursor enters into text area
  - blur: when cursor moves out of text area
  - change: when cursor moves out and text area value changed
 document.myForm.text0.blur = myFunction; //handles the event 
 
 -make use of regular expression to validate a text area
----

----
Javascript Security Limits
 - javascript has no IO what-so-ever
 - javascript has no abilty to create a connection
 - javascript only runs with same-origin
  - js from http://somecompany.com
   - http://othercompany.com would fail since its a different domain
   - https://somecompany.com would fail since the protocal has changed
   - http://somecompany.com:8080 would fail since the port has changed
   - http://other.somecompany.com would fail since the host has changed
  - bypass host rescrition by setting document.domain to somecompany.com
----

----
Cookie
 - small data passed between server and client
 - test cookie enabled with 
  if (navigator.cookieEnabled)...
  
 - accessable to both server and client
 - create a cookie provide
  - name or key
  - value
  - date of expiration
  - path
 - access a cookie using the document reference
  var myCookie = document.cookie = cookieName=cookieValue; expDate; path

 - values ought to be string, boolean or number only
 - exp date must be in GMT
 - w/o date cookie is removed upon browser being closed
 - set path as full domain with 
  path =/

 - set path for all subdomains with
  path=domainName.com //for sub1.domainName.com, sub2.domainName.com, etc

 - flash enabled client has FSO or Flash Shared Object with silent size of 100KB
  - FSO can grow to any size
  - FSO size above 100KB need client-user permission on MsgBox
  - have been abused to monitor activity
----

----
XSS or Cross Site Scripting
 - Hexidecimal script embedded in URL
 - cause redirect to bogus emulation site
 - XXS script can access cookies shared between client and page
 - summary of causing: have text interpreted as script or html 
  - w/i the html block content
  - w/i the html attributes 
  - w/i the URL
  - w/i the body between the <script></script> tag
  - w/i server-side implementation
  
 - mitigate risk by explicitly setting character encoding in html <head>
  - needed for server/client to know which characters a special (eg "<")
  
 - based on character setting use hexidecimal for special characters 
 
 - restrict form elements to expected values (eg age between 1 to 115)
----

----
DOM 0
 window.document
 window.navigator
 window.location
 window.frames
 window.screen
 window.history
 
 window.document.forms
 window.document.cookie
 window.document.links or anchors
 window.document.images
----

----
Basic DOM Functions
var anArray = document.getElementsByTagName("div");
var n1 = document.createElement("div")
var n0 = getElementById("elementID");
n0.setAttribute("id","myID");
var nParent = n.parentNode;
nParent.appendChild(n1);
var c0 = n.firstChild;
var c1 = c0.nextSibling;
var c2 = n.childNodes[2];
var cN = n.lastChild;
----

----
Window object
 - actual browser frame rendered by the client os
 - window object is always w/i scope
 - window member uses
  - create manage new windows
  - manipulating the behavior of existing windows
  - timers
  - parent of other objects 
----

----
Dialogs
 alert("this is just a message - no return value");
 var result = confirm("this will return a boolean");
 var response = prompt("this will return a string value");
----

----
New Window
 - window.open("www.myUrl.org","My Window Name","toolbar=no, menubar=no");
 - 1st parameter is the URL
 - 2nd parameter is the window's name
 - 3rd parameter is a comma delimited string of other possiable values
 - all parameters are optional
 
 - 3rd parameter options
  - alwaysLowered: new window behind parent DEFAULT no
  - alwaysRaised: new window in front of parent DEFAULT no
  - dependent: new window closes w/ parent DEFAULT no
  - menubar: new window contains the menu bar 
  - toolbar: new window contains the tool bar
  - location: new window contains the http Url displayed
  - status: render the status bar at window's bottom
  - resizeable: new window is resizable
  - modal: must be closed before focus returns to parent
  - minimizable: obvious
  - titlebar: new window contains a title bar
  - close: close button present
----

----
Timers
 - set one-time timer with
  var timeOut = setTimeout("myFunction", 5000, "param1, param2");
  clearTimeout(timeOut); //clears the timeout event 
 - set repeating timer event
  var timeOt = setInterval("myFunction", 5000);//milliseconds
  clearInterval(timeOt);
----

----
History object
 - go back with 
  history.go(-3);//relation to current history marker
 - go foward with
  history.go(3);
----

----
Navigator object
 - property used to access info about the client browser
  - appName: name of the browser
  - appVersion: browser's version 
  - cookieEnabled: obvious
  - plugins:  array of plugins on the browser
  - platform: client's OS
----

----
Object extension
 - not inheirtance
 - simply extension of existing class functionality using prototype keyword
 - used to add a member to a function having it present on every new instance
  - can already add any property to an instanciated object
  - prototype is for adding a member to class definition (of sorts)
  - all objects 
 - var (w/i function) makes instance variable private
 - basic JS object is just function
  var cirleDef =  function(){
  }
  var newCircle = new cirleDef; //need at least one instance
  circleDef.prototype.pi = 3.14;//any new instance of circleDef gets 'pi'

 - use the keyword 'this' to add the prototype w/i the declaration
 var circleDef = function(){
    this.pi = 3.14;//keyword 'this' makes 'pi' a public variable
    }
    
 - also use 'this' keyword to prototype w/i the declaration, defined elsewhere
 var myCircle = function(){
    //we declare myCircle.calculateSomething
    //but we define this method outside the class itself
    this.calculateSomething = seperateCalculate;
  }
 var seperateCalculate = function(){
    //an implementation here!
  }
----

----
Object inheritance
 - implemented using 'chained-constructors'
 - constructor chaining happens using keyword 'call' or 'apply'
 - both keywords perform same functionality
 - difference in keywords is signature thereof
 function MyFunction(param1, param2){
    getParam1{
      return param1;
    }
    getParam2{
      return param2;
    }
 }
 
 function MyInheritedFunction(param1, param2, param3){
    MyFunction.call(this, param1, param2);//inheriatance happens here
    getParam3{
      return param3;
    }
 }
 
 MyInheritedFunction.prototype = new MyFunction(); //still need one instance
----

----
Namespace declarations
/** @namespace We're the future, your future
*/ 
var noFuture = {
    host: {
        shell: {
            /** @namespace The command objects which link server to client
            */
            cmds: {
                /** @namespace Receiver objects passed to and returned from the command objects
                */ 
                receivers: {},
                exception: {
                    /**@class Object does not implement execute(xhr).
                    */
                    NotaCommandException: function (message) {
                        this.toString = function () { return this.message; };
                        this.message = message;
                    },
                    
                    /**@class Server signed hash does not equal client calc hash
                    */
                    HashValueMismatch: function (message) {
                        this.toString = function () { return this.message; };
                        this.message = message;
                    },
                    
                    /**@class Ajax response object's ResponseCode something other than 200.
                    */
                    AjaxResponsNotOk: function (message) {
                        this.toString = function () { return this.message; };
                        this.message = message;
                    }
                }
            },
            /** @namespace Encapsulates whatever library is being used for js encryption.
            */ 
            encryption: {
                PublicKey: {},
                BulkCipher: {},
                Hash: {}
            }
        }
    }
};//don't forget the semicolon at the end

* @author nofuture
*/

/** 
* Assigns the receiver to an instance variable on the object
*
* @constructor
* @param {noFuture.host.shell.cmds.receivers.BulkCipherKey} receiver The receiver for this command
*
* @class Expected to handle the second step in encryption negotiation where a bulk cipher key 
*  is created, encrypted with the public key and signed, sent to the server and subsequently stored
*  in memory upon success.
*/
noFuture.host.shell.cmds.SetBulkCipherKey = function (receiver) {
    this._receiver = receiver;
    this._hostTarget = "Shell/SetBulkCipherKey";
};

noFuture.host.shell.cmds.SetBulkCipherKey.prototype = {

    /**
    * The execute function for this command
    * @param {Objectr} xhr The ajax request object 
    * @return {noFuture.host.shell.cmds.receivers.BulkCipherKey} The resultant receiver from the server.
    * @throws {noFuture.host.shell.exceptions.HashValueMismatch} When the signed hash from the server does
    *  not equal the value calculated by the client.
    * @throws {noFuture.host.shell.exceptions.AjaxResponsNotOk} When the ajax response code from the server
    *  is anything other than 200.
    */
    execute: function (xhr) {

        var xhrTarget = noFuture.host.shell.cmds.Global.Host + this._hostTarget;
        xhr.overrideMimeType('application/json');
        xhr.open('POST', xhrTarget, false);

        //keep this in memory or will not be able to decrypt the response
        var aes = this._receiver.aesKey;

        //the controller expects a definite instance of the receiver
        xhr.send(this._receiver);

        var execRslt = new noFuture.host.shell.cmds.receivers.BulkCipherKey();

        if (xhr.status == 200) {
            execRslt.tryParse(xhr.response);
        } else {
            throw new noFuture.host.shell.cmds.exception.AjaxResponsNotOk(xhr.response);
        }
        return _postSend(execRslt, aes);
    },

    intellisense: function (text, format) {
        /*
        TODO, 
        (1) if this is a match then return some 'next-complete' in the 'format' variable and return true
        e.g. 
        Set-[TAB] -> Set-BulkCipherKey
        Set-BulkCipherKey -[TAB] -> Set-BulkCipherKey -aesKey (a property of the receiver)
        (2) when its not a match then set 'format' to empty-string and return false
        */
    },

    isExecutableText: function (text) {
        //if this returns true then all the receiver's values should be parsed from the text
        // with expectation that the next thing to happen is a call to execute

    },

    /**Performs encryption task prior to call of send on xhr
     * @private
    */
    _preSend: function () {
        var pubKey = noFuture.host.shell.encryption.PublicKey;
        var hashFx = noFuture.host.shell.encryption.Hash;

        //coded so every command may pass these in or user just assigns then to the globals from the console
        var ip = this._receiver.ip == null ? noFuture.host.shell.Global.Ip : this._receiver.ip;
        var port = this._receiver.port == null ? noFuture.host.shell.Global.Port : this._receiver.port;

        this._receiver.aesKey = pubKey.ToEncryptedText(this._receiver.aesKey, noFuture.host.shell.Global.PublicKey);

        this._receiver.ip = pubKey.ToEncryptedText(noFuture.host.shell.Global.Ip, ip);
        this._receiver.port = pubKey.ToEncryptedText(noFuture.host.shell.Global.Port, port);

        this._receiver.hash = "";
        var rHash = hashFx.Sign(this._receiver.toString(), noFuture.host.shell.Global.HashKey);
        this._receiver.hash = pubKey.ToEncryptedText(rHash, noFuture.host.shell.Global.PublicKey);

    },

    /** Performs response decryption upon successful response to send on xhr
     * @param {noFuture.host.shell.cmds.receivers.BulkCipherKey} execResult The BulkCipherReceiver send back from the server.
     * @param {String} aes The aes key as it was prior to any communication to the server
     * @private
    */
    _postSend: function (execRslt, aes) {
        var bcKey = noFuture.host.shell.encryption.BulkCipher;
        var hashFx = noFuture.host.shell.encryption.Hash;
        
        //response was encrypted with bulkcipher key
        var dHash = bcKey.ToPlainText(execRslt.aesKey, aes);
        execRslt.hash = "";
        var cHash = hashFx.Sign(execRslt.toString(), noFuture.host.shell.Global.HashKey);

        if (cHash != dHash) {
            throw new noFuture.host.shell.cmds.exception.HashValueMismatch("dHash = " + dHash + "; cHash = " + cHash);
        }

        noFuture.host.shell.Global.BulkCipherKey = aes;

        this._receiver = execRslt;
        return execRslt;
    }

};
----

----
Javascript file form
 - .js files should never contain a TAB char
 - jsDoc3 and proper annotations in .js src files 
   produces a API, in html.
 /** @fileOverview Top Level namespace declarations
  *
  * @author Jim Jsmaster
  */
  
 /** @namespace My Namespaces synopsis here
  */  
 var myNamespace = {
	moreNamespace: {}
 }; 
   
   
 /** @fileOverview My File's Description Here
  *
  * @author Jim Jsmaster
  * @author Jims Assistant
  */
 
 /** @namespace My Namespaces synopsis here
  *
  * @description
  * <p>
  * When the description is lengthy then it may 
  * be written as embedded html
  * </p>
 */
 myNamespace.moreNamespace = {
   
   /** My First Fields Description */
   myFirstField: "here is a value",
   
   /** My Second Fields Description */
   mySecondField: { its:"a json object", isJson:true},
   
   /** Function Description here, this will get labeled with a <static>
    *   
    * @param {String|customType} param1 parameter description here.
	* @param {Object} param2 more parameter description
	* @param {Object} [param3] The sqr-braces means its optional
	* @return {String} Description of whats returned.
	* @throws {myNamespace.myExceptions.MyExectpion} Obvious Java influence here.
	*/
   myFunction: function (param1, param2, param3) {
     //typical way to handle optional parameters
     param3 = param3 || {}
	 
	 return "something";
   },
   
   /** Private functions description
    * @param {Object} privParam1 The Description here
	* @return {Object} More descriptions.
	* @private
	*/
   _myPrivateFunction: function (privParam1) {
      return {you:"called my private function!"};
   }
 };
 
 /** Aliased function description here
    * @param {String|customType} param1 parameter description here.
	* @param {Object} param2 more parameter description
	* @param {Object} [param3] The sqr-braces means its optional
	* @return {String} Description of whats returned.
	* @throws {myNamespace.myExceptions.MyExectpion} Obvious Java influence here.
	*/
 myNamespace.MyAliasFunction = myNamespace.moreNamespace.myFunction;
 
 //end of this file
 
 /** @fileOverview Here is a whole file for a kind of Class
  *
  *  You may enter more descriptions here 
  *
  * @author Jim Jsmaster
  */
  
 /** 
  * I am describing MyClass here
  * and it may be many lines.
  *
  * @constructor
  * @param {Array} param1 The description of the ctor's parameter
  *
  * @class This description appears atop the html file as a kind of header
  */
 myNamespace.moreNamespace.MyClass = function (param1) {
 
	//locals come alive
	var local1, local2
	   local3, local4 = param1[0] + param1[1],
	   
	//this instance field is suddenly here
	this._myPrivateField = local4;
	
 };//this is the end of the ctor
 
 //now the rest of the class definition here, 
 //the descriptions are on functions\fields only
 myNamespace.moreNamespace.MyClass.prototype = {
   
   /**
    * Here is a function present on a instance
	* @param {Array} param1 Some description here
	* @return {Array} Here is returns description
	*/
	myInstanceFunction:function (param1){ 
		return [];
	},
	
	/**
	 * Here is a description  of the private field
	 * and there is probably no actual scope - just implied
	 * 
	 * @private
	 */
	_myPrivateInstanceField: [[],[]],
	
	/**
	 * Private function's description
	 * that has not params
	 *
	 * @private
	 */
	_myPrivateFunction: function(){
		return;
	}
 };
 //end of file
----
  
----
CSS and JavaScript
 - CSS id names, hyphens are removed and Camel-case is used instead
 - upon call div.style the value is null even though it was set by CSS 
 
 <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>
<head>
<title>My CSS Example</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<script type="text/javascript">
//<![CDATA[

function changeElement(  ) {
  var div = document.getElementById("divOne");
  div.style.backgroundColor="#f00";
  div.style.width="500px";
  div.style.color="#fff";
  div.style.height="200px";
  div.style.paddingLeft="50px";
  div.style.paddingTop="50px";
  div.style.fontFamily="Verdana";
  div.style.borderColor="#000";
}

//]]>
</script>

</head>
<body onload="changeElement(  );">
<div id="div-one">
This is a DIV element.
</div>
</body>
</html>
----

----
Ajax
 - well-suited for form validation
 - is client/server request happening asynchronously 
  - appears that processing is happening on client only
  - Ajax does require a server-side scripting
 - browser object for Ajax functionality is the XmlHttpRequest object
 - XmlHttpRequest object is implemented different in IE than others 
function getXmlHttpRequest(  ) {

   if (window.XMLHttpRequest) {
      //Firefox, Opera, etc call to the XmlHttpRequest Object
      xmlhttp = new XMLHttpRequest(  );
      xmlhttp.overrideMimeType('text/xml');
   } else {
      try
        { 
            //the new IE call to the XmlHttpRequest object
            xmlhttp = new ActiveXObject("Msxml2.XMLHTTP");
        }
        catch (e)
        {
            try
            {
                //the old IE call to the XmlHttpRequest object
                xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
            }
            catch (e)
            {
                xmlhttp = false;
            }
        }
   }
}
----

----
XMLHttpRequest object
 - standard methods are 
 XmlHttpRequest.Open(method,url[,async,username,password])
 XmlHttpRequest.setRequestHeader(label,value)
 XmlHttpRequest.send(content)
 XmlHttpRequest.getAllResponseHeaders( )
 XmlHttpRequest.getResponseHeader(label)
 XmlHttpRequest.abort( )
 
 - standard properties
 XmlHttpRequest.Onreadystatechange
 XmlHttpRequest.readyState
 XmlHttpRequest.responseText
 XmlHttpRequest.responseXML
 XmlHttpRequest.status
 XmlHttpRequest.statusText
 
 - values may be returned as string, XML or JavaScript Object Notation
 - server-side script is responsiable for generating valid XML
  - must include MIME "text/xml" in the XML Declaration
----

----
XMLHttpRequest.responseXML
 - returns HTML Collection
 
<?xml version="1.0" encoding="UTF-8" ?>
<cities>
 <city><value>stlou</value><title>St. Louis</title></city>
 <city><value>kc</value><title>Kansas City</title></city>
 <city><value>seattle</value><title>Seattle</title></city>
 <city><value>spokane</value><title>Spokane</title></city>
 <city><value>olympia</value><title>Olympia</title></city>
 <city><value>sanfran</value><title>San Francisco</title></city>
 <city><value>la</value><title>Los Angeles</title></city>
 <city><value>web2</value><title>Web 2.0 City</title></city>
 <city><value>barcamp></value><title>BarCamp</title></city>
 <city><value>boise</value><title>Boise</title></city>
</cities>
 
 - code fragment of iteration through the above XML
        //grabing all the <city> nodes into a collection
        //use 'getAttribute' for attributes
        var citynodes = xmlhttp.responseXML.getElementsByTagName('city');
        for (var i = 0; i < citynodes.length; i++) {
           var name = value = null;
           for (var j = 0; j < citynodes[i].childNodes.length; j++) {
              var elem = citynodes[i].childNodes[j].nodeName;
              var nodevalue = citynodes[i].childNodes[j].firstChild.nodeValue;
              if (elem == 'value') {
                  value = nodevalue;
              } else {
                  name = nodevalue;
              }
           }
----

----
Mozilla              IE

window.top.screenX   window.top.screenLeft
window.top.screenY   window.top.screenTop

----

----
Using Java's jrunscript
 - http://download.java.net/jdk8/docs/technotes/guides/scripting/programmer_guide/index.html
 - Examples, using Jrunscript.exe

js> // Import Java packages and classes 
js> // like import package.*; in Java
js> importPackage(java.awt);
js> // like import java.awt.Frame in Java
js> importClass(java.awt.Frame);
js> // Create Java Objects by "new ClassName"
js> var frame = new java.awt.Frame("hello");
js> // Call Java public methods from script
js> frame.setVisible(true);
js> // Access "JavaBean" properties like "fields"
js> print(frame.title);

js> // create JavaImporter with specific packages and classes to import
js> var SwingGui = new JavaImporter(javax.swing,javax.swing.event,javax.swing.border,java.awt.event);
js> // within this 'with' statement, we can access Swing and AWT
js> with (SwingGui) {var mybutton = new JButton("test");var myframe = new JFrame("test");}

js> // create Java String array of 5 elements
js> var a = java.lang.reflect.Array.newInstance(java.lang.String, 5);

js> // Accessing elements and length access is by usual Java syntax
js> a[0] = "scripting is great!";
js> print(a.length);

var r  = new java.lang.Runnable() {
    run: function() {
        print("running...\n");
    }
};

// "r" can be passed to Java methods that expect java.lang.Runnable
var th = new java.lang.Thread(r);
th.start();

function func() {
     print("I am func!");
}

// pass script function for java.lang.Runnable argument
var th = new java.lang.Thread(func);
th.start();

 - Getting members of a java jar

importPackage(java.util.jar);
var myJar = new JarFile("C:\\Projects\WindowsPowerShell\temp\code\java\dist\MyJar.jar");
var e = myJar.entries();
while(e.hasMoreElements()) {var je = e.nextElement(); print(je.getName() + "\n");}

importPackage(java.net);
var myJar = "jar:file:C:\\Projects\WindowsPowerShell\temp\code\java\dist\MyJar.jar!/"
var myUrlJar = new URL(myJar);
var myUrls = java.lang.reflect.Array.newInstance(URL,1);
myUrls[0] = myUrlJar;
var cl = URLClassLoader.newInstance(myUrls);
var myClass = cl.loadClass("MyJavaClass");
var myConstructor = myClass.getConstructor();
var myActualType = myConstructor.newInstance();
myActualType.GetMyString();
----