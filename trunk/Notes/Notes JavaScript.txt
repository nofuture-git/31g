Notes JavaScript

"Learning JavaScript" 
by Shelley Powers 
Publisher: O'Reilly 
Pub Date: October 01, 2006 
Print ISBN-10: 0-596-52746-2 
Print ISBN-13: 978-0-59-652746-4 
Pages: 351 

----
A function is a object, an object is a function
----

----
Basic Script
 - Current standard is ECMA-262
  - ES5 is short hand for 'ES' means ECMAScript 
    '5' was changes added in Dec '09
  - ES6 (aka ES2015) was changes added in Jun '15
  - TypeScript is superset of Javascript - will "transpile"
    into standard Javascript.
 - is loosely typed (no variable type declaration required)
 - has a strange history 
  - originally to support HTML's DOM 
  - now full lang on its own
  - created in 10 days by Brendan Eich in '95
  - was put to the ECMA in '96-'97
  - spec named as ECMA-262 Ed.1
  - ECMAScript 2 in '98
  - ECMAScript 3 in '99
  - a version 4 was mothballed in '03
  - ECMAScript 5 about '09-'10
  - ECMAScript 6 is named ECMAScript 2015
----

----
Identifiers 
 - begin w/ dollar-sign, underscore or character
 - is a case-sensitive language
 - best-practice, use an underscore to mark variable private (eg _myVariable)
 - other best-practice naming http://dojotoolkit.org/developer/StyleGuide
 - declaration/instantiation looks the same as assignment
  myVariable = 4;
 - recommended that declaration begin with 'var' keyword
  var myVariable = 4;
 - declaration w/o 'var' keyword forces variable to Global scope
 - the same rules apply to function parameters
----
  
----
Primitives
 - String 
  - enclosed in single or double quotes
  - Backslash is used to escape characters in a string
  - use escape("any string literal here is ok") to avoid use of backslash
  - use unescape("") to set string value back to the original 
 
    var myStr = escape("http://www.thesiteofitall.org");
    //comes out at http%3A//www.thesiteofitall.org
 
  - method calls perform implicit conversions
 
 - Boolean
  //- literals false true
  var myBool; 
  myBool = Boolean(false); //false
  myBool = Boolean(true); //true
  myBool = false; //false
  myBool = true; //true
  
  //- cast as string is true unless string is empty-string
  myBool = Boolean(""); //false
  myBool = Boolean("false"); //true
  
  //- cast as number is true unless number is zero
  myBool = Boolean(99); //true
  myBool = Boolean(-99); //true
  myBool = Boolean(0); //false
  
  //- cast as object is true 
  var myObj = document.getElementById("frmLogin");
  myBool = Boolean(myObj); //true
  
  //- keyword Null is cast as false
  myBool = Boolean(null); //false
 
 - Number
  //- literals may be integer or decimal
  //- value typical limit is 32-bit signed 
  var myNum;
  myNum = Number(1);
  myNum = 1.1; 
  typeof(myNum); //"number"
  
  //- literals as 0x for hex, 0 (just zero) for oct and normal dec
  myNum = 0xA; //10
  
  //- boolean true is 1, otherwise 0
  myNum = Number(true); //1
  myNum = Number(false); //0
  
 - Null and Undefined
  //- is Null upon no declaration (eg myVariable; -vs- var myVariable;)
  //myUndeclared; //errors!
  myUndeclared = null; //OK
  typeof(myUndeclared); //"object" 
  
  //- is Undefined upon declaration w/o assignment
  var myUndefined;
  myUndefined; //nothing
  typeof(myUndefined); //"undefined"
  
  //- Undefined and Null may be passed as parameter
  function MyFunc(myArg){console.log(typeof(myArg));}
  MyFunc(myUndeclared); //object
  MyFunc(myUndefined); //undefined
  MyFunc(null); //object
  
 - NaN (Not a Number)
  //- result of failed cast of string or Boolean to a number
  var myObj = document.getElementById("frmLogin");
  Number(myObj); //NaN
  
  //- test with static function isNaN(myVariable)
  var myNan = Number(myObj);
  typeof(myNan); //"number"
  isNaN(myNan); //true
  
 - Constants
  //- declared with 'const' syntax
  const myConst = 7; //syntax error in IE, doesn't work in most the rest
----

----
Statement & Assignment declartion 
 - statements end in a semicolon
 - semicolon may be ommitted upon a whole, complete statement
 - whitespace has no effect on syntax
 - assignment operator is a single equal sign
----

----
Unary Operators
 ++ increment numeric value
 -- decrement numeric value
 - change the sign of numeric
 ! for NOT
----

----
Ternary Operators
<boolean expression> ? <upon True>: <upon False>
----

----
Arithmetic Operators
 + for additon
 - for subtraction
 * for multiplication
 / for division - always a float result
 % for Modulus 
----

----
Concatination
 - uses the '+' operator
 - is overloaded, as summing with math, concat with string
 - string and numeric operands on a '+' results in a string
----

----
Logical Operators
 && for AND, is a short-circuit operator
 || for OR, also short-circuit
 ^ for XOR
 == value equality
 === value and type equality (JS 1.3)
 != not value equals
 !== not value and type equals
 < less than
 > greater than
 <= less than, equal to
 >= greater than, equal to
----

----
Order of Operation
 - division 
 - multiplication
 - subtraction
 - addition 
 - assignment
----

----
Compound Assignment Operators
 += plus, equals
 -= minus, equals
 *= product, equals
 /= ratio, equals
 %= mod, equals
----

----
Bitwise Operators
 &   bitwise AND
 |   bitwise OR
 ^   bitwise Exclusive OR
 ~   bitwise NOT
 <<  left shift
 >>  right shift
 >>> zero fill right shift
 
 - bitwise operations are used more in JS since the conserve space
----
 
----
Branching Statements
 var myBool = Boolean(true);
 var myOtherBool = Boolean(false);
 if (myBool ^ myOtherBool) 
 {
    //XOR works as intended you arrive here
 } 
 else if (isNaN(myUndeclared)) 
 {
    //further branching
 } 
 else 
 {
    //final branch
 }
 
 if (myBool) console.log("myBool was true"); //single line conditional
 if(myBool) {console.log("myBool was true");} //ok
----

----
Switch Case Statement
 - JS has 'Fall-through' case statements just like java
 - break is optional if fall-through is desired
 - notice colon following a case
var myString = "myStringVal";
switch (myString)
{
   case "myStringVal":
	console.log("works on strings");
	break;
   default:
	console.log("no match");
}

----

----
Iterations

Do While: execute upon single condition
 do while (i < 10){
  i++;
  //loop body
 }
 
 do {
  i++;
  //loop body will execute at least once
  } while (i < 10)

For: specific to known count of iterations
 for(var i = 0; i < 10; i++){
  //loop body - will go for number of iterations allowed
  }
  
For In: for array of values
 for (<variable> in <object>){
  //loop body using the <variable> reference
  }
----

----
Constructor
 - constuctor syntax:
  var myNumber = new Number("10");
----

----
Other Operators
 //-with statement function, no use of prefix dot operator
 var myString = "a string ";
 with(myString)
 {
	length
 }
----

----  
Number Object
 myNumber.toExponential(3) //1.000e+1
 myNumber.toPrecision(3) //10.0
 myNumber.toFixed(6) //10.000000
----

----  
String Object
 
 var myString = "This is a string that is really a full sentence.";
 
 //interpolation added in ES2015
 let something = 12;
 myString = "${something} is interpolated";
 
 myString.length; //48
 myString.charAt(8); //"a"
 //convert to byte array 
 var buffer = [];
 for(var i = 0; i< myString.length;i++) { buffer.push(myString.charCodeAt(i));}
 
 // \n and \r, both work
 "my \n newline";
 "my \n\r newline";
 /*
 "my 
 newline" 
 */
 
 //use concat like a stringbuilder
 myString.concat(" Now, ", "having this we have ","created a paragraph.");
 /*"This is a string that is really a full sentence. Now, having this we have created a paragraph."*/
 
 //regular concat operator works too
 myString + "  Here is my second sentence."
 /*"This is a string that is really a full sentence.  Here is my second sentence."*/
 
 //original value preserved without assignment, same as Java/.NET
 myString; //"This is a string that is really a full sentence." 
 
 //full regex support built in to string
 var myrgx = myString.match(/is/);
 for(member in myrgx){console.log(myrgx[member]);}
 /*
 	0 : "is",
	input : "This is a string that is really a full sentence.",
	index : 2,
	lastIndex : 4
 */
 
 //replace first occurance
 myString.replace(/is/,"was");
 /*"Thwas is a string that is really a full sentence."*/ 
 
 //regex pattern is case sensitive
 myString.replace(/\sIS/," was ");//no change, regex is case-sensitive
 
 //include switch an end of regex literal to ignore case
 myString.replace(/\sIS\s/i," was ");
 /*"This was a string that is really a full sentence."*/
 
 //use a 'g' switch to have every occurance replaced
 myString.replace(/\sis\s/g," was "); 
 /*"This was a string that was really a full sentence."*/
 
 //may combine switches as needed
 myString.replace(/\sIS\s/gi," was "); 
 /*"This was a string that was really a full sentence."*/
 
 //substring(n,m) doesn't work the same as .NET, 
 //n is 'startAt' and m is 'endAt' in terms of index
 myString.substring(4,8); 
 /*" is "*/
 
 //is zero-index based
 myString.substring(1); 
 /*"his is a string that is really a full sentence."*/
 
 //Oddly, since n,m are indices, whichever is smaller is 
 //used as start, regardless of order
 myString.substring(4,1); //"his"
 
 //delimiter is not included in the results
 myString.split("is")
 /*
 	0 : "Th",
	1 : " ",
	2 : " a string that ",
	3 : " really a full sentence."
 */
 //may limit the number of splits with second arg
 myString.split("is",2);
 /*
 	0 : "Th",
	1 : " "
 */
 
 //all your favorites 
 myString.toLowerCase(); //"this is a string that is really a full sentence."
 myString.toUpperCase(); //"THIS IS A STRING THAT IS REALLY A FULL SENTENCE."
 var myOtherString = "           spaces       ";
----

----
RegExp Object
 - g is regex switch for match-all or 'global'
 - i is regex switch for ignore-case, default is case-sensitive
 var myString = "This is a string that is really a full sentence.";
 var myRegex = new RegExp(' is ',g);//no escape sequences
 var myOtherRegex = /\sis\s/; //regex literal with escape sequences
 //only returns first match in IE9 irrespective of global switch
 myRegex.exec(myString);
 /*
 	0 : " is ",
	input : "This is a string that is really a full sentence.",
	index : 4
 */
 myRegex.test(myString); //true
 //members are available on regex literals
 /\sis\s/.test(myString); //true
 
 //escape a string literal to all hex representation
 var stringWithRegexChars = "[0-9]";
 var listRegex = "";
 for (var k = 0; k < stringWithRegexChars.length; k++) {
    listRegex += '\\x' + stringWithRegexChars.charCodeAt(k).toString(16);
 }
 var myRegex = new RegExp(listRegex, "i");
 myRegex.exec("Enter all numeric values [0-9]")
----
 
----
Date Object 
 //no-arg constructor gets system-time
 new Date(); //Wed Aug 29 16:00:50 CDT 2012 
 //unix time
 var mydate1 = new Date(1346277265456); //Wed Aug 29 16:54:25 CDT 2012 
 //string literal
 var mydate2 = new Date("August 20, 2008 4:20:20");//date literal format
 
 //integer literals
 var mydate3 = new Date(2008, 8,20,4,20,20,1);//year,month,day,hour,minute,etc
 
 //parse features
 new Date("August 20, 2008 4:20:20").getFullYear(); //2008
 new Date(1346277265456).getMilliseconds(); //456
 new Date(1346277265456).getMonth(); //7
 new Date(1346277265456).getSecnods(); //25
 new Date(1346277265456).getMinutes(); //54
 myDate.getHours(); //16
 //gets day-of-week
 myDate.getDay(); //3
 //gets calander day
 myDate.getDate(); //29
 //get unix time
 new Date().getTime();//1346274540498
 //number of minutes sys-clock is off UTC
 new Date().getTimezoneOffset(); //300
 new Date().toString; //"Wed Aug 29 16:10:33 CDT 2012" 
----

----
Math Object (Static)
 Math.ceil(3.01);//return 4 (next whole number)
 Math.ceil(-3.99);//return -3 
 Math.floor(3.95);//return 4
 Math.floor(-3.05);//return -4
 Math.exp(4);//is e^4 
 Math.pow(3,2);//is 3^2
 Math.min(1,2,3);//returns 1
 Math.max(1,2,3);//returns 3
 Math.random(); //return a random between 0 and 1 as a double
----

----
Arrays: 
 - are flexable like collections in compile-type languages
 
 var myArray = new Array('one', 'two');
 var myArray1 = ['one', 'two']; //use literals for annomyous  
 var myArray2 = new Array(); //no length definition
 
 myArray2[0] = "a literal";
 myArray2[1] = "another";
 myArray2[2] = "more";  //array elements just being added in-time
 //arrays have no type-restrictions
 myArray2[3] = true;
 myArray2[4] = new Date();
 myArray2[5] = 1.1;
 ----
 
 ----
 Array Mutators
 //pop, push, reverse, splice, shift, 
 //unshift all change the array they are called on
 
 //push & pop ~ Vector
 var myPop = ["A", "B", "C", "D"];
 myPop.pop(); //returns "D"
 myPop
 /*{
	0 : "A",
	1 : "B",
	2 : "C"
}*/

 var myPush = ["A", "B", "C", "D"];
 //no-arg calls works, returns current length
 myPush.push(); //4
 //call with arg returns new length
 myPush.push("Z"); //5
 myPush
 /*{
	0 : "A",
	1 : "B",
	2 : "C",
	3 : "D",
	4 : "Z"
}*/
 //operates with var-args (paramarray)
 myPush.push("X","Y",true); 
 /*pushing an array causes the recipent to become jagged, but it works
   use .concat to make a linear addition*/
 var myAddition = ["T",new Date(),11]; 
 myPush.push(myAddition);
/*{
	0 : "A",
	1 : "B",
	2 : "C",
	3 : "D",
	4 : "Z",
	5 : "X",
	6 : "Y",
	7 : true,
	8 : T,Wed Aug 29 16:35:18 CDT 2012,11
}*/
 
 var myReverse = ["A", "B", "C", "D"];
 //calls to this affect the source but also return it as well
 myReverse.reverse();
 /*{
	0 : "D",
	1 : "C",
	2 : "B",
	3 : "A"
}*/
 
 var mySplice = ["A", "B", "C", "D"];
 mySplice.splice(2,0,"Z","y")
 /*{
	0 : "A",
	1 : "B",
	2 : "Z",
	3 : "y",
	4 : "C",
	5 : "D"
}*/
 
 var mySort = [1, "01", "A", 10];
 //called with no function then sort is by string values
 //which differs from numerical values
 mySort.sort();
/*{
	0 : "01",
	1 : 1,
	2 : 10,
	3 : "A"
}*/
/*may perform with comparefunction(a,b)
a is less than b by some ordering criterion == -1
a is greater than b by the ordering criterion == 1
equality == 0*/
mySort.sort(function(a,b){
	var P = typeof(a) == "string";
	var Q = typeof(b) == "string";
	if(!P && Q) return -1;
	if(P && !Q) return 1;
	return 0;
});
/*{
	0 : 1,
	1 : 10,
	2 : "01",
	3 : "A"
}*/

 //shift & unshift ~ Stack
 var myShift = ["A", "B", "C", "D"];
 //returns the item which was removed
 myShift.shift();//"A"
 myShift;
 /*{
	0 : "B",
	1 : "C",
	2 : "D"
}*/
 
 var myUnshift = ["A", "B", "C", "D"];
 //returns new length
 myUnshift.unshift("Z");//5
 myUnshift;
 /*{
	0 : "Z",
	1 : "A",
	2 : "B",
	3 : "C",
	4 : "D"
}*/
----

----
Function Declaration 
 function myfunction(param1, param2) {
    return "something";
    //body of function here
 }
 - parameters are pass-by-value semantics 
 - primitives are copied 
 - objects are by reference
 - return keyword is used to return a value
 
 var myVar = new Function("parameter","alert(parameter);");
 - functions may be declared anonymously
 - created at runtime upon each call 
 
 var func = ("myParameter"){
  //statements
 }
 - function may be declared anonymously 
 - 'func' int the example may be passed into a function as a parameter
 
 //functions and objects are the same in javascript
 function ClassicFunction(){
	console.log("a classic");
 }
 
 var refToClassic = new ClassicFunction();//this is valid, will run immediately
 
 ClassicFunction();//this operates the same as above, but no ref remains after exe
 
 //extension in almost any form
 (function($){
	$.addedMethod = function(){
		console.log("no longer a classic...")l
	};
 })(refToClassic);
 
 function MyDemoOfArguements(param1, param2, param3){
 
	//arguments is a sorta keyword that has each of the 
	//parameters passed into the the call to this f(x)
	console.log(arguments[0] == param1);
	console.log(arguments[1] == param2);
	console.log(arguments[2] == param3);
	
	//arguments is not an actual array but may be made into one 
	// by using a call to slice
	var args = Array.prototype.slice.call(arguments);
 }

 Anonymous enclosures (lambda expressions) 
 - added in ECMAScript 2015
 - reads same as in .NET as 'goes to'
 var nums = [1,2,3,4,5,6,7,8];
 var myFilter = numbers.filter(x => x % 2 === 0)
 
 var max = (a,b) => {
    if(a>b){
        return a;
    }
    else{
        return b;
    }
 }
----

----
Array Accessors Functions
 - do not modify the underlying array but return a new array 

var myAccessArray = [true,10,"01",new Date()];
myAccessArray.concat(false, new Date().getDate(),"here");
/*{
	0 : true,
	1 : 10,
	2 : "01",
	3 : Wed Aug 29 17:08:43 CDT 2012,
	4 : false,
	5 : 29,
	6 : "here"
}*/

//returns the contents a string
myAccessArray.join();//"true,10,01,Wed Aug 29 17:08:43 CDT 2012"
myAccessArray.join(", ");//"true, 10, 01, Wed Aug 29 17:08:43 CDT 2012" 
myAccessArray.join("|");//"true|10|01|Wed Aug 29 17:08:43 CDT 2012" 

//like the operation in string, both values are indices
myAccessArray.slice(1,3);
/*{
	0 : 10,
	1 : "01"
}*/

var myIndices = [true,10,"01",new Date(),"01"];
myIndices.indexOf("01");//2
myIndices.lastIndexOf("01"); //4
----

----
Array Iterations (callback) Functions
//anonymous function returns boolean
var myFilteredArray = ["01",0xA,new Date(),false];
myFilteredArray.filter(function(element, index, array){
	 return typeof(element) == "string";
});
/*{
	0 : "01"
}*/


var myForeach = [0xA,false,new Date().getMinutes(),"my string",new Date()];
//element assignment within anonymous function doesn't change the array
myForeach.forEach(function(element, index, array){
	var eType = typeof(element);
	console.log(eType);
	switch(eType)
	{
		case "string":
			element = element + " added foreach";
			break;
		case "number":
			element += 1;
			break;
	}
});
/*{
	0 : 10,
	1 : false,
	2 : 34,
	3 : "my string",
	4 : Wed Aug 29 17:34:19 CDT 2012
}*/
//change the array using the indices on the original array
// this is not recommended, use 'map' to get modified results
myForeach.forEach(function(element, index, array){
	var eType = typeof(element);
	console.log(eType);
	switch(eType)
	{
		case "string":
			myForeach[index] = element + " added foreach";
			break;
		case "number":
			myForeach[index] += 1;
			break;
	}
});
/*{
	0 : 11,
	1 : false,
	2 : 35,
	3 : "my string added foreach",
	4 : Wed Aug 29 17:34:19 CDT 2012
}*/

//every is used to confirm some truth-value concerning the whole array
var myEvery = [0xA,false,new Date().getMinutes(),"my string",new Date()];
myEvery.every(function(element, index, array){	return element == 0xB;});//true

//some is the opposite of every in logical form
var mySome = [0xA,false,new Date().getMinutes(),"my string",new Date()];
mySome.some(function(element, index, array){	return element == 0xB;}); //false

//generates a new array, original is unchanged
/*every iteration returns something, upon nothing being returned
  the result at 'index' in the new array is 'undefined'*/
var myMap = [0xA,false,new Date().getMinutes(),"my string",new Date()];
var myResult = myMap.map(function(element, index, array){
	if(typeof(element) == "number") return element += 10;
});
/*{
	0 : 20,
	1 : undefined,
	2 : 58,
	3 : undefined,
	4 : undefined
}*/

//reduce is used to distill an array into something else
// it operates affectively as a recursive function 
// without an intial value, on first call into 
// 'reduce' a is index 0 and b is index 1
 var flattened = [[0, 1], [2, 3], [4, 5]].reduce(function(a, b) {
     return a.concat(b);}); 
/*{
	0 : 0,
	1 : 1,
	2 : 2,
	3 : 3,
	4 : 4,
	5 : 5
}*/
//given an 'initial value' the first call into 'reduce' 'a' 
//  is that initial value and b is index 0 of array
var flattened = [[0, 1], [2, 3], [4, 5]].reduce(function(a, b) {    
    return a.concat(b);},["front"]); 
/*{
	0 : "front",
	1 : 0,
	2 : 1,
	3 : 2,
	4 : 3,
	5 : 4,
	6 : 5
}*/
----

----
Error Handling
 - JavaScript 1.5 uses traditional try..catch..finally
 - try/catch statement appears w/i the funtion/object
 - use static instanceof to test exception's type
 
function myfunction {
  try{
    //risky code here
  } catch (e){
    if (e instanceof TypeError){}
    //other instanceof testing here
  } finally {
    //some always run code here
  }
}
----

----
Reflection
 - functions are objects, and document and window are objects
for(var member in object){console.log(member + " = " + object[member]);}
----

----
Timers
 - set one-time timer with
  var timeOut = setTimeout("myFunction", 5000, "param1, param2");
  clearTimeout(timeOut); //clears the timeout event 
 - set repeating timer event
  var timeOt = setInterval("myFunction", 5000);//milliseconds
  clearInterval(timeOt);
----

----
Object extension
 - not inheirtance
 - simply extension of existing class functionality using prototype keyword
 - used to add a member to a function having it present on every new instance
  - can already add any property to an instanciated object
  - prototype is for adding a member to class definition (of sorts)
  - all objects 
 - var (w/i function) makes instance variable private
 - basic JS object is just function
  var cirleDef =  function(){
  }
  var newCircle = new cirleDef; //need at least one instance
  circleDef.prototype.pi = 3.14;//any new instance of circleDef gets 'pi'

 - use the keyword 'this' to add the prototype w/i the declaration
 var circleDef = function(){
    this.pi = 3.14;//keyword 'this' makes 'pi' a public variable
    }
    
 - also use 'this' keyword to prototype w/i the declaration, defined elsewhere
 var myCircle = function(){
    //we declare myCircle.calculateSomething
    //but we define this method outside the class itself
    this.calculateSomething = seperateCalculate;
  }
 var seperateCalculate = function(){
    //an implementation here!
  }
----

----
Object inheritance
 - implemented using 'chained-constructors'
 - constructor chaining happens using keyword 'call' or 'apply'
 - both keywords perform same functionality
 - difference in keywords is signature thereof
 function MyFunction(param1, param2){
    getParam1{
      return param1;
    }
    getParam2{
      return param2;
    }
 }
 
 function MyInheritedFunction(param1, param2, param3){
    MyFunction.call(this, param1, param2);//inheriatance happens here
    getParam3{
      return param3;
    }
 }
 
 MyInheritedFunction.prototype = new MyFunction(); //still need one instance
----
