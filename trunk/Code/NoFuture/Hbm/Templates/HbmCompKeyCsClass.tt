<#@ template hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="C:\Projects\31g\trunk\Code\NoFuture\bin\NoFuture.Shared.dll"#>
<#@ assembly name="C:\Projects\31g\trunk\Code\NoFuture\bin\NoFuture.Util.dll"#>
<#@ assembly name="C:\Projects\31g\trunk\Code\NoFuture\bin\NoFuture.Hbm.dll"#>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
	var paramName= NoFuture.Hbm.SortingContainers.HbmFileContent.T4_PARAM_NAME;
    var hbmFilePath = this.Host.ResolveParameterValue("","",paramName);
	var p2Name = NoFuture.Hbm.SortingContainers.HbmFileContent.INVOKE_NF_TYPE_NAME;
	NoFuture.Shared.NfConfig.CustomTools.InvokeNfTypeName = this.Host.ResolveParameterValue("","",p2Name);
	var compositeIdNode = new NoFuture.Hbm.Templates.HbmCompKeyCsClass(hbmFilePath);

    var compKeyClassName = NoFuture.Util.NfType.NfTypeName.GetTypeNameWithoutNamespace(compositeIdNode.IdType);
    var _namespace = NoFuture.Util.NfType.NfTypeName.GetNamespaceWithoutTypeName(compositeIdNode.IdType);
#>
using System;

namespace <#= _namespace #>
{
    [Serializable]
    public class <#= compKeyClassName #>
    {

<#
    foreach(var k in compositeIdNode.CompositeKeyProperties.Keys){
        var keyPropName = k;
        var keyPropType = compositeIdNode.CompositeKeyProperties[keyPropName];

#>
        public virtual <#= keyPropType #> <#=keyPropName #> { get; set; }

<#            
        }//end CompositeKeyProperties.Keys
#>
        //region Required Overrides
        public override bool Equals(object obj)
        {
            var compareTo = (<#= compKeyClassName #>)obj;

<#
    var atLeastOneProposition = false;
    foreach(var k in compositeIdNode.CompositeKeyProperties.Keys){
        var equalsPropName = k;
        atLeastOneProposition = true;
#>
            if(compareTo.<#= equalsPropName #> != this.<#= equalsPropName #>){return false;}

<#
        }//end CompositeKeyProperties.Keys

        if(atLeastOneProposition){
#>
            return true;

<#
        }
        else{
#>
            return false;

<#
        }//end At Least One Proposition
#>
        }

        public override int GetHashCode()
        {
            var sumValue = 1;

<#
        foreach(var k in compositeIdNode.CompositeKeyProperties.Keys){
            var equalsPropName = k;
#>
            sumValue += (<#= equalsPropName #> != null ? <#= equalsPropName#>.GetHashCode() : 1);

<#
        }//end CompositeKeyProperties.Keys

#>
            return sumValue;
        }
        //endregion

    }//end <#= compKeyClassName #>
}//end <#= _namespace #>
