<#@ template hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="C:\Projects\31g\trunk\bin\NoFuture.Shared.dll"#>
<#@ assembly name="C:\Projects\31g\trunk\bin\NoFuture.Util.dll"#>
<#@ assembly name="C:\Projects\31g\trunk\bin\NoFuture.Hbm.dll"#>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    var paramName= NoFuture.Hbm.SortingContainers.HbmFileContent.T4_PARAM_NAME;
    var hbmFilePath = this.Host.ResolveParameterValue("","",paramName);
    var myhbm = new NoFuture.Hbm.Templates.Ef6XPoco(hbmFilePath);
#>
using System;
using System.Collections.Generic;

namespace <#= myhbm.Namespace #>
{
    [Serializable]
    public class <#= myhbm.Classname #>
    {
        #region Id

<#
    foreach(var key in myhbm.IdAsSimpleProperties.Keys)
    {
        var keyType= myhbm.IdAsSimpleProperties[key];
        var keyName= key;
#>
        public <#=            keyType #> <#=            keyName #> { get; set; }

<#
    }
#>
        #endregion

        #region ValueTypes

<#
    foreach(var prop in myhbm.SimpleProperties.Keys)
    {
        var propType= myhbm.SimpleProperties[prop];
        var propName= prop;
#>
        public <#=            propType #> <#=            propName #> { get; set; }

<#
    }
#>
        #endregion

        #region ForeignKeys

<#
    foreach(var fk in myhbm.FkProperties.Keys)
    {
        var fkType= myhbm.FkProperties[fk];
        var nfFkType = new NoFuture.Util.TypeName(fkType);
        fkType = nfFkType.FullName;
        var fkName= fk;
#>
        public virtual <#=            fkType #> <#=            fkName #> { get; set; }

<#
    }
#>
        #endregion

        #region Lists

<#
    foreach(var bag in myhbm.ListProperties.Keys)
    {

        var bagType= myhbm.ListProperties[bag];
        var nfBagType= new NoFuture.Util.TypeName(bagType);
        bagType = nfBagType.FullName;
        var bagName= bag;
#>
        public virtual ICollection<<#=            bagType #>> <#=            bagName #> { get; set; }

<#
    }
#>
        #endregion

    }//end <#=myhbm.Classname #>
}//end <#=myhbm.Namespace #>