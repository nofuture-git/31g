<#@ template hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="C:\Projects\31g\trunk\Code\NoFuture\bin\NoFuture.Shared.dll"#>
<#@ assembly name="C:\Projects\31g\trunk\Code\NoFuture\bin\NoFuture.Util.dll"#>
<#@ assembly name="C:\Projects\31g\trunk\Code\NoFuture\bin\NoFuture.Hbm.dll"#>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    var paramName= NoFuture.Hbm.SortingContainers.HbmFileContent.T4_PARAM_NAME;
    var hbmFilePath = this.Host.ResolveParameterValue("","",paramName);
    var efStruct= new NoFuture.Hbm.Templates.Ef6XFluentMapping(hbmFilePath);
#>
using System;
using System.Data.Entity;
using System.Collections.Generic;

namespace <#= efStruct.Namespace #>
{
    [Serializable]
    public class <#= efStruct.Classname #>Mapping
    {
        public void OnModelCreating(DbModelBuilder modelBuilder)
        {
            //Id 
            modelBuilder.Entity<<#= efStruct.Classname #>>()
                .ToTable("<#=efStruct.TableName #>")
                .HasKey(x => new { x.<#= efStruct.EntityKey #> });

            //ValueTypes
<#
    foreach(var prop in efStruct.EfProperties)
    {
#>
            modelBuilder.Entity<<#=                efStruct.Classname #>>()
                .Property(e => e.<#=                prop.PropName #>)
                .HasColumnName("<#=                prop.ColumnName #>")
<#
        if(prop.IsString && prop.StringLength > 0)
        {
#>
                .HasMaxLength(<#=                prop.StringLength #>)
                .IsUnicode(<#=                prop.IsUnicode.ToString().ToLower() #>)
<#
        }

        if(prop.RequiresPrecision)
        {
#>
                .HasPrecision(<#=                prop.Precision #>)                
<#
        }
#>
                ;
<#
    }
#>

            //ForeignKeys
<#
    foreach(var fk in efStruct.EfForeignKeys.Keys)
    {
        var otherTypesPropName = efStruct.EfForeignKeys[fk];
#>
            modelBuilder.Entity<<#=efStruct.Classname #>>()
                .HasRequired(e => e.<#= fk #>)
                .WithOptional(e => e.<#= otherTypesPropName #>)
                .WillCascadeOnDelete(true)
                ;
<#
    }
#>

            //Lists
<#
    foreach(var bag in efStruct.EfListProps.Keys)
    {
        var otherTypesPropName= efStruct.EfListProps[bag];
#>
            modelBuilder.Entity<<#=            efStruct.Classname #>>()
                .HasMany(e => e.<#=            bag #>)
                .WithRequired(e => e.<#=            otherTypesPropName #>)
                .WillCascadeOnDelete(true)
                ;
<#
    }
#>

        }//end OnModelCreating
    }//end <#=efStruct.Classname #>Mapping
}//end <#=efStruct.Namespace #>
