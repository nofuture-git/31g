//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Projects\31g\trunk\Code\NoFuture\Antlr\Grammers\CSharp4.g4 by ANTLR 4.6.4

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace NoFuture.Antlr.CSharp4
{
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.4")]
[System.CLSCompliant(false)]
public partial class CSharp4Parser : Parser {
	public const int
		Pp_directive=1, BYTE_ORDER_MARK=2, SINGLE_LINE_DOC_COMMENT=3, DELIMITED_DOC_COMMENT=4, 
		NEW_LINE=5, SINGLE_LINE_COMMENT=6, DELIMITED_COMMENT=7, WHITESPACE=8, 
		ABSTRACT=9, ADD=10, ALIAS=11, ARGLIST=12, AS=13, ASCENDING=14, BASE=15, 
		BOOL=16, BREAK=17, BY=18, BYTE=19, CASE=20, CATCH=21, CHAR=22, CHECKED=23, 
		CLASS=24, CONST=25, CONTINUE=26, DECIMAL=27, DEFAULT=28, DELEGATE=29, 
		DESCENDING=30, DO=31, DOUBLE=32, DYNAMIC=33, ELSE=34, ENUM=35, EQUALS=36, 
		EVENT=37, EXPLICIT=38, EXTERN=39, FALSE=40, FINALLY=41, FIXED=42, FLOAT=43, 
		FOR=44, FOREACH=45, FROM=46, GET=47, GOTO=48, GROUP=49, IF=50, IMPLICIT=51, 
		IN=52, INT=53, INTERFACE=54, INTERNAL=55, INTO=56, IS=57, JOIN=58, LET=59, 
		LOCK=60, LONG=61, NAMESPACE=62, NEW=63, NULL=64, OBJECT=65, ON=66, OPERATOR=67, 
		ORDERBY=68, OUT=69, OVERRIDE=70, PARAMS=71, PARTIAL=72, PRIVATE=73, PROTECTED=74, 
		PUBLIC=75, READONLY=76, REF=77, REMOVE=78, RETURN=79, SBYTE=80, SEALED=81, 
		SELECT=82, SET=83, SHORT=84, SIZEOF=85, STACKALLOC=86, STATIC=87, STRING=88, 
		STRUCT=89, SWITCH=90, THIS=91, THROW=92, TRUE=93, TRY=94, TYPEOF=95, UINT=96, 
		ULONG=97, UNCHECKED=98, UNSAFE=99, USHORT=100, USING=101, VIRTUAL=102, 
		VOID=103, VOLATILE=104, WHERE=105, WHILE=106, YIELD=107, IDENTIFIER=108, 
		INTEGER_LITERAL=109, LiteralAccess=110, REAL_LITERAL=111, CHARACTER_LITERAL=112, 
		STRING_LITERAL=113, OPEN_BRACE=114, CLOSE_BRACE=115, OPEN_BRACKET=116, 
		CLOSE_BRACKET=117, OPEN_PARENS=118, CLOSE_PARENS=119, DOT=120, COMMA=121, 
		COLON=122, SEMICOLON=123, PLUS=124, MINUS=125, STAR=126, DIV=127, PERCENT=128, 
		AMP=129, BITWISE_OR=130, CARET=131, BANG=132, TILDE=133, ASSIGNMENT=134, 
		LT=135, GT=136, INTERR=137, DOUBLE_COLON=138, OP_COALESCING=139, OP_INC=140, 
		OP_DEC=141, OP_AND=142, OP_OR=143, OP_PTR=144, OP_EQ=145, OP_NE=146, OP_LE=147, 
		OP_GE=148, OP_ADD_ASSIGNMENT=149, OP_SUB_ASSIGNMENT=150, OP_MULT_ASSIGNMENT=151, 
		OP_DIV_ASSIGNMENT=152, OP_MOD_ASSIGNMENT=153, OP_AND_ASSIGNMENT=154, OP_OR_ASSIGNMENT=155, 
		OP_XOR_ASSIGNMENT=156, OP_LEFT_SHIFT=157, OP_LEFT_SHIFT_ASSIGNMENT=158, 
		QUOTE=159, DOUBLE_QUOTE=160, BACK_SLASH=161, DOUBLE_BACK_SLASH=162, SHARP=163;
	public const int
		RULE_namespace_name = 0, RULE_type_name = 1, RULE_identifier = 2, RULE_namespace_or_type_name = 3, 
		RULE_type_argument_list_opt = 4, RULE_type = 5, RULE_base_type = 6, RULE_simple_type = 7, 
		RULE_numeric_type = 8, RULE_integral_type = 9, RULE_floating_point_type = 10, 
		RULE_nullable_type = 11, RULE_non_nullable_value_type = 12, RULE_reference_type = 13, 
		RULE_class_type = 14, RULE_interface_type = 15, RULE_delegate_type = 16, 
		RULE_type_argument_list = 17, RULE_type_arguments = 18, RULE_type_argument = 19, 
		RULE_type_void = 20, RULE_variable_reference = 21, RULE_argument_list = 22, 
		RULE_argument = 23, RULE_argument_name = 24, RULE_argument_value = 25, 
		RULE_primary_expression = 26, RULE_primary_expression_start = 27, RULE_bracket_expression = 28, 
		RULE_simple_name = 29, RULE_parenthesized_expression = 30, RULE_member_access = 31, 
		RULE_predefined_type = 32, RULE_expression_list = 33, RULE_this_access = 34, 
		RULE_base_access = 35, RULE_object_creation_expression = 36, RULE_object_or_collection_initializer = 37, 
		RULE_object_initializer = 38, RULE_member_initializer_list = 39, RULE_member_initializer = 40, 
		RULE_initializer_value = 41, RULE_collection_initializer = 42, RULE_element_initializer_list = 43, 
		RULE_element_initializer = 44, RULE_array_creation_expression = 45, RULE_delegate_creation_expression = 46, 
		RULE_anonymous_object_creation_expression = 47, RULE_anonymous_object_initializer = 48, 
		RULE_member_declarator_list = 49, RULE_member_declarator = 50, RULE_typeof_expression = 51, 
		RULE_unbound_type_name = 52, RULE_generic_dimension_specifier = 53, RULE_commas = 54, 
		RULE_checked_expression = 55, RULE_unchecked_expression = 56, RULE_default_value_expression = 57, 
		RULE_unary_expression = 58, RULE_scan_for_cast_generic_precedence = 59, 
		RULE_cast_disambiguation_token = 60, RULE_pre_increment_expression = 61, 
		RULE_pre_decrement_expression = 62, RULE_cast_expression = 63, RULE_multiplicative_expression = 64, 
		RULE_additive_expression = 65, RULE_shift_expression = 66, RULE_relational_expression = 67, 
		RULE_scan_for_shift_generic_precedence = 68, RULE_shift_disambiguation_token = 69, 
		RULE_isType = 70, RULE_is_disambiguation_token = 71, RULE_equality_expression = 72, 
		RULE_and_expression = 73, RULE_exclusive_or_expression = 74, RULE_inclusive_or_expression = 75, 
		RULE_conditional_and_expression = 76, RULE_conditional_or_expression = 77, 
		RULE_null_coalescing_expression = 78, RULE_conditional_expression = 79, 
		RULE_lambda_expression = 80, RULE_anonymous_method_expression = 81, RULE_anonymous_function_signature = 82, 
		RULE_explicit_anonymous_function_signature = 83, RULE_explicit_anonymous_function_parameter_list = 84, 
		RULE_explicit_anonymous_function_parameter = 85, RULE_anonymous_function_parameter_modifier = 86, 
		RULE_implicit_anonymous_function_signature = 87, RULE_implicit_anonymous_function_parameter_list = 88, 
		RULE_implicit_anonymous_function_parameter = 89, RULE_anonymous_function_body = 90, 
		RULE_query_expression = 91, RULE_from_clause = 92, RULE_query_body = 93, 
		RULE_query_body_clauses = 94, RULE_query_body_clause = 95, RULE_let_clause = 96, 
		RULE_where_clause = 97, RULE_join_clause = 98, RULE_join_into_clause = 99, 
		RULE_combined_join_clause = 100, RULE_orderby_clause = 101, RULE_orderings = 102, 
		RULE_ordering = 103, RULE_ordering_direction = 104, RULE_select_or_group_clause = 105, 
		RULE_select_clause = 106, RULE_group_clause = 107, RULE_query_continuation = 108, 
		RULE_assignment = 109, RULE_assignment_operator = 110, RULE_expression = 111, 
		RULE_non_assignment_expression = 112, RULE_constant_expression = 113, 
		RULE_boolean_expression = 114, RULE_statement = 115, RULE_embedded_statement = 116, 
		RULE_simple_embedded_statement = 117, RULE_block = 118, RULE_statement_list = 119, 
		RULE_empty_statement = 120, RULE_labeled_statement = 121, RULE_declaration_statement = 122, 
		RULE_local_variable_declaration = 123, RULE_local_variable_type = 124, 
		RULE_local_variable_declarators = 125, RULE_local_variable_declarator = 126, 
		RULE_local_variable_initializer = 127, RULE_local_constant_declaration = 128, 
		RULE_expression_statement = 129, RULE_statement_expression = 130, RULE_selection_statement = 131, 
		RULE_if_body = 132, RULE_if_statement = 133, RULE_switch_statement = 134, 
		RULE_switch_block = 135, RULE_switch_sections = 136, RULE_switch_section = 137, 
		RULE_switch_labels = 138, RULE_switch_label = 139, RULE_iteration_statement = 140, 
		RULE_while_statement = 141, RULE_do_statement = 142, RULE_for_statement = 143, 
		RULE_for_initializer = 144, RULE_for_condition = 145, RULE_for_iterator = 146, 
		RULE_statement_expression_list = 147, RULE_foreach_statement = 148, RULE_jump_statement = 149, 
		RULE_break_statement = 150, RULE_continue_statement = 151, RULE_goto_statement = 152, 
		RULE_return_statement = 153, RULE_throw_statement = 154, RULE_try_statement = 155, 
		RULE_catch_clauses = 156, RULE_specific_catch_clauses = 157, RULE_specific_catch_clause = 158, 
		RULE_general_catch_clause = 159, RULE_finally_clause = 160, RULE_checked_statement = 161, 
		RULE_unchecked_statement = 162, RULE_lock_statement = 163, RULE_using_statement = 164, 
		RULE_resource_acquisition = 165, RULE_yield_statement = 166, RULE_compilation_unit = 167, 
		RULE_namespace_declaration = 168, RULE_qualified_identifier = 169, RULE_namespace_body = 170, 
		RULE_extern_alias_directives = 171, RULE_extern_alias_directive = 172, 
		RULE_using_directives = 173, RULE_using_directive = 174, RULE_using_alias_directive = 175, 
		RULE_using_namespace_directive = 176, RULE_namespace_member_declarations = 177, 
		RULE_namespace_member_declaration = 178, RULE_type_declaration = 179, 
		RULE_qualified_alias_member = 180, RULE_class_declaration = 181, RULE_class_modifiers = 182, 
		RULE_class_modifier = 183, RULE_type_parameter_list = 184, RULE_type_parameters = 185, 
		RULE_type_parameter = 186, RULE_class_base = 187, RULE_interface_type_list = 188, 
		RULE_type_parameter_constraints_clauses = 189, RULE_type_parameter_constraints_clause = 190, 
		RULE_type_parameter_constraints = 191, RULE_primary_constraint = 192, 
		RULE_secondary_constraints = 193, RULE_constructor_constraint = 194, RULE_class_body = 195, 
		RULE_class_member_declarations = 196, RULE_class_member_declaration = 197, 
		RULE_all_member_modifiers = 198, RULE_all_member_modifier = 199, RULE_common_member_declaration = 200, 
		RULE_typed_member_declaration = 201, RULE_constant_declarators = 202, 
		RULE_constant_declarator = 203, RULE_variable_declarators = 204, RULE_variable_declarator = 205, 
		RULE_variable_initializer = 206, RULE_method_declaration = 207, RULE_method_header = 208, 
		RULE_method_modifiers = 209, RULE_method_modifier = 210, RULE_return_type = 211, 
		RULE_member_name = 212, RULE_method_body = 213, RULE_formal_parameter_list = 214, 
		RULE_fixed_parameters = 215, RULE_fixed_parameter = 216, RULE_default_argument = 217, 
		RULE_parameter_modifier = 218, RULE_parameter_array = 219, RULE_property_declaration = 220, 
		RULE_property_modifiers = 221, RULE_property_modifier = 222, RULE_accessor_declarations = 223, 
		RULE_get_accessor_declaration = 224, RULE_set_accessor_declaration = 225, 
		RULE_accessor_modifier = 226, RULE_accessor_body = 227, RULE_event_declaration = 228, 
		RULE_event_modifiers = 229, RULE_event_modifier = 230, RULE_event_accessor_declarations = 231, 
		RULE_add_accessor_declaration = 232, RULE_remove_accessor_declaration = 233, 
		RULE_indexer_declaration = 234, RULE_indexer_modifiers = 235, RULE_indexer_modifier = 236, 
		RULE_indexer_declarator = 237, RULE_operator_declaration = 238, RULE_operator_modifiers = 239, 
		RULE_operator_modifier = 240, RULE_operator_declarator = 241, RULE_unary_operator_declarator = 242, 
		RULE_overloadable_unary_operator = 243, RULE_binary_operator_declarator = 244, 
		RULE_overloadable_binary_operator = 245, RULE_overloadable_operator = 246, 
		RULE_conversion_operator_declarator = 247, RULE_operator_body = 248, RULE_constructor_declaration = 249, 
		RULE_constructor_modifiers = 250, RULE_constructor_modifier = 251, RULE_constructor_declarator = 252, 
		RULE_constructor_initializer = 253, RULE_constructor_body = 254, RULE_static_constructor_declaration = 255, 
		RULE_static_constructor_modifiers = 256, RULE_static_constructor_body = 257, 
		RULE_destructor_declaration = 258, RULE_destructor_body = 259, RULE_body = 260, 
		RULE_struct_declaration = 261, RULE_struct_modifiers = 262, RULE_struct_modifier = 263, 
		RULE_struct_interfaces = 264, RULE_struct_body = 265, RULE_struct_member_declarations = 266, 
		RULE_struct_member_declaration = 267, RULE_array_type = 268, RULE_non_array_type = 269, 
		RULE_rank_specifiers = 270, RULE_rank_specifier = 271, RULE_dim_separators = 272, 
		RULE_array_initializer = 273, RULE_variable_initializer_list = 274, RULE_interface_declaration = 275, 
		RULE_interface_modifiers = 276, RULE_interface_modifier = 277, RULE_variant_type_parameter_list = 278, 
		RULE_variant_type_parameters = 279, RULE_variance_annotation = 280, RULE_interface_base = 281, 
		RULE_interface_body = 282, RULE_interface_member_declarations = 283, RULE_interface_member_declaration = 284, 
		RULE_interface_method_declaration = 285, RULE_interface_property_declaration = 286, 
		RULE_interface_accessors = 287, RULE_interface_event_declaration = 288, 
		RULE_interface_indexer_declaration = 289, RULE_enum_declaration = 290, 
		RULE_enum_base = 291, RULE_enum_body = 292, RULE_enum_modifiers = 293, 
		RULE_enum_modifier = 294, RULE_enum_member_declarations = 295, RULE_enum_member_declaration = 296, 
		RULE_delegate_declaration = 297, RULE_delegate_modifiers = 298, RULE_delegate_modifier = 299, 
		RULE_global_attributes = 300, RULE_global_attribute_sections = 301, RULE_global_attribute_section = 302, 
		RULE_global_attribute_target_specifier = 303, RULE_global_attribute_target = 304, 
		RULE_attributes = 305, RULE_attribute_sections = 306, RULE_attribute_section = 307, 
		RULE_attribute_target_specifier = 308, RULE_attribute_target = 309, RULE_attribute_list = 310, 
		RULE_attribute = 311, RULE_attribute_name = 312, RULE_attribute_arguments = 313, 
		RULE_positional_argument_list = 314, RULE_positional_argument = 315, RULE_named_argument_list = 316, 
		RULE_named_argument = 317, RULE_attribute_argument_expression = 318, RULE_class_modifier_unsafe = 319, 
		RULE_struct_modifier_unsafe = 320, RULE_interface_modifier_unsafe = 321, 
		RULE_delegate_modifier_unsafe = 322, RULE_field_modifier_unsafe = 323, 
		RULE_method_modifier_unsafe = 324, RULE_property_modifier_unsafe = 325, 
		RULE_event_modifier_unsafe = 326, RULE_indexer_modifier_unsafe = 327, 
		RULE_operator_modifier_unsafe = 328, RULE_constructor_modifier_unsafe = 329, 
		RULE_destructor_declaration_unsafe = 330, RULE_static_constructor_modifiers_unsafe = 331, 
		RULE_embedded_statement_unsafe = 332, RULE_unsafe_statement = 333, RULE_type_unsafe = 334, 
		RULE_pointer_type = 335, RULE_unmanaged_type = 336, RULE_primary_no_array_creation_expression_unsafe = 337, 
		RULE_unary_expression_unsafe = 338, RULE_pointer_indirection_expression = 339, 
		RULE_addressof_expression = 340, RULE_sizeof_expression = 341, RULE_fixed_statement = 342, 
		RULE_fixed_pointer_declarators = 343, RULE_fixed_pointer_declarator = 344, 
		RULE_fixed_pointer_initializer = 345, RULE_struct_member_declaration_unsafe = 346, 
		RULE_fixed_size_buffer_declaration = 347, RULE_fixed_size_buffer_modifiers = 348, 
		RULE_fixed_size_buffer_modifier = 349, RULE_buffer_element_type = 350, 
		RULE_fixed_size_buffer_declarators = 351, RULE_fixed_size_buffer_declarator = 352, 
		RULE_local_variable_initializer_unsafe = 353, RULE_stackalloc_initializer = 354, 
		RULE_from_contextual_keyword = 355, RULE_let_contextual_keyword = 356, 
		RULE_where_contextual_keyword = 357, RULE_join_contextual_keyword = 358, 
		RULE_on_contextual_keyword = 359, RULE_equals_contextual_keyword = 360, 
		RULE_into_contextual_keyword = 361, RULE_orderby_contextual_keyword = 362, 
		RULE_ascending_contextual_keyword = 363, RULE_descending_contextual_keyword = 364, 
		RULE_select_contextual_keyword = 365, RULE_group_contextual_keyword = 366, 
		RULE_by_contextual_keyword = 367, RULE_partial_contextual_keyword = 368, 
		RULE_alias_contextual_keyword = 369, RULE_yield_contextual_keyword = 370, 
		RULE_get_contextual_keyword = 371, RULE_set_contextual_keyword = 372, 
		RULE_add_contextual_keyword = 373, RULE_remove_contextual_keyword = 374, 
		RULE_dynamic_contextual_keyword = 375, RULE_arglist = 376, RULE_right_arrow = 377, 
		RULE_right_shift = 378, RULE_right_shift_assignment = 379, RULE_literal = 380, 
		RULE_boolean_literal = 381, RULE_keyword = 382, RULE_class_definition = 383, 
		RULE_struct_definition = 384, RULE_interface_definition = 385, RULE_enum_definition = 386, 
		RULE_delegate_definition = 387, RULE_event_declaration2 = 388, RULE_field_declaration2 = 389, 
		RULE_property_declaration2 = 390, RULE_constant_declaration2 = 391, RULE_indexer_declaration2 = 392, 
		RULE_destructor_definition = 393, RULE_constructor_declaration2 = 394, 
		RULE_method_declaration2 = 395, RULE_method_member_name = 396, RULE_method_member_name2 = 397, 
		RULE_operator_declaration2 = 398, RULE_interface_method_declaration2 = 399, 
		RULE_interface_property_declaration2 = 400, RULE_interface_event_declaration2 = 401, 
		RULE_interface_indexer_declaration2 = 402, RULE_member_access2 = 403, 
		RULE_method_invocation2 = 404, RULE_object_creation_expression2 = 405;
	public static readonly string[] ruleNames = {
		"namespace_name", "type_name", "identifier", "namespace_or_type_name", 
		"type_argument_list_opt", "type", "base_type", "simple_type", "numeric_type", 
		"integral_type", "floating_point_type", "nullable_type", "non_nullable_value_type", 
		"reference_type", "class_type", "interface_type", "delegate_type", "type_argument_list", 
		"type_arguments", "type_argument", "type_void", "variable_reference", 
		"argument_list", "argument", "argument_name", "argument_value", "primary_expression", 
		"primary_expression_start", "bracket_expression", "simple_name", "parenthesized_expression", 
		"member_access", "predefined_type", "expression_list", "this_access", 
		"base_access", "object_creation_expression", "object_or_collection_initializer", 
		"object_initializer", "member_initializer_list", "member_initializer", 
		"initializer_value", "collection_initializer", "element_initializer_list", 
		"element_initializer", "array_creation_expression", "delegate_creation_expression", 
		"anonymous_object_creation_expression", "anonymous_object_initializer", 
		"member_declarator_list", "member_declarator", "typeof_expression", "unbound_type_name", 
		"generic_dimension_specifier", "commas", "checked_expression", "unchecked_expression", 
		"default_value_expression", "unary_expression", "scan_for_cast_generic_precedence", 
		"cast_disambiguation_token", "pre_increment_expression", "pre_decrement_expression", 
		"cast_expression", "multiplicative_expression", "additive_expression", 
		"shift_expression", "relational_expression", "scan_for_shift_generic_precedence", 
		"shift_disambiguation_token", "isType", "is_disambiguation_token", "equality_expression", 
		"and_expression", "exclusive_or_expression", "inclusive_or_expression", 
		"conditional_and_expression", "conditional_or_expression", "null_coalescing_expression", 
		"conditional_expression", "lambda_expression", "anonymous_method_expression", 
		"anonymous_function_signature", "explicit_anonymous_function_signature", 
		"explicit_anonymous_function_parameter_list", "explicit_anonymous_function_parameter", 
		"anonymous_function_parameter_modifier", "implicit_anonymous_function_signature", 
		"implicit_anonymous_function_parameter_list", "implicit_anonymous_function_parameter", 
		"anonymous_function_body", "query_expression", "from_clause", "query_body", 
		"query_body_clauses", "query_body_clause", "let_clause", "where_clause", 
		"join_clause", "join_into_clause", "combined_join_clause", "orderby_clause", 
		"orderings", "ordering", "ordering_direction", "select_or_group_clause", 
		"select_clause", "group_clause", "query_continuation", "assignment", "assignment_operator", 
		"expression", "non_assignment_expression", "constant_expression", "boolean_expression", 
		"statement", "embedded_statement", "simple_embedded_statement", "block", 
		"statement_list", "empty_statement", "labeled_statement", "declaration_statement", 
		"local_variable_declaration", "local_variable_type", "local_variable_declarators", 
		"local_variable_declarator", "local_variable_initializer", "local_constant_declaration", 
		"expression_statement", "statement_expression", "selection_statement", 
		"if_body", "if_statement", "switch_statement", "switch_block", "switch_sections", 
		"switch_section", "switch_labels", "switch_label", "iteration_statement", 
		"while_statement", "do_statement", "for_statement", "for_initializer", 
		"for_condition", "for_iterator", "statement_expression_list", "foreach_statement", 
		"jump_statement", "break_statement", "continue_statement", "goto_statement", 
		"return_statement", "throw_statement", "try_statement", "catch_clauses", 
		"specific_catch_clauses", "specific_catch_clause", "general_catch_clause", 
		"finally_clause", "checked_statement", "unchecked_statement", "lock_statement", 
		"using_statement", "resource_acquisition", "yield_statement", "compilation_unit", 
		"namespace_declaration", "qualified_identifier", "namespace_body", "extern_alias_directives", 
		"extern_alias_directive", "using_directives", "using_directive", "using_alias_directive", 
		"using_namespace_directive", "namespace_member_declarations", "namespace_member_declaration", 
		"type_declaration", "qualified_alias_member", "class_declaration", "class_modifiers", 
		"class_modifier", "type_parameter_list", "type_parameters", "type_parameter", 
		"class_base", "interface_type_list", "type_parameter_constraints_clauses", 
		"type_parameter_constraints_clause", "type_parameter_constraints", "primary_constraint", 
		"secondary_constraints", "constructor_constraint", "class_body", "class_member_declarations", 
		"class_member_declaration", "all_member_modifiers", "all_member_modifier", 
		"common_member_declaration", "typed_member_declaration", "constant_declarators", 
		"constant_declarator", "variable_declarators", "variable_declarator", 
		"variable_initializer", "method_declaration", "method_header", "method_modifiers", 
		"method_modifier", "return_type", "member_name", "method_body", "formal_parameter_list", 
		"fixed_parameters", "fixed_parameter", "default_argument", "parameter_modifier", 
		"parameter_array", "property_declaration", "property_modifiers", "property_modifier", 
		"accessor_declarations", "get_accessor_declaration", "set_accessor_declaration", 
		"accessor_modifier", "accessor_body", "event_declaration", "event_modifiers", 
		"event_modifier", "event_accessor_declarations", "add_accessor_declaration", 
		"remove_accessor_declaration", "indexer_declaration", "indexer_modifiers", 
		"indexer_modifier", "indexer_declarator", "operator_declaration", "operator_modifiers", 
		"operator_modifier", "operator_declarator", "unary_operator_declarator", 
		"overloadable_unary_operator", "binary_operator_declarator", "overloadable_binary_operator", 
		"overloadable_operator", "conversion_operator_declarator", "operator_body", 
		"constructor_declaration", "constructor_modifiers", "constructor_modifier", 
		"constructor_declarator", "constructor_initializer", "constructor_body", 
		"static_constructor_declaration", "static_constructor_modifiers", "static_constructor_body", 
		"destructor_declaration", "destructor_body", "body", "struct_declaration", 
		"struct_modifiers", "struct_modifier", "struct_interfaces", "struct_body", 
		"struct_member_declarations", "struct_member_declaration", "array_type", 
		"non_array_type", "rank_specifiers", "rank_specifier", "dim_separators", 
		"array_initializer", "variable_initializer_list", "interface_declaration", 
		"interface_modifiers", "interface_modifier", "variant_type_parameter_list", 
		"variant_type_parameters", "variance_annotation", "interface_base", "interface_body", 
		"interface_member_declarations", "interface_member_declaration", "interface_method_declaration", 
		"interface_property_declaration", "interface_accessors", "interface_event_declaration", 
		"interface_indexer_declaration", "enum_declaration", "enum_base", "enum_body", 
		"enum_modifiers", "enum_modifier", "enum_member_declarations", "enum_member_declaration", 
		"delegate_declaration", "delegate_modifiers", "delegate_modifier", "global_attributes", 
		"global_attribute_sections", "global_attribute_section", "global_attribute_target_specifier", 
		"global_attribute_target", "attributes", "attribute_sections", "attribute_section", 
		"attribute_target_specifier", "attribute_target", "attribute_list", "attribute", 
		"attribute_name", "attribute_arguments", "positional_argument_list", "positional_argument", 
		"named_argument_list", "named_argument", "attribute_argument_expression", 
		"class_modifier_unsafe", "struct_modifier_unsafe", "interface_modifier_unsafe", 
		"delegate_modifier_unsafe", "field_modifier_unsafe", "method_modifier_unsafe", 
		"property_modifier_unsafe", "event_modifier_unsafe", "indexer_modifier_unsafe", 
		"operator_modifier_unsafe", "constructor_modifier_unsafe", "destructor_declaration_unsafe", 
		"static_constructor_modifiers_unsafe", "embedded_statement_unsafe", "unsafe_statement", 
		"type_unsafe", "pointer_type", "unmanaged_type", "primary_no_array_creation_expression_unsafe", 
		"unary_expression_unsafe", "pointer_indirection_expression", "addressof_expression", 
		"sizeof_expression", "fixed_statement", "fixed_pointer_declarators", "fixed_pointer_declarator", 
		"fixed_pointer_initializer", "struct_member_declaration_unsafe", "fixed_size_buffer_declaration", 
		"fixed_size_buffer_modifiers", "fixed_size_buffer_modifier", "buffer_element_type", 
		"fixed_size_buffer_declarators", "fixed_size_buffer_declarator", "local_variable_initializer_unsafe", 
		"stackalloc_initializer", "from_contextual_keyword", "let_contextual_keyword", 
		"where_contextual_keyword", "join_contextual_keyword", "on_contextual_keyword", 
		"equals_contextual_keyword", "into_contextual_keyword", "orderby_contextual_keyword", 
		"ascending_contextual_keyword", "descending_contextual_keyword", "select_contextual_keyword", 
		"group_contextual_keyword", "by_contextual_keyword", "partial_contextual_keyword", 
		"alias_contextual_keyword", "yield_contextual_keyword", "get_contextual_keyword", 
		"set_contextual_keyword", "add_contextual_keyword", "remove_contextual_keyword", 
		"dynamic_contextual_keyword", "arglist", "right_arrow", "right_shift", 
		"right_shift_assignment", "literal", "boolean_literal", "keyword", "class_definition", 
		"struct_definition", "interface_definition", "enum_definition", "delegate_definition", 
		"event_declaration2", "field_declaration2", "property_declaration2", "constant_declaration2", 
		"indexer_declaration2", "destructor_definition", "constructor_declaration2", 
		"method_declaration2", "method_member_name", "method_member_name2", "operator_declaration2", 
		"interface_method_declaration2", "interface_property_declaration2", "interface_event_declaration2", 
		"interface_indexer_declaration2", "member_access2", "method_invocation2", 
		"object_creation_expression2"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'\\u00EF\\u00BB\\u00BF'", null, null, null, null, null, null, 
		"'abstract'", "'add'", "'alias'", "'__arglist'", "'as'", "'ascending'", 
		"'base'", "'bool'", "'break'", "'by'", "'byte'", "'case'", "'catch'", 
		"'char'", "'checked'", "'class'", "'const'", "'continue'", "'decimal'", 
		"'default'", "'delegate'", "'descending'", "'do'", "'double'", "'dynamic'", 
		"'else'", "'enum'", "'equals'", "'event'", "'explicit'", "'extern'", "'false'", 
		"'finally'", "'fixed'", "'float'", "'for'", "'foreach'", "'from'", "'get'", 
		"'goto'", "'group'", "'if'", "'implicit'", "'in'", "'int'", "'interface'", 
		"'internal'", "'into'", "'is'", "'join'", "'let'", "'lock'", "'long'", 
		"'namespace'", "'new'", "'null'", "'object'", "'on'", "'operator'", "'orderby'", 
		"'out'", "'override'", "'params'", "'partial'", "'private'", "'protected'", 
		"'public'", "'readonly'", "'ref'", "'remove'", "'return'", "'sbyte'", 
		"'sealed'", "'select'", "'set'", "'short'", "'sizeof'", "'stackalloc'", 
		"'static'", "'string'", "'struct'", "'switch'", "'this'", "'throw'", "'true'", 
		"'try'", "'typeof'", "'uint'", "'ulong'", "'unchecked'", "'unsafe'", "'ushort'", 
		"'using'", "'virtual'", "'void'", "'volatile'", "'where'", "'while'", 
		"'yield'", null, null, null, null, null, null, "'{'", "'}'", "'['", "']'", 
		"'('", "')'", "'.'", "','", "':'", "';'", "'+'", "'-'", "'*'", "'/'", 
		"'%'", "'&'", "'|'", "'^'", "'!'", "'~'", "'='", "'<'", "'>'", "'?'", 
		"'::'", "'??'", "'++'", "'--'", "'&&'", "'||'", "'->'", "'=='", "'!='", 
		"'<='", "'>='", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'|='", 
		"'^='", "'<<'", "'<<='", "'''", "'\"'", "'\\'", "'\\\\'", "'#'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Pp_directive", "BYTE_ORDER_MARK", "SINGLE_LINE_DOC_COMMENT", "DELIMITED_DOC_COMMENT", 
		"NEW_LINE", "SINGLE_LINE_COMMENT", "DELIMITED_COMMENT", "WHITESPACE", 
		"ABSTRACT", "ADD", "ALIAS", "ARGLIST", "AS", "ASCENDING", "BASE", "BOOL", 
		"BREAK", "BY", "BYTE", "CASE", "CATCH", "CHAR", "CHECKED", "CLASS", "CONST", 
		"CONTINUE", "DECIMAL", "DEFAULT", "DELEGATE", "DESCENDING", "DO", "DOUBLE", 
		"DYNAMIC", "ELSE", "ENUM", "EQUALS", "EVENT", "EXPLICIT", "EXTERN", "FALSE", 
		"FINALLY", "FIXED", "FLOAT", "FOR", "FOREACH", "FROM", "GET", "GOTO", 
		"GROUP", "IF", "IMPLICIT", "IN", "INT", "INTERFACE", "INTERNAL", "INTO", 
		"IS", "JOIN", "LET", "LOCK", "LONG", "NAMESPACE", "NEW", "NULL", "OBJECT", 
		"ON", "OPERATOR", "ORDERBY", "OUT", "OVERRIDE", "PARAMS", "PARTIAL", "PRIVATE", 
		"PROTECTED", "PUBLIC", "READONLY", "REF", "REMOVE", "RETURN", "SBYTE", 
		"SEALED", "SELECT", "SET", "SHORT", "SIZEOF", "STACKALLOC", "STATIC", 
		"STRING", "STRUCT", "SWITCH", "THIS", "THROW", "TRUE", "TRY", "TYPEOF", 
		"UINT", "ULONG", "UNCHECKED", "UNSAFE", "USHORT", "USING", "VIRTUAL", 
		"VOID", "VOLATILE", "WHERE", "WHILE", "YIELD", "IDENTIFIER", "INTEGER_LITERAL", 
		"LiteralAccess", "REAL_LITERAL", "CHARACTER_LITERAL", "STRING_LITERAL", 
		"OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PARENS", 
		"CLOSE_PARENS", "DOT", "COMMA", "COLON", "SEMICOLON", "PLUS", "MINUS", 
		"STAR", "DIV", "PERCENT", "AMP", "BITWISE_OR", "CARET", "BANG", "TILDE", 
		"ASSIGNMENT", "LT", "GT", "INTERR", "DOUBLE_COLON", "OP_COALESCING", "OP_INC", 
		"OP_DEC", "OP_AND", "OP_OR", "OP_PTR", "OP_EQ", "OP_NE", "OP_LE", "OP_GE", 
		"OP_ADD_ASSIGNMENT", "OP_SUB_ASSIGNMENT", "OP_MULT_ASSIGNMENT", "OP_DIV_ASSIGNMENT", 
		"OP_MOD_ASSIGNMENT", "OP_AND_ASSIGNMENT", "OP_OR_ASSIGNMENT", "OP_XOR_ASSIGNMENT", 
		"OP_LEFT_SHIFT", "OP_LEFT_SHIFT_ASSIGNMENT", "QUOTE", "DOUBLE_QUOTE", 
		"BACK_SLASH", "DOUBLE_BACK_SLASH", "SHARP"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CSharp4.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public CSharp4Parser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class Namespace_nameContext : ParserRuleContext {
		public Namespace_or_type_nameContext namespace_or_type_name() {
			return GetRuleContext<Namespace_or_type_nameContext>(0);
		}
		public Namespace_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterNamespace_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitNamespace_name(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_nameContext namespace_name() {
		Namespace_nameContext _localctx = new Namespace_nameContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_namespace_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 812; namespace_or_type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_nameContext : ParserRuleContext {
		public Namespace_or_type_nameContext namespace_or_type_name() {
			return GetRuleContext<Namespace_or_type_nameContext>(0);
		}
		public Type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterType_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitType_name(this);
		}
	}

	[RuleVersion(0)]
	public Type_nameContext type_name() {
		Type_nameContext _localctx = new Type_nameContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_type_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 814; namespace_or_type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CSharp4Parser.IDENTIFIER, 0); }
		public ITerminalNode FROM() { return GetToken(CSharp4Parser.FROM, 0); }
		public ITerminalNode LET() { return GetToken(CSharp4Parser.LET, 0); }
		public ITerminalNode WHERE() { return GetToken(CSharp4Parser.WHERE, 0); }
		public ITerminalNode JOIN() { return GetToken(CSharp4Parser.JOIN, 0); }
		public ITerminalNode ON() { return GetToken(CSharp4Parser.ON, 0); }
		public ITerminalNode EQUALS() { return GetToken(CSharp4Parser.EQUALS, 0); }
		public ITerminalNode INTO() { return GetToken(CSharp4Parser.INTO, 0); }
		public ITerminalNode ORDERBY() { return GetToken(CSharp4Parser.ORDERBY, 0); }
		public ITerminalNode ASCENDING() { return GetToken(CSharp4Parser.ASCENDING, 0); }
		public ITerminalNode DESCENDING() { return GetToken(CSharp4Parser.DESCENDING, 0); }
		public ITerminalNode SELECT() { return GetToken(CSharp4Parser.SELECT, 0); }
		public ITerminalNode GROUP() { return GetToken(CSharp4Parser.GROUP, 0); }
		public ITerminalNode BY() { return GetToken(CSharp4Parser.BY, 0); }
		public ITerminalNode PARTIAL() { return GetToken(CSharp4Parser.PARTIAL, 0); }
		public ITerminalNode ALIAS() { return GetToken(CSharp4Parser.ALIAS, 0); }
		public ITerminalNode YIELD() { return GetToken(CSharp4Parser.YIELD, 0); }
		public ITerminalNode GET() { return GetToken(CSharp4Parser.GET, 0); }
		public ITerminalNode SET() { return GetToken(CSharp4Parser.SET, 0); }
		public ITerminalNode ADD() { return GetToken(CSharp4Parser.ADD, 0); }
		public ITerminalNode REMOVE() { return GetToken(CSharp4Parser.REMOVE, 0); }
		public ITerminalNode DYNAMIC() { return GetToken(CSharp4Parser.DYNAMIC, 0); }
		public ITerminalNode ARGLIST() { return GetToken(CSharp4Parser.ARGLIST, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 816;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BY) | (1L << DESCENDING) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INTO) | (1L << JOIN) | (1L << LET))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (ON - 66)) | (1L << (ORDERBY - 66)) | (1L << (PARTIAL - 66)) | (1L << (REMOVE - 66)) | (1L << (SELECT - 66)) | (1L << (SET - 66)) | (1L << (WHERE - 66)) | (1L << (YIELD - 66)) | (1L << (IDENTIFIER - 66)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_or_type_nameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public Type_argument_list_optContext[] type_argument_list_opt() {
			return GetRuleContexts<Type_argument_list_optContext>();
		}
		public Type_argument_list_optContext type_argument_list_opt(int i) {
			return GetRuleContext<Type_argument_list_optContext>(i);
		}
		public Qualified_alias_memberContext qualified_alias_member() {
			return GetRuleContext<Qualified_alias_memberContext>(0);
		}
		public ITerminalNode[] DOT() { return GetTokens(CSharp4Parser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(CSharp4Parser.DOT, i);
		}
		public Namespace_or_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_or_type_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterNamespace_or_type_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitNamespace_or_type_name(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_or_type_nameContext namespace_or_type_name() {
		Namespace_or_type_nameContext _localctx = new Namespace_or_type_nameContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_namespace_or_type_name);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 822;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				State = 818; identifier();
				State = 819; type_argument_list_opt();
				}
				break;

			case 2:
				{
				State = 821; qualified_alias_member();
				}
				break;
			}
			State = 830;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 824; Match(DOT);
					State = 825; identifier();
					State = 826; type_argument_list_opt();
					}
					} 
				}
				State = 832;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_argument_list_optContext : ParserRuleContext {
		public Type_argument_listContext type_argument_list() {
			return GetRuleContext<Type_argument_listContext>(0);
		}
		public Type_argument_list_optContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_argument_list_opt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterType_argument_list_opt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitType_argument_list_opt(this);
		}
	}

	[RuleVersion(0)]
	public Type_argument_list_optContext type_argument_list_opt() {
		Type_argument_list_optContext _localctx = new Type_argument_list_optContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_type_argument_list_opt);
		try {
			State = 835;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 833; type_argument_list();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public Base_typeContext base_type() {
			return GetRuleContext<Base_typeContext>(0);
		}
		public ITerminalNode[] INTERR() { return GetTokens(CSharp4Parser.INTERR); }
		public ITerminalNode INTERR(int i) {
			return GetToken(CSharp4Parser.INTERR, i);
		}
		public Rank_specifierContext[] rank_specifier() {
			return GetRuleContexts<Rank_specifierContext>();
		}
		public Rank_specifierContext rank_specifier(int i) {
			return GetRuleContext<Rank_specifierContext>(i);
		}
		public ITerminalNode[] STAR() { return GetTokens(CSharp4Parser.STAR); }
		public ITerminalNode STAR(int i) {
			return GetToken(CSharp4Parser.STAR, i);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitType(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_type);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 837; base_type();
			State = 843;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 841;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case INTERR:
						{
						State = 838; Match(INTERR);
						}
						break;
					case OPEN_BRACKET:
						{
						State = 839; rank_specifier();
						}
						break;
					case STAR:
						{
						State = 840; Match(STAR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 845;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Base_typeContext : ParserRuleContext {
		public Simple_typeContext simple_type() {
			return GetRuleContext<Simple_typeContext>(0);
		}
		public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(CSharp4Parser.VOID, 0); }
		public ITerminalNode STAR() { return GetToken(CSharp4Parser.STAR, 0); }
		public Base_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_base_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterBase_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitBase_type(this);
		}
	}

	[RuleVersion(0)]
	public Base_typeContext base_type() {
		Base_typeContext _localctx = new Base_typeContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_base_type);
		try {
			State = 850;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case BOOL:
			case BYTE:
			case CHAR:
			case DECIMAL:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SBYTE:
			case SHORT:
			case UINT:
			case ULONG:
			case USHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 846; simple_type();
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BY:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case STRING:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 847; class_type();
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 848; Match(VOID);
				State = 849; Match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_typeContext : ParserRuleContext {
		public Numeric_typeContext numeric_type() {
			return GetRuleContext<Numeric_typeContext>(0);
		}
		public ITerminalNode BOOL() { return GetToken(CSharp4Parser.BOOL, 0); }
		public Simple_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterSimple_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitSimple_type(this);
		}
	}

	[RuleVersion(0)]
	public Simple_typeContext simple_type() {
		Simple_typeContext _localctx = new Simple_typeContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_simple_type);
		try {
			State = 854;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case BYTE:
			case CHAR:
			case DECIMAL:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SBYTE:
			case SHORT:
			case UINT:
			case ULONG:
			case USHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 852; numeric_type();
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 853; Match(BOOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_typeContext : ParserRuleContext {
		public Integral_typeContext integral_type() {
			return GetRuleContext<Integral_typeContext>(0);
		}
		public Floating_point_typeContext floating_point_type() {
			return GetRuleContext<Floating_point_typeContext>(0);
		}
		public ITerminalNode DECIMAL() { return GetToken(CSharp4Parser.DECIMAL, 0); }
		public Numeric_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterNumeric_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitNumeric_type(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_typeContext numeric_type() {
		Numeric_typeContext _localctx = new Numeric_typeContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_numeric_type);
		try {
			State = 859;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case BYTE:
			case CHAR:
			case INT:
			case LONG:
			case SBYTE:
			case SHORT:
			case UINT:
			case ULONG:
			case USHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 856; integral_type();
				}
				break;
			case DOUBLE:
			case FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 857; floating_point_type();
				}
				break;
			case DECIMAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 858; Match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Integral_typeContext : ParserRuleContext {
		public ITerminalNode SBYTE() { return GetToken(CSharp4Parser.SBYTE, 0); }
		public ITerminalNode BYTE() { return GetToken(CSharp4Parser.BYTE, 0); }
		public ITerminalNode SHORT() { return GetToken(CSharp4Parser.SHORT, 0); }
		public ITerminalNode USHORT() { return GetToken(CSharp4Parser.USHORT, 0); }
		public ITerminalNode INT() { return GetToken(CSharp4Parser.INT, 0); }
		public ITerminalNode UINT() { return GetToken(CSharp4Parser.UINT, 0); }
		public ITerminalNode LONG() { return GetToken(CSharp4Parser.LONG, 0); }
		public ITerminalNode ULONG() { return GetToken(CSharp4Parser.ULONG, 0); }
		public ITerminalNode CHAR() { return GetToken(CSharp4Parser.CHAR, 0); }
		public Integral_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integral_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterIntegral_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitIntegral_type(this);
		}
	}

	[RuleVersion(0)]
	public Integral_typeContext integral_type() {
		Integral_typeContext _localctx = new Integral_typeContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_integral_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 861;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BYTE) | (1L << CHAR) | (1L << INT) | (1L << LONG))) != 0) || ((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & ((1L << (SBYTE - 80)) | (1L << (SHORT - 80)) | (1L << (UINT - 80)) | (1L << (ULONG - 80)) | (1L << (USHORT - 80)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Floating_point_typeContext : ParserRuleContext {
		public ITerminalNode FLOAT() { return GetToken(CSharp4Parser.FLOAT, 0); }
		public ITerminalNode DOUBLE() { return GetToken(CSharp4Parser.DOUBLE, 0); }
		public Floating_point_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floating_point_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterFloating_point_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitFloating_point_type(this);
		}
	}

	[RuleVersion(0)]
	public Floating_point_typeContext floating_point_type() {
		Floating_point_typeContext _localctx = new Floating_point_typeContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_floating_point_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 863;
			_la = _input.La(1);
			if ( !(_la==DOUBLE || _la==FLOAT) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nullable_typeContext : ParserRuleContext {
		public Non_nullable_value_typeContext non_nullable_value_type() {
			return GetRuleContext<Non_nullable_value_typeContext>(0);
		}
		public ITerminalNode INTERR() { return GetToken(CSharp4Parser.INTERR, 0); }
		public Nullable_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullable_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterNullable_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitNullable_type(this);
		}
	}

	[RuleVersion(0)]
	public Nullable_typeContext nullable_type() {
		Nullable_typeContext _localctx = new Nullable_typeContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_nullable_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 865; non_nullable_value_type();
			State = 866; Match(INTERR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Non_nullable_value_typeContext : ParserRuleContext {
		public Base_typeContext base_type() {
			return GetRuleContext<Base_typeContext>(0);
		}
		public Rank_specifierContext[] rank_specifier() {
			return GetRuleContexts<Rank_specifierContext>();
		}
		public Rank_specifierContext rank_specifier(int i) {
			return GetRuleContext<Rank_specifierContext>(i);
		}
		public ITerminalNode[] STAR() { return GetTokens(CSharp4Parser.STAR); }
		public ITerminalNode STAR(int i) {
			return GetToken(CSharp4Parser.STAR, i);
		}
		public Non_nullable_value_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_non_nullable_value_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterNon_nullable_value_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitNon_nullable_value_type(this);
		}
	}

	[RuleVersion(0)]
	public Non_nullable_value_typeContext non_nullable_value_type() {
		Non_nullable_value_typeContext _localctx = new Non_nullable_value_typeContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_non_nullable_value_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 868; base_type();
			State = 873;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==OPEN_BRACKET || _la==STAR) {
				{
				State = 871;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case OPEN_BRACKET:
					{
					State = 869; rank_specifier();
					}
					break;
				case STAR:
					{
					State = 870; Match(STAR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 875;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reference_typeContext : ParserRuleContext {
		public Simple_typeContext simple_type() {
			return GetRuleContext<Simple_typeContext>(0);
		}
		public Rank_specifierContext[] rank_specifier() {
			return GetRuleContexts<Rank_specifierContext>();
		}
		public Rank_specifierContext rank_specifier(int i) {
			return GetRuleContext<Rank_specifierContext>(i);
		}
		public ITerminalNode[] STAR() { return GetTokens(CSharp4Parser.STAR); }
		public ITerminalNode STAR(int i) {
			return GetToken(CSharp4Parser.STAR, i);
		}
		public ITerminalNode[] INTERR() { return GetTokens(CSharp4Parser.INTERR); }
		public ITerminalNode INTERR(int i) {
			return GetToken(CSharp4Parser.INTERR, i);
		}
		public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(CSharp4Parser.VOID, 0); }
		public Reference_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reference_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterReference_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitReference_type(this);
		}
	}

	[RuleVersion(0)]
	public Reference_typeContext reference_type() {
		Reference_typeContext _localctx = new Reference_typeContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_reference_type);
		int _la;
		try {
			int _alt;
			State = 931;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case BOOL:
			case BYTE:
			case CHAR:
			case DECIMAL:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SBYTE:
			case SHORT:
			case UINT:
			case ULONG:
			case USHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 876; simple_type();
				State = 886;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 880;
						_errHandler.Sync(this);
						_la = _input.La(1);
						while (_la==STAR || _la==INTERR) {
							{
							{
							State = 877;
							_la = _input.La(1);
							if ( !(_la==STAR || _la==INTERR) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							}
							State = 882;
							_errHandler.Sync(this);
							_la = _input.La(1);
						}
						State = 883; rank_specifier();
						}
						} 
					}
					State = 888;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
				}
				State = 892;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==STAR || _la==INTERR) {
					{
					{
					State = 889;
					_la = _input.La(1);
					if ( !(_la==STAR || _la==INTERR) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					}
					State = 894;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 895; rank_specifier();
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BY:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case STRING:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 897; class_type();
				State = 907;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & ((1L << (OPEN_BRACKET - 116)) | (1L << (STAR - 116)) | (1L << (INTERR - 116)))) != 0)) {
					{
					{
					State = 901;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==STAR || _la==INTERR) {
						{
						{
						State = 898;
						_la = _input.La(1);
						if ( !(_la==STAR || _la==INTERR) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						}
						State = 903;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 904; rank_specifier();
					}
					}
					State = 909;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 910; Match(VOID);
				State = 911; Match(STAR);
				State = 921;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 915;
						_errHandler.Sync(this);
						_la = _input.La(1);
						while (_la==STAR || _la==INTERR) {
							{
							{
							State = 912;
							_la = _input.La(1);
							if ( !(_la==STAR || _la==INTERR) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							}
							State = 917;
							_errHandler.Sync(this);
							_la = _input.La(1);
						}
						State = 918; rank_specifier();
						}
						} 
					}
					State = 923;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
				}
				State = 927;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==STAR || _la==INTERR) {
					{
					{
					State = 924;
					_la = _input.La(1);
					if ( !(_la==STAR || _la==INTERR) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					}
					State = 929;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 930; rank_specifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_typeContext : ParserRuleContext {
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public ITerminalNode OBJECT() { return GetToken(CSharp4Parser.OBJECT, 0); }
		public Dynamic_contextual_keywordContext dynamic_contextual_keyword() {
			return GetRuleContext<Dynamic_contextual_keywordContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(CSharp4Parser.STRING, 0); }
		public Class_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterClass_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitClass_type(this);
		}
	}

	[RuleVersion(0)]
	public Class_typeContext class_type() {
		Class_typeContext _localctx = new Class_typeContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_class_type);
		try {
			State = 937;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 933; type_name();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 934; Match(OBJECT);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 935; dynamic_contextual_keyword();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 936; Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_typeContext : ParserRuleContext {
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Interface_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterInterface_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitInterface_type(this);
		}
	}

	[RuleVersion(0)]
	public Interface_typeContext interface_type() {
		Interface_typeContext _localctx = new Interface_typeContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_interface_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 939; type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delegate_typeContext : ParserRuleContext {
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Delegate_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegate_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterDelegate_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitDelegate_type(this);
		}
	}

	[RuleVersion(0)]
	public Delegate_typeContext delegate_type() {
		Delegate_typeContext _localctx = new Delegate_typeContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_delegate_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 941; type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_argument_listContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(CSharp4Parser.LT, 0); }
		public Type_argumentsContext type_arguments() {
			return GetRuleContext<Type_argumentsContext>(0);
		}
		public ITerminalNode GT() { return GetToken(CSharp4Parser.GT, 0); }
		public Type_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_argument_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterType_argument_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitType_argument_list(this);
		}
	}

	[RuleVersion(0)]
	public Type_argument_listContext type_argument_list() {
		Type_argument_listContext _localctx = new Type_argument_listContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_type_argument_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 943; Match(LT);
			State = 944; type_arguments();
			State = 945; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_argumentsContext : ParserRuleContext {
		public Type_argumentContext[] type_argument() {
			return GetRuleContexts<Type_argumentContext>();
		}
		public Type_argumentContext type_argument(int i) {
			return GetRuleContext<Type_argumentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Type_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterType_arguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitType_arguments(this);
		}
	}

	[RuleVersion(0)]
	public Type_argumentsContext type_arguments() {
		Type_argumentsContext _localctx = new Type_argumentsContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_type_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 947; type_argument();
			State = 952;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 948; Match(COMMA);
				State = 949; type_argument();
				}
				}
				State = 954;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_argumentContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Type_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterType_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitType_argument(this);
		}
	}

	[RuleVersion(0)]
	public Type_argumentContext type_argument() {
		Type_argumentContext _localctx = new Type_argumentContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_type_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 955; type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_voidContext : ParserRuleContext {
		public ITerminalNode VOID() { return GetToken(CSharp4Parser.VOID, 0); }
		public Type_voidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_void; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterType_void(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitType_void(this);
		}
	}

	[RuleVersion(0)]
	public Type_voidContext type_void() {
		Type_voidContext _localctx = new Type_voidContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_type_void);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 957; Match(VOID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_referenceContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Variable_referenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_reference; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterVariable_reference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitVariable_reference(this);
		}
	}

	[RuleVersion(0)]
	public Variable_referenceContext variable_reference() {
		Variable_referenceContext _localctx = new Variable_referenceContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_variable_reference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 959; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_listContext : ParserRuleContext {
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterArgument_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitArgument_list(this);
		}
	}

	[RuleVersion(0)]
	public Argument_listContext argument_list() {
		Argument_listContext _localctx = new Argument_listContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 961; argument();
			State = 966;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 962; Match(COMMA);
				State = 963; argument();
				}
				}
				State = 968;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public Argument_valueContext argument_value() {
			return GetRuleContext<Argument_valueContext>(0);
		}
		public Argument_nameContext argument_name() {
			return GetRuleContext<Argument_nameContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 970;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,22,_ctx) ) {
			case 1:
				{
				State = 969; argument_name();
				}
				break;
			}
			State = 972; argument_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(CSharp4Parser.COLON, 0); }
		public Argument_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterArgument_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitArgument_name(this);
		}
	}

	[RuleVersion(0)]
	public Argument_nameContext argument_name() {
		Argument_nameContext _localctx = new Argument_nameContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_argument_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 974; identifier();
			State = 975; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_valueContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode REF() { return GetToken(CSharp4Parser.REF, 0); }
		public Variable_referenceContext variable_reference() {
			return GetRuleContext<Variable_referenceContext>(0);
		}
		public ITerminalNode OUT() { return GetToken(CSharp4Parser.OUT, 0); }
		public Argument_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterArgument_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitArgument_value(this);
		}
	}

	[RuleVersion(0)]
	public Argument_valueContext argument_value() {
		Argument_valueContext _localctx = new Argument_valueContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_argument_value);
		try {
			State = 982;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case USHORT:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 977; expression();
				}
				break;
			case REF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 978; Match(REF);
				State = 979; variable_reference();
				}
				break;
			case OUT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 980; Match(OUT);
				State = 981; variable_reference();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_expressionContext : ParserRuleContext {
		public Primary_expression_startContext pe;
		public Primary_expression_startContext primary_expression_start() {
			return GetRuleContext<Primary_expression_startContext>(0);
		}
		public Bracket_expressionContext[] bracket_expression() {
			return GetRuleContexts<Bracket_expressionContext>();
		}
		public Bracket_expressionContext bracket_expression(int i) {
			return GetRuleContext<Bracket_expressionContext>(i);
		}
		public Member_access2Context[] member_access2() {
			return GetRuleContexts<Member_access2Context>();
		}
		public Member_access2Context member_access2(int i) {
			return GetRuleContext<Member_access2Context>(i);
		}
		public Method_invocation2Context[] method_invocation2() {
			return GetRuleContexts<Method_invocation2Context>();
		}
		public Method_invocation2Context method_invocation2(int i) {
			return GetRuleContext<Method_invocation2Context>(i);
		}
		public ITerminalNode[] OP_INC() { return GetTokens(CSharp4Parser.OP_INC); }
		public ITerminalNode OP_INC(int i) {
			return GetToken(CSharp4Parser.OP_INC, i);
		}
		public ITerminalNode[] OP_DEC() { return GetTokens(CSharp4Parser.OP_DEC); }
		public ITerminalNode OP_DEC(int i) {
			return GetToken(CSharp4Parser.OP_DEC, i);
		}
		public ITerminalNode[] OP_PTR() { return GetTokens(CSharp4Parser.OP_PTR); }
		public ITerminalNode OP_PTR(int i) {
			return GetToken(CSharp4Parser.OP_PTR, i);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public Primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterPrimary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitPrimary_expression(this);
		}
	}

	[RuleVersion(0)]
	public Primary_expressionContext primary_expression() {
		Primary_expressionContext _localctx = new Primary_expressionContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_primary_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 984; _localctx.pe = primary_expression_start();
			State = 988;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==OPEN_BRACKET) {
				{
				{
				State = 985; bracket_expression();
				}
				}
				State = 990;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1007;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 118)) & ~0x3f) == 0 && ((1L << (_la - 118)) & ((1L << (OPEN_PARENS - 118)) | (1L << (DOT - 118)) | (1L << (OP_INC - 118)) | (1L << (OP_DEC - 118)) | (1L << (OP_PTR - 118)))) != 0)) {
				{
				{
				State = 997;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case DOT:
					{
					State = 991; member_access2();
					}
					break;
				case OPEN_PARENS:
					{
					State = 992; method_invocation2();
					}
					break;
				case OP_INC:
					{
					State = 993; Match(OP_INC);
					}
					break;
				case OP_DEC:
					{
					State = 994; Match(OP_DEC);
					}
					break;
				case OP_PTR:
					{
					State = 995; Match(OP_PTR);
					State = 996; identifier();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1002;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==OPEN_BRACKET) {
					{
					{
					State = 999; bracket_expression();
					}
					}
					State = 1004;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				}
				State = 1009;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_expression_startContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public Simple_nameContext simple_name() {
			return GetRuleContext<Simple_nameContext>(0);
		}
		public Parenthesized_expressionContext parenthesized_expression() {
			return GetRuleContext<Parenthesized_expressionContext>(0);
		}
		public Predefined_typeContext predefined_type() {
			return GetRuleContext<Predefined_typeContext>(0);
		}
		public Qualified_alias_memberContext qualified_alias_member() {
			return GetRuleContext<Qualified_alias_memberContext>(0);
		}
		public This_accessContext this_access() {
			return GetRuleContext<This_accessContext>(0);
		}
		public Base_accessContext base_access() {
			return GetRuleContext<Base_accessContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(CSharp4Parser.NEW, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Anonymous_object_initializerContext anonymous_object_initializer() {
			return GetRuleContext<Anonymous_object_initializerContext>(0);
		}
		public Rank_specifierContext rank_specifier() {
			return GetRuleContext<Rank_specifierContext>(0);
		}
		public Array_initializerContext array_initializer() {
			return GetRuleContext<Array_initializerContext>(0);
		}
		public Object_creation_expression2Context object_creation_expression2() {
			return GetRuleContext<Object_creation_expression2Context>(0);
		}
		public Object_or_collection_initializerContext object_or_collection_initializer() {
			return GetRuleContext<Object_or_collection_initializerContext>(0);
		}
		public ITerminalNode OPEN_BRACKET() { return GetToken(CSharp4Parser.OPEN_BRACKET, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharp4Parser.CLOSE_BRACKET, 0); }
		public Rank_specifiersContext rank_specifiers() {
			return GetRuleContext<Rank_specifiersContext>(0);
		}
		public Typeof_expressionContext typeof_expression() {
			return GetRuleContext<Typeof_expressionContext>(0);
		}
		public Checked_expressionContext checked_expression() {
			return GetRuleContext<Checked_expressionContext>(0);
		}
		public Unchecked_expressionContext unchecked_expression() {
			return GetRuleContext<Unchecked_expressionContext>(0);
		}
		public Default_value_expressionContext default_value_expression() {
			return GetRuleContext<Default_value_expressionContext>(0);
		}
		public Anonymous_method_expressionContext anonymous_method_expression() {
			return GetRuleContext<Anonymous_method_expressionContext>(0);
		}
		public Sizeof_expressionContext sizeof_expression() {
			return GetRuleContext<Sizeof_expressionContext>(0);
		}
		public Primary_expression_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_expression_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterPrimary_expression_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitPrimary_expression_start(this);
		}
	}

	[RuleVersion(0)]
	public Primary_expression_startContext primary_expression_start() {
		Primary_expression_startContext _localctx = new Primary_expression_startContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_primary_expression_start);
		int _la;
		try {
			State = 1047;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,32,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1010; literal();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1011; simple_name();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1012; parenthesized_expression();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1013; predefined_type();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1014; qualified_alias_member();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1015; this_access();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1016; base_access();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1017; Match(NEW);
				State = 1039;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case ADD:
				case ALIAS:
				case ARGLIST:
				case ASCENDING:
				case BOOL:
				case BY:
				case BYTE:
				case CHAR:
				case DECIMAL:
				case DESCENDING:
				case DOUBLE:
				case DYNAMIC:
				case EQUALS:
				case FLOAT:
				case FROM:
				case GET:
				case GROUP:
				case INT:
				case INTO:
				case JOIN:
				case LET:
				case LONG:
				case OBJECT:
				case ON:
				case ORDERBY:
				case PARTIAL:
				case REMOVE:
				case SBYTE:
				case SELECT:
				case SET:
				case SHORT:
				case STRING:
				case UINT:
				case ULONG:
				case USHORT:
				case VOID:
				case WHERE:
				case YIELD:
				case IDENTIFIER:
					{
					State = 1018; type();
					State = 1033;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,30,_ctx) ) {
					case 1:
						{
						State = 1019; object_creation_expression2();
						}
						break;

					case 2:
						{
						State = 1020; object_or_collection_initializer();
						}
						break;

					case 3:
						{
						State = 1021; Match(OPEN_BRACKET);
						State = 1022; expression_list();
						State = 1023; Match(CLOSE_BRACKET);
						State = 1025;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
						case 1:
							{
							State = 1024; rank_specifiers();
							}
							break;
						}
						State = 1028;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==OPEN_BRACE) {
							{
							State = 1027; array_initializer();
							}
						}

						}
						break;

					case 4:
						{
						State = 1030; rank_specifiers();
						State = 1031; array_initializer();
						}
						break;
					}
					}
					break;
				case OPEN_BRACE:
					{
					State = 1035; anonymous_object_initializer();
					}
					break;
				case OPEN_BRACKET:
					{
					State = 1036; rank_specifier();
					State = 1037; array_initializer();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1041; typeof_expression();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1042; checked_expression();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1043; unchecked_expression();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1044; default_value_expression();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1045; anonymous_method_expression();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1046; sizeof_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bracket_expressionContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACKET() { return GetToken(CSharp4Parser.OPEN_BRACKET, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharp4Parser.CLOSE_BRACKET, 0); }
		public Bracket_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracket_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterBracket_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitBracket_expression(this);
		}
	}

	[RuleVersion(0)]
	public Bracket_expressionContext bracket_expression() {
		Bracket_expressionContext _localctx = new Bracket_expressionContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_bracket_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1049; Match(OPEN_BRACKET);
			State = 1050; expression_list();
			State = 1051; Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Type_argument_list_optContext type_argument_list_opt() {
			return GetRuleContext<Type_argument_list_optContext>(0);
		}
		public Simple_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterSimple_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitSimple_name(this);
		}
	}

	[RuleVersion(0)]
	public Simple_nameContext simple_name() {
		Simple_nameContext _localctx = new Simple_nameContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_simple_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1053; identifier();
			State = 1054; type_argument_list_opt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parenthesized_expressionContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Parenthesized_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesized_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterParenthesized_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitParenthesized_expression(this);
		}
	}

	[RuleVersion(0)]
	public Parenthesized_expressionContext parenthesized_expression() {
		Parenthesized_expressionContext _localctx = new Parenthesized_expressionContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_parenthesized_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1056; Match(OPEN_PARENS);
			State = 1057; expression();
			State = 1058; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_accessContext : ParserRuleContext {
		public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		public Member_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_access; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterMember_access(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitMember_access(this);
		}
	}

	[RuleVersion(0)]
	public Member_accessContext member_access() {
		Member_accessContext _localctx = new Member_accessContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_member_access);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1060; primary_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Predefined_typeContext : ParserRuleContext {
		public ITerminalNode BOOL() { return GetToken(CSharp4Parser.BOOL, 0); }
		public ITerminalNode BYTE() { return GetToken(CSharp4Parser.BYTE, 0); }
		public ITerminalNode CHAR() { return GetToken(CSharp4Parser.CHAR, 0); }
		public ITerminalNode DECIMAL() { return GetToken(CSharp4Parser.DECIMAL, 0); }
		public ITerminalNode DOUBLE() { return GetToken(CSharp4Parser.DOUBLE, 0); }
		public ITerminalNode FLOAT() { return GetToken(CSharp4Parser.FLOAT, 0); }
		public ITerminalNode INT() { return GetToken(CSharp4Parser.INT, 0); }
		public ITerminalNode LONG() { return GetToken(CSharp4Parser.LONG, 0); }
		public ITerminalNode OBJECT() { return GetToken(CSharp4Parser.OBJECT, 0); }
		public ITerminalNode SBYTE() { return GetToken(CSharp4Parser.SBYTE, 0); }
		public ITerminalNode SHORT() { return GetToken(CSharp4Parser.SHORT, 0); }
		public ITerminalNode STRING() { return GetToken(CSharp4Parser.STRING, 0); }
		public ITerminalNode UINT() { return GetToken(CSharp4Parser.UINT, 0); }
		public ITerminalNode ULONG() { return GetToken(CSharp4Parser.ULONG, 0); }
		public ITerminalNode USHORT() { return GetToken(CSharp4Parser.USHORT, 0); }
		public Predefined_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predefined_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterPredefined_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitPredefined_type(this);
		}
	}

	[RuleVersion(0)]
	public Predefined_typeContext predefined_type() {
		Predefined_typeContext _localctx = new Predefined_typeContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_predefined_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1062;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOL) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (SBYTE - 65)) | (1L << (SHORT - 65)) | (1L << (STRING - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (USHORT - 65)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_listContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterExpression_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitExpression_list(this);
		}
	}

	[RuleVersion(0)]
	public Expression_listContext expression_list() {
		Expression_listContext _localctx = new Expression_listContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_expression_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1064; expression();
			State = 1069;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1065; Match(COMMA);
				State = 1066; expression();
				}
				}
				State = 1071;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class This_accessContext : ParserRuleContext {
		public ITerminalNode THIS() { return GetToken(CSharp4Parser.THIS, 0); }
		public This_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_this_access; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterThis_access(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitThis_access(this);
		}
	}

	[RuleVersion(0)]
	public This_accessContext this_access() {
		This_accessContext _localctx = new This_accessContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_this_access);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1072; Match(THIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Base_accessContext : ParserRuleContext {
		public ITerminalNode BASE() { return GetToken(CSharp4Parser.BASE, 0); }
		public ITerminalNode DOT() { return GetToken(CSharp4Parser.DOT, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Type_argument_list_optContext type_argument_list_opt() {
			return GetRuleContext<Type_argument_list_optContext>(0);
		}
		public ITerminalNode OPEN_BRACKET() { return GetToken(CSharp4Parser.OPEN_BRACKET, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharp4Parser.CLOSE_BRACKET, 0); }
		public Base_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_base_access; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterBase_access(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitBase_access(this);
		}
	}

	[RuleVersion(0)]
	public Base_accessContext base_access() {
		Base_accessContext _localctx = new Base_accessContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_base_access);
		try {
			State = 1084;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,34,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1074; Match(BASE);
				State = 1075; Match(DOT);
				State = 1076; identifier();
				State = 1077; type_argument_list_opt();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1079; Match(BASE);
				State = 1080; Match(OPEN_BRACKET);
				State = 1081; expression_list();
				State = 1082; Match(CLOSE_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_creation_expressionContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(CSharp4Parser.NEW, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Object_or_collection_initializerContext object_or_collection_initializer() {
			return GetRuleContext<Object_or_collection_initializerContext>(0);
		}
		public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Object_creation_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_creation_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterObject_creation_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitObject_creation_expression(this);
		}
	}

	[RuleVersion(0)]
	public Object_creation_expressionContext object_creation_expression() {
		Object_creation_expressionContext _localctx = new Object_creation_expressionContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_object_creation_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1086; Match(NEW);
			State = 1087; type();
			State = 1097;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case OPEN_PARENS:
				{
				State = 1088; Match(OPEN_PARENS);
				State = 1090;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NEW))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ORDERBY - 64)) | (1L << (OUT - 64)) | (1L << (PARTIAL - 64)) | (1L << (REF - 64)) | (1L << (REMOVE - 64)) | (1L << (SBYTE - 64)) | (1L << (SELECT - 64)) | (1L << (SET - 64)) | (1L << (SHORT - 64)) | (1L << (SIZEOF - 64)) | (1L << (STRING - 64)) | (1L << (THIS - 64)) | (1L << (TRUE - 64)) | (1L << (TYPEOF - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNCHECKED - 64)) | (1L << (USHORT - 64)) | (1L << (WHERE - 64)) | (1L << (YIELD - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (INTEGER_LITERAL - 64)) | (1L << (REAL_LITERAL - 64)) | (1L << (CHARACTER_LITERAL - 64)) | (1L << (STRING_LITERAL - 64)) | (1L << (OPEN_PARENS - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (STAR - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (AMP - 129)) | (1L << (BANG - 129)) | (1L << (TILDE - 129)) | (1L << (OP_INC - 129)) | (1L << (OP_DEC - 129)))) != 0)) {
					{
					State = 1089; argument_list();
					}
				}

				State = 1092; Match(CLOSE_PARENS);
				State = 1094;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==OPEN_BRACE) {
					{
					State = 1093; object_or_collection_initializer();
					}
				}

				}
				break;
			case OPEN_BRACE:
				{
				State = 1096; object_or_collection_initializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_or_collection_initializerContext : ParserRuleContext {
		public Object_initializerContext object_initializer() {
			return GetRuleContext<Object_initializerContext>(0);
		}
		public Collection_initializerContext collection_initializer() {
			return GetRuleContext<Collection_initializerContext>(0);
		}
		public Object_or_collection_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_or_collection_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterObject_or_collection_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitObject_or_collection_initializer(this);
		}
	}

	[RuleVersion(0)]
	public Object_or_collection_initializerContext object_or_collection_initializer() {
		Object_or_collection_initializerContext _localctx = new Object_or_collection_initializerContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_object_or_collection_initializer);
		try {
			State = 1101;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1099; object_initializer();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1100; collection_initializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_initializerContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharp4Parser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharp4Parser.CLOSE_BRACE, 0); }
		public Member_initializer_listContext member_initializer_list() {
			return GetRuleContext<Member_initializer_listContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(CSharp4Parser.COMMA, 0); }
		public Object_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterObject_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitObject_initializer(this);
		}
	}

	[RuleVersion(0)]
	public Object_initializerContext object_initializer() {
		Object_initializerContext _localctx = new Object_initializerContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_object_initializer);
		int _la;
		try {
			State = 1112;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,40,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1103; Match(OPEN_BRACE);
				State = 1104; Match(CLOSE_BRACE);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1105; Match(OPEN_BRACE);
				State = 1106; member_initializer_list();
				State = 1108;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 1107; Match(COMMA);
					}
				}

				State = 1110; Match(CLOSE_BRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_initializer_listContext : ParserRuleContext {
		public Member_initializerContext[] member_initializer() {
			return GetRuleContexts<Member_initializerContext>();
		}
		public Member_initializerContext member_initializer(int i) {
			return GetRuleContext<Member_initializerContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Member_initializer_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_initializer_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterMember_initializer_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitMember_initializer_list(this);
		}
	}

	[RuleVersion(0)]
	public Member_initializer_listContext member_initializer_list() {
		Member_initializer_listContext _localctx = new Member_initializer_listContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_member_initializer_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1114; member_initializer();
			State = 1119;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,41,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1115; Match(COMMA);
					State = 1116; member_initializer();
					}
					} 
				}
				State = 1121;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,41,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_initializerContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(CSharp4Parser.ASSIGNMENT, 0); }
		public Initializer_valueContext initializer_value() {
			return GetRuleContext<Initializer_valueContext>(0);
		}
		public Member_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterMember_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitMember_initializer(this);
		}
	}

	[RuleVersion(0)]
	public Member_initializerContext member_initializer() {
		Member_initializerContext _localctx = new Member_initializerContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_member_initializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1122; identifier();
			State = 1123; Match(ASSIGNMENT);
			State = 1124; initializer_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Initializer_valueContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Object_or_collection_initializerContext object_or_collection_initializer() {
			return GetRuleContext<Object_or_collection_initializerContext>(0);
		}
		public Initializer_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializer_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterInitializer_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitInitializer_value(this);
		}
	}

	[RuleVersion(0)]
	public Initializer_valueContext initializer_value() {
		Initializer_valueContext _localctx = new Initializer_valueContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_initializer_value);
		try {
			State = 1128;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case USHORT:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1126; expression();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1127; object_or_collection_initializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Collection_initializerContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharp4Parser.OPEN_BRACE, 0); }
		public Element_initializer_listContext element_initializer_list() {
			return GetRuleContext<Element_initializer_listContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharp4Parser.CLOSE_BRACE, 0); }
		public ITerminalNode COMMA() { return GetToken(CSharp4Parser.COMMA, 0); }
		public Collection_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collection_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterCollection_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitCollection_initializer(this);
		}
	}

	[RuleVersion(0)]
	public Collection_initializerContext collection_initializer() {
		Collection_initializerContext _localctx = new Collection_initializerContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_collection_initializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1130; Match(OPEN_BRACE);
			State = 1131; element_initializer_list();
			State = 1133;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 1132; Match(COMMA);
				}
			}

			State = 1135; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Element_initializer_listContext : ParserRuleContext {
		public Element_initializerContext[] element_initializer() {
			return GetRuleContexts<Element_initializerContext>();
		}
		public Element_initializerContext element_initializer(int i) {
			return GetRuleContext<Element_initializerContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Element_initializer_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element_initializer_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterElement_initializer_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitElement_initializer_list(this);
		}
	}

	[RuleVersion(0)]
	public Element_initializer_listContext element_initializer_list() {
		Element_initializer_listContext _localctx = new Element_initializer_listContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_element_initializer_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1137; element_initializer();
			State = 1142;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,44,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1138; Match(COMMA);
					State = 1139; element_initializer();
					}
					} 
				}
				State = 1144;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,44,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Element_initializerContext : ParserRuleContext {
		public Non_assignment_expressionContext non_assignment_expression() {
			return GetRuleContext<Non_assignment_expressionContext>(0);
		}
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharp4Parser.OPEN_BRACE, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharp4Parser.CLOSE_BRACE, 0); }
		public Element_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterElement_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitElement_initializer(this);
		}
	}

	[RuleVersion(0)]
	public Element_initializerContext element_initializer() {
		Element_initializerContext _localctx = new Element_initializerContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_element_initializer);
		try {
			State = 1150;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case USHORT:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1145; non_assignment_expression();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1146; Match(OPEN_BRACE);
				State = 1147; expression_list();
				State = 1148; Match(CLOSE_BRACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_creation_expressionContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(CSharp4Parser.NEW, 0); }
		public Array_typeContext array_type() {
			return GetRuleContext<Array_typeContext>(0);
		}
		public Array_initializerContext array_initializer() {
			return GetRuleContext<Array_initializerContext>(0);
		}
		public Non_array_typeContext non_array_type() {
			return GetRuleContext<Non_array_typeContext>(0);
		}
		public ITerminalNode OPEN_BRACKET() { return GetToken(CSharp4Parser.OPEN_BRACKET, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharp4Parser.CLOSE_BRACKET, 0); }
		public Rank_specifierContext rank_specifier() {
			return GetRuleContext<Rank_specifierContext>(0);
		}
		public Rank_specifiersContext rank_specifiers() {
			return GetRuleContext<Rank_specifiersContext>(0);
		}
		public Array_creation_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_creation_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterArray_creation_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitArray_creation_expression(this);
		}
	}

	[RuleVersion(0)]
	public Array_creation_expressionContext array_creation_expression() {
		Array_creation_expressionContext _localctx = new Array_creation_expressionContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_array_creation_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1152; Match(NEW);
			State = 1169;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,48,_ctx) ) {
			case 1:
				{
				State = 1153; array_type();
				State = 1154; array_initializer();
				}
				break;

			case 2:
				{
				State = 1156; non_array_type();
				State = 1157; Match(OPEN_BRACKET);
				State = 1158; expression_list();
				State = 1159; Match(CLOSE_BRACKET);
				State = 1161;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==OPEN_BRACKET) {
					{
					State = 1160; rank_specifiers();
					}
				}

				State = 1164;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==OPEN_BRACE) {
					{
					State = 1163; array_initializer();
					}
				}

				}
				break;

			case 3:
				{
				State = 1166; rank_specifier();
				State = 1167; array_initializer();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delegate_creation_expressionContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(CSharp4Parser.NEW, 0); }
		public Delegate_typeContext delegate_type() {
			return GetRuleContext<Delegate_typeContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Delegate_creation_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegate_creation_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterDelegate_creation_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitDelegate_creation_expression(this);
		}
	}

	[RuleVersion(0)]
	public Delegate_creation_expressionContext delegate_creation_expression() {
		Delegate_creation_expressionContext _localctx = new Delegate_creation_expressionContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_delegate_creation_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1171; Match(NEW);
			State = 1172; delegate_type();
			State = 1173; Match(OPEN_PARENS);
			State = 1174; expression();
			State = 1175; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Anonymous_object_creation_expressionContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(CSharp4Parser.NEW, 0); }
		public Anonymous_object_initializerContext anonymous_object_initializer() {
			return GetRuleContext<Anonymous_object_initializerContext>(0);
		}
		public Anonymous_object_creation_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymous_object_creation_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAnonymous_object_creation_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAnonymous_object_creation_expression(this);
		}
	}

	[RuleVersion(0)]
	public Anonymous_object_creation_expressionContext anonymous_object_creation_expression() {
		Anonymous_object_creation_expressionContext _localctx = new Anonymous_object_creation_expressionContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_anonymous_object_creation_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1177; Match(NEW);
			State = 1178; anonymous_object_initializer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Anonymous_object_initializerContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharp4Parser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharp4Parser.CLOSE_BRACE, 0); }
		public Member_declarator_listContext member_declarator_list() {
			return GetRuleContext<Member_declarator_listContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(CSharp4Parser.COMMA, 0); }
		public Anonymous_object_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymous_object_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAnonymous_object_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAnonymous_object_initializer(this);
		}
	}

	[RuleVersion(0)]
	public Anonymous_object_initializerContext anonymous_object_initializer() {
		Anonymous_object_initializerContext _localctx = new Anonymous_object_initializerContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_anonymous_object_initializer);
		int _la;
		try {
			State = 1189;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,50,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1180; Match(OPEN_BRACE);
				State = 1181; Match(CLOSE_BRACE);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1182; Match(OPEN_BRACE);
				State = 1183; member_declarator_list();
				State = 1185;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 1184; Match(COMMA);
					}
				}

				State = 1187; Match(CLOSE_BRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_declarator_listContext : ParserRuleContext {
		public Member_declaratorContext[] member_declarator() {
			return GetRuleContexts<Member_declaratorContext>();
		}
		public Member_declaratorContext member_declarator(int i) {
			return GetRuleContext<Member_declaratorContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Member_declarator_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_declarator_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterMember_declarator_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitMember_declarator_list(this);
		}
	}

	[RuleVersion(0)]
	public Member_declarator_listContext member_declarator_list() {
		Member_declarator_listContext _localctx = new Member_declarator_listContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_member_declarator_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1191; member_declarator();
			State = 1196;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,51,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1192; Match(COMMA);
					State = 1193; member_declarator();
					}
					} 
				}
				State = 1198;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,51,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_declaratorContext : ParserRuleContext {
		public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(CSharp4Parser.ASSIGNMENT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Member_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterMember_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitMember_declarator(this);
		}
	}

	[RuleVersion(0)]
	public Member_declaratorContext member_declarator() {
		Member_declaratorContext _localctx = new Member_declaratorContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_member_declarator);
		try {
			State = 1204;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,52,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1199; primary_expression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1200; identifier();
				State = 1201; Match(ASSIGNMENT);
				State = 1202; expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Typeof_expressionContext : ParserRuleContext {
		public ITerminalNode TYPEOF() { return GetToken(CSharp4Parser.TYPEOF, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public Unbound_type_nameContext unbound_type_name() {
			return GetRuleContext<Unbound_type_nameContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(CSharp4Parser.VOID, 0); }
		public Typeof_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeof_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterTypeof_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitTypeof_expression(this);
		}
	}

	[RuleVersion(0)]
	public Typeof_expressionContext typeof_expression() {
		Typeof_expressionContext _localctx = new Typeof_expressionContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_typeof_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1206; Match(TYPEOF);
			State = 1207; Match(OPEN_PARENS);
			State = 1216;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,53,_ctx) ) {
			case 1:
				{
				State = 1208; unbound_type_name();
				State = 1209; Match(CLOSE_PARENS);
				}
				break;

			case 2:
				{
				State = 1211; type();
				State = 1212; Match(CLOSE_PARENS);
				}
				break;

			case 3:
				{
				State = 1214; Match(VOID);
				State = 1215; Match(CLOSE_PARENS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unbound_type_nameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode DOUBLE_COLON() { return GetToken(CSharp4Parser.DOUBLE_COLON, 0); }
		public ITerminalNode[] DOT() { return GetTokens(CSharp4Parser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(CSharp4Parser.DOT, i);
		}
		public Generic_dimension_specifierContext[] generic_dimension_specifier() {
			return GetRuleContexts<Generic_dimension_specifierContext>();
		}
		public Generic_dimension_specifierContext generic_dimension_specifier(int i) {
			return GetRuleContext<Generic_dimension_specifierContext>(i);
		}
		public Unbound_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unbound_type_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterUnbound_type_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitUnbound_type_name(this);
		}
	}

	[RuleVersion(0)]
	public Unbound_type_nameContext unbound_type_name() {
		Unbound_type_nameContext _localctx = new Unbound_type_nameContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_unbound_type_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1218; identifier();
			State = 1227;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case CLOSE_PARENS:
			case DOT:
			case LT:
				{
				State = 1220;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 1219; generic_dimension_specifier();
					}
				}

				}
				break;
			case DOUBLE_COLON:
				{
				State = 1222; Match(DOUBLE_COLON);
				State = 1223; identifier();
				State = 1225;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 1224; generic_dimension_specifier();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1236;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==DOT) {
				{
				{
				State = 1229; Match(DOT);
				State = 1230; identifier();
				State = 1232;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 1231; generic_dimension_specifier();
					}
				}

				}
				}
				State = 1238;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_dimension_specifierContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(CSharp4Parser.LT, 0); }
		public ITerminalNode GT() { return GetToken(CSharp4Parser.GT, 0); }
		public CommasContext commas() {
			return GetRuleContext<CommasContext>(0);
		}
		public Generic_dimension_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_dimension_specifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterGeneric_dimension_specifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitGeneric_dimension_specifier(this);
		}
	}

	[RuleVersion(0)]
	public Generic_dimension_specifierContext generic_dimension_specifier() {
		Generic_dimension_specifierContext _localctx = new Generic_dimension_specifierContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_generic_dimension_specifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1239; Match(LT);
			State = 1241;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 1240; commas();
				}
			}

			State = 1243; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommasContext : ParserRuleContext {
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public CommasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commas; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterCommas(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitCommas(this);
		}
	}

	[RuleVersion(0)]
	public CommasContext commas() {
		CommasContext _localctx = new CommasContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_commas);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1245; Match(COMMA);
			State = 1249;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1246; Match(COMMA);
				}
				}
				State = 1251;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Checked_expressionContext : ParserRuleContext {
		public ITerminalNode CHECKED() { return GetToken(CSharp4Parser.CHECKED, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Checked_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checked_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterChecked_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitChecked_expression(this);
		}
	}

	[RuleVersion(0)]
	public Checked_expressionContext checked_expression() {
		Checked_expressionContext _localctx = new Checked_expressionContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_checked_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1252; Match(CHECKED);
			State = 1253; Match(OPEN_PARENS);
			State = 1254; expression();
			State = 1255; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unchecked_expressionContext : ParserRuleContext {
		public ITerminalNode UNCHECKED() { return GetToken(CSharp4Parser.UNCHECKED, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Unchecked_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unchecked_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterUnchecked_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitUnchecked_expression(this);
		}
	}

	[RuleVersion(0)]
	public Unchecked_expressionContext unchecked_expression() {
		Unchecked_expressionContext _localctx = new Unchecked_expressionContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_unchecked_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1257; Match(UNCHECKED);
			State = 1258; Match(OPEN_PARENS);
			State = 1259; expression();
			State = 1260; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_value_expressionContext : ParserRuleContext {
		public ITerminalNode DEFAULT() { return GetToken(CSharp4Parser.DEFAULT, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Default_value_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_value_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterDefault_value_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitDefault_value_expression(this);
		}
	}

	[RuleVersion(0)]
	public Default_value_expressionContext default_value_expression() {
		Default_value_expressionContext _localctx = new Default_value_expressionContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_default_value_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1262; Match(DEFAULT);
			State = 1263; Match(OPEN_PARENS);
			State = 1264; type();
			State = 1265; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_expressionContext : ParserRuleContext {
		public Cast_expressionContext cast_expression() {
			return GetRuleContext<Cast_expressionContext>(0);
		}
		public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(CSharp4Parser.PLUS, 0); }
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public ITerminalNode MINUS() { return GetToken(CSharp4Parser.MINUS, 0); }
		public ITerminalNode BANG() { return GetToken(CSharp4Parser.BANG, 0); }
		public ITerminalNode TILDE() { return GetToken(CSharp4Parser.TILDE, 0); }
		public Pre_increment_expressionContext pre_increment_expression() {
			return GetRuleContext<Pre_increment_expressionContext>(0);
		}
		public Pre_decrement_expressionContext pre_decrement_expression() {
			return GetRuleContext<Pre_decrement_expressionContext>(0);
		}
		public Unary_expression_unsafeContext unary_expression_unsafe() {
			return GetRuleContext<Unary_expression_unsafeContext>(0);
		}
		public Unary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterUnary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitUnary_expression(this);
		}
	}

	[RuleVersion(0)]
	public Unary_expressionContext unary_expression() {
		Unary_expressionContext _localctx = new Unary_expressionContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_unary_expression);
		try {
			State = 1280;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,61,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1267; cast_expression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1268; primary_expression();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1269; Match(PLUS);
				State = 1270; unary_expression();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1271; Match(MINUS);
				State = 1272; unary_expression();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1273; Match(BANG);
				State = 1274; unary_expression();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1275; Match(TILDE);
				State = 1276; unary_expression();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1277; pre_increment_expression();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1278; pre_decrement_expression();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1279; unary_expression_unsafe();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scan_for_cast_generic_precedenceContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Cast_disambiguation_tokenContext cast_disambiguation_token() {
			return GetRuleContext<Cast_disambiguation_tokenContext>(0);
		}
		public Scan_for_cast_generic_precedenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scan_for_cast_generic_precedence; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterScan_for_cast_generic_precedence(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitScan_for_cast_generic_precedence(this);
		}
	}

	[RuleVersion(0)]
	public Scan_for_cast_generic_precedenceContext scan_for_cast_generic_precedence() {
		Scan_for_cast_generic_precedenceContext _localctx = new Scan_for_cast_generic_precedenceContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_scan_for_cast_generic_precedence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1282; Match(OPEN_PARENS);
			State = 1283; type();
			State = 1284; Match(CLOSE_PARENS);
			State = 1285; cast_disambiguation_token();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cast_disambiguation_tokenContext : ParserRuleContext {
		public ITerminalNode TILDE() { return GetToken(CSharp4Parser.TILDE, 0); }
		public ITerminalNode BANG() { return GetToken(CSharp4Parser.BANG, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ITerminalNode ABSTRACT() { return GetToken(CSharp4Parser.ABSTRACT, 0); }
		public ITerminalNode BASE() { return GetToken(CSharp4Parser.BASE, 0); }
		public ITerminalNode BOOL() { return GetToken(CSharp4Parser.BOOL, 0); }
		public ITerminalNode BREAK() { return GetToken(CSharp4Parser.BREAK, 0); }
		public ITerminalNode BYTE() { return GetToken(CSharp4Parser.BYTE, 0); }
		public ITerminalNode CASE() { return GetToken(CSharp4Parser.CASE, 0); }
		public ITerminalNode CATCH() { return GetToken(CSharp4Parser.CATCH, 0); }
		public ITerminalNode CHAR() { return GetToken(CSharp4Parser.CHAR, 0); }
		public ITerminalNode CHECKED() { return GetToken(CSharp4Parser.CHECKED, 0); }
		public ITerminalNode CLASS() { return GetToken(CSharp4Parser.CLASS, 0); }
		public ITerminalNode CONST() { return GetToken(CSharp4Parser.CONST, 0); }
		public ITerminalNode CONTINUE() { return GetToken(CSharp4Parser.CONTINUE, 0); }
		public ITerminalNode DECIMAL() { return GetToken(CSharp4Parser.DECIMAL, 0); }
		public ITerminalNode DEFAULT() { return GetToken(CSharp4Parser.DEFAULT, 0); }
		public ITerminalNode DELEGATE() { return GetToken(CSharp4Parser.DELEGATE, 0); }
		public ITerminalNode DO() { return GetToken(CSharp4Parser.DO, 0); }
		public ITerminalNode DOUBLE() { return GetToken(CSharp4Parser.DOUBLE, 0); }
		public ITerminalNode ELSE() { return GetToken(CSharp4Parser.ELSE, 0); }
		public ITerminalNode ENUM() { return GetToken(CSharp4Parser.ENUM, 0); }
		public ITerminalNode EVENT() { return GetToken(CSharp4Parser.EVENT, 0); }
		public ITerminalNode EXPLICIT() { return GetToken(CSharp4Parser.EXPLICIT, 0); }
		public ITerminalNode EXTERN() { return GetToken(CSharp4Parser.EXTERN, 0); }
		public ITerminalNode FINALLY() { return GetToken(CSharp4Parser.FINALLY, 0); }
		public ITerminalNode FIXED() { return GetToken(CSharp4Parser.FIXED, 0); }
		public ITerminalNode FLOAT() { return GetToken(CSharp4Parser.FLOAT, 0); }
		public ITerminalNode FOR() { return GetToken(CSharp4Parser.FOR, 0); }
		public ITerminalNode FOREACH() { return GetToken(CSharp4Parser.FOREACH, 0); }
		public ITerminalNode GOTO() { return GetToken(CSharp4Parser.GOTO, 0); }
		public ITerminalNode IF() { return GetToken(CSharp4Parser.IF, 0); }
		public ITerminalNode IMPLICIT() { return GetToken(CSharp4Parser.IMPLICIT, 0); }
		public ITerminalNode IN() { return GetToken(CSharp4Parser.IN, 0); }
		public ITerminalNode INT() { return GetToken(CSharp4Parser.INT, 0); }
		public ITerminalNode INTERFACE() { return GetToken(CSharp4Parser.INTERFACE, 0); }
		public ITerminalNode INTERNAL() { return GetToken(CSharp4Parser.INTERNAL, 0); }
		public ITerminalNode LOCK() { return GetToken(CSharp4Parser.LOCK, 0); }
		public ITerminalNode LONG() { return GetToken(CSharp4Parser.LONG, 0); }
		public ITerminalNode NAMESPACE() { return GetToken(CSharp4Parser.NAMESPACE, 0); }
		public ITerminalNode NEW() { return GetToken(CSharp4Parser.NEW, 0); }
		public ITerminalNode OBJECT() { return GetToken(CSharp4Parser.OBJECT, 0); }
		public ITerminalNode OPERATOR() { return GetToken(CSharp4Parser.OPERATOR, 0); }
		public ITerminalNode OUT() { return GetToken(CSharp4Parser.OUT, 0); }
		public ITerminalNode OVERRIDE() { return GetToken(CSharp4Parser.OVERRIDE, 0); }
		public ITerminalNode PARAMS() { return GetToken(CSharp4Parser.PARAMS, 0); }
		public ITerminalNode PRIVATE() { return GetToken(CSharp4Parser.PRIVATE, 0); }
		public ITerminalNode PROTECTED() { return GetToken(CSharp4Parser.PROTECTED, 0); }
		public ITerminalNode PUBLIC() { return GetToken(CSharp4Parser.PUBLIC, 0); }
		public ITerminalNode READONLY() { return GetToken(CSharp4Parser.READONLY, 0); }
		public ITerminalNode REF() { return GetToken(CSharp4Parser.REF, 0); }
		public ITerminalNode RETURN() { return GetToken(CSharp4Parser.RETURN, 0); }
		public ITerminalNode SBYTE() { return GetToken(CSharp4Parser.SBYTE, 0); }
		public ITerminalNode SEALED() { return GetToken(CSharp4Parser.SEALED, 0); }
		public ITerminalNode SHORT() { return GetToken(CSharp4Parser.SHORT, 0); }
		public ITerminalNode SIZEOF() { return GetToken(CSharp4Parser.SIZEOF, 0); }
		public ITerminalNode STACKALLOC() { return GetToken(CSharp4Parser.STACKALLOC, 0); }
		public ITerminalNode STATIC() { return GetToken(CSharp4Parser.STATIC, 0); }
		public ITerminalNode STRING() { return GetToken(CSharp4Parser.STRING, 0); }
		public ITerminalNode STRUCT() { return GetToken(CSharp4Parser.STRUCT, 0); }
		public ITerminalNode SWITCH() { return GetToken(CSharp4Parser.SWITCH, 0); }
		public ITerminalNode THIS() { return GetToken(CSharp4Parser.THIS, 0); }
		public ITerminalNode THROW() { return GetToken(CSharp4Parser.THROW, 0); }
		public ITerminalNode TRY() { return GetToken(CSharp4Parser.TRY, 0); }
		public ITerminalNode TYPEOF() { return GetToken(CSharp4Parser.TYPEOF, 0); }
		public ITerminalNode UINT() { return GetToken(CSharp4Parser.UINT, 0); }
		public ITerminalNode ULONG() { return GetToken(CSharp4Parser.ULONG, 0); }
		public ITerminalNode UNCHECKED() { return GetToken(CSharp4Parser.UNCHECKED, 0); }
		public ITerminalNode UNSAFE() { return GetToken(CSharp4Parser.UNSAFE, 0); }
		public ITerminalNode USHORT() { return GetToken(CSharp4Parser.USHORT, 0); }
		public ITerminalNode USING() { return GetToken(CSharp4Parser.USING, 0); }
		public ITerminalNode VIRTUAL() { return GetToken(CSharp4Parser.VIRTUAL, 0); }
		public ITerminalNode VOID() { return GetToken(CSharp4Parser.VOID, 0); }
		public ITerminalNode VOLATILE() { return GetToken(CSharp4Parser.VOLATILE, 0); }
		public ITerminalNode WHILE() { return GetToken(CSharp4Parser.WHILE, 0); }
		public Cast_disambiguation_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast_disambiguation_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterCast_disambiguation_token(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitCast_disambiguation_token(this);
		}
	}

	[RuleVersion(0)]
	public Cast_disambiguation_tokenContext cast_disambiguation_token() {
		Cast_disambiguation_tokenContext _localctx = new Cast_disambiguation_tokenContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_cast_disambiguation_token);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1364;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case TILDE:
				{
				State = 1287; Match(TILDE);
				}
				break;
			case BANG:
				{
				State = 1288; Match(BANG);
				}
				break;
			case OPEN_PARENS:
				{
				State = 1289; Match(OPEN_PARENS);
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BY:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				{
				State = 1290; identifier();
				}
				break;
			case FALSE:
			case NULL:
			case TRUE:
			case INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
				{
				State = 1291; literal();
				}
				break;
			case ABSTRACT:
				{
				State = 1292; Match(ABSTRACT);
				}
				break;
			case BASE:
				{
				State = 1293; Match(BASE);
				}
				break;
			case BOOL:
				{
				State = 1294; Match(BOOL);
				}
				break;
			case BREAK:
				{
				State = 1295; Match(BREAK);
				}
				break;
			case BYTE:
				{
				State = 1296; Match(BYTE);
				}
				break;
			case CASE:
				{
				State = 1297; Match(CASE);
				}
				break;
			case CATCH:
				{
				State = 1298; Match(CATCH);
				}
				break;
			case CHAR:
				{
				State = 1299; Match(CHAR);
				}
				break;
			case CHECKED:
				{
				State = 1300; Match(CHECKED);
				}
				break;
			case CLASS:
				{
				State = 1301; Match(CLASS);
				}
				break;
			case CONST:
				{
				State = 1302; Match(CONST);
				}
				break;
			case CONTINUE:
				{
				State = 1303; Match(CONTINUE);
				}
				break;
			case DECIMAL:
				{
				State = 1304; Match(DECIMAL);
				}
				break;
			case DEFAULT:
				{
				State = 1305; Match(DEFAULT);
				}
				break;
			case DELEGATE:
				{
				State = 1306; Match(DELEGATE);
				}
				break;
			case DO:
				{
				State = 1307; Match(DO);
				}
				break;
			case DOUBLE:
				{
				State = 1308; Match(DOUBLE);
				}
				break;
			case ELSE:
				{
				State = 1309; Match(ELSE);
				}
				break;
			case ENUM:
				{
				State = 1310; Match(ENUM);
				}
				break;
			case EVENT:
				{
				State = 1311; Match(EVENT);
				}
				break;
			case EXPLICIT:
				{
				State = 1312; Match(EXPLICIT);
				}
				break;
			case EXTERN:
				{
				State = 1313; Match(EXTERN);
				}
				break;
			case FINALLY:
				{
				State = 1314; Match(FINALLY);
				}
				break;
			case FIXED:
				{
				State = 1315; Match(FIXED);
				}
				break;
			case FLOAT:
				{
				State = 1316; Match(FLOAT);
				}
				break;
			case FOR:
				{
				State = 1317; Match(FOR);
				}
				break;
			case FOREACH:
				{
				State = 1318; Match(FOREACH);
				}
				break;
			case GOTO:
				{
				State = 1319; Match(GOTO);
				}
				break;
			case IF:
				{
				State = 1320; Match(IF);
				}
				break;
			case IMPLICIT:
				{
				State = 1321; Match(IMPLICIT);
				}
				break;
			case IN:
				{
				State = 1322; Match(IN);
				}
				break;
			case INT:
				{
				State = 1323; Match(INT);
				}
				break;
			case INTERFACE:
				{
				State = 1324; Match(INTERFACE);
				}
				break;
			case INTERNAL:
				{
				State = 1325; Match(INTERNAL);
				}
				break;
			case LOCK:
				{
				State = 1326; Match(LOCK);
				}
				break;
			case LONG:
				{
				State = 1327; Match(LONG);
				}
				break;
			case NAMESPACE:
				{
				State = 1328; Match(NAMESPACE);
				}
				break;
			case NEW:
				{
				State = 1329; Match(NEW);
				}
				break;
			case OBJECT:
				{
				State = 1330; Match(OBJECT);
				}
				break;
			case OPERATOR:
				{
				State = 1331; Match(OPERATOR);
				}
				break;
			case OUT:
				{
				State = 1332; Match(OUT);
				}
				break;
			case OVERRIDE:
				{
				State = 1333; Match(OVERRIDE);
				}
				break;
			case PARAMS:
				{
				State = 1334; Match(PARAMS);
				}
				break;
			case PRIVATE:
				{
				State = 1335; Match(PRIVATE);
				}
				break;
			case PROTECTED:
				{
				State = 1336; Match(PROTECTED);
				}
				break;
			case PUBLIC:
				{
				State = 1337; Match(PUBLIC);
				}
				break;
			case READONLY:
				{
				State = 1338; Match(READONLY);
				}
				break;
			case REF:
				{
				State = 1339; Match(REF);
				}
				break;
			case RETURN:
				{
				State = 1340; Match(RETURN);
				}
				break;
			case SBYTE:
				{
				State = 1341; Match(SBYTE);
				}
				break;
			case SEALED:
				{
				State = 1342; Match(SEALED);
				}
				break;
			case SHORT:
				{
				State = 1343; Match(SHORT);
				}
				break;
			case SIZEOF:
				{
				State = 1344; Match(SIZEOF);
				}
				break;
			case STACKALLOC:
				{
				State = 1345; Match(STACKALLOC);
				}
				break;
			case STATIC:
				{
				State = 1346; Match(STATIC);
				}
				break;
			case STRING:
				{
				State = 1347; Match(STRING);
				}
				break;
			case STRUCT:
				{
				State = 1348; Match(STRUCT);
				}
				break;
			case SWITCH:
				{
				State = 1349; Match(SWITCH);
				}
				break;
			case THIS:
				{
				State = 1350; Match(THIS);
				}
				break;
			case THROW:
				{
				State = 1351; Match(THROW);
				}
				break;
			case TRY:
				{
				State = 1352; Match(TRY);
				}
				break;
			case TYPEOF:
				{
				State = 1353; Match(TYPEOF);
				}
				break;
			case UINT:
				{
				State = 1354; Match(UINT);
				}
				break;
			case ULONG:
				{
				State = 1355; Match(ULONG);
				}
				break;
			case UNCHECKED:
				{
				State = 1356; Match(UNCHECKED);
				}
				break;
			case UNSAFE:
				{
				State = 1357; Match(UNSAFE);
				}
				break;
			case USHORT:
				{
				State = 1358; Match(USHORT);
				}
				break;
			case USING:
				{
				State = 1359; Match(USING);
				}
				break;
			case VIRTUAL:
				{
				State = 1360; Match(VIRTUAL);
				}
				break;
			case VOID:
				{
				State = 1361; Match(VOID);
				}
				break;
			case VOLATILE:
				{
				State = 1362; Match(VOLATILE);
				}
				break;
			case WHILE:
				{
				State = 1363; Match(WHILE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pre_increment_expressionContext : ParserRuleContext {
		public ITerminalNode OP_INC() { return GetToken(CSharp4Parser.OP_INC, 0); }
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Pre_increment_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pre_increment_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterPre_increment_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitPre_increment_expression(this);
		}
	}

	[RuleVersion(0)]
	public Pre_increment_expressionContext pre_increment_expression() {
		Pre_increment_expressionContext _localctx = new Pre_increment_expressionContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_pre_increment_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1366; Match(OP_INC);
			State = 1367; unary_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pre_decrement_expressionContext : ParserRuleContext {
		public ITerminalNode OP_DEC() { return GetToken(CSharp4Parser.OP_DEC, 0); }
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Pre_decrement_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pre_decrement_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterPre_decrement_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitPre_decrement_expression(this);
		}
	}

	[RuleVersion(0)]
	public Pre_decrement_expressionContext pre_decrement_expression() {
		Pre_decrement_expressionContext _localctx = new Pre_decrement_expressionContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_pre_decrement_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1369; Match(OP_DEC);
			State = 1370; unary_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cast_expressionContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Cast_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterCast_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitCast_expression(this);
		}
	}

	[RuleVersion(0)]
	public Cast_expressionContext cast_expression() {
		Cast_expressionContext _localctx = new Cast_expressionContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_cast_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1372; Match(OPEN_PARENS);
			State = 1373; type();
			State = 1374; Match(CLOSE_PARENS);
			State = 1375; unary_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiplicative_expressionContext : ParserRuleContext {
		public Unary_expressionContext[] unary_expression() {
			return GetRuleContexts<Unary_expressionContext>();
		}
		public Unary_expressionContext unary_expression(int i) {
			return GetRuleContext<Unary_expressionContext>(i);
		}
		public ITerminalNode[] STAR() { return GetTokens(CSharp4Parser.STAR); }
		public ITerminalNode STAR(int i) {
			return GetToken(CSharp4Parser.STAR, i);
		}
		public ITerminalNode[] DIV() { return GetTokens(CSharp4Parser.DIV); }
		public ITerminalNode DIV(int i) {
			return GetToken(CSharp4Parser.DIV, i);
		}
		public ITerminalNode[] PERCENT() { return GetTokens(CSharp4Parser.PERCENT); }
		public ITerminalNode PERCENT(int i) {
			return GetToken(CSharp4Parser.PERCENT, i);
		}
		public Multiplicative_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicative_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterMultiplicative_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitMultiplicative_expression(this);
		}
	}

	[RuleVersion(0)]
	public Multiplicative_expressionContext multiplicative_expression() {
		Multiplicative_expressionContext _localctx = new Multiplicative_expressionContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_multiplicative_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1377; unary_expression();
			State = 1386;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 126)) & ~0x3f) == 0 && ((1L << (_la - 126)) & ((1L << (STAR - 126)) | (1L << (DIV - 126)) | (1L << (PERCENT - 126)))) != 0)) {
				{
				State = 1384;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case STAR:
					{
					{
					State = 1378; Match(STAR);
					State = 1379; unary_expression();
					}
					}
					break;
				case DIV:
					{
					{
					State = 1380; Match(DIV);
					State = 1381; unary_expression();
					}
					}
					break;
				case PERCENT:
					{
					{
					State = 1382; Match(PERCENT);
					State = 1383; unary_expression();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 1388;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Additive_expressionContext : ParserRuleContext {
		public Multiplicative_expressionContext[] multiplicative_expression() {
			return GetRuleContexts<Multiplicative_expressionContext>();
		}
		public Multiplicative_expressionContext multiplicative_expression(int i) {
			return GetRuleContext<Multiplicative_expressionContext>(i);
		}
		public ITerminalNode[] PLUS() { return GetTokens(CSharp4Parser.PLUS); }
		public ITerminalNode PLUS(int i) {
			return GetToken(CSharp4Parser.PLUS, i);
		}
		public ITerminalNode[] MINUS() { return GetTokens(CSharp4Parser.MINUS); }
		public ITerminalNode MINUS(int i) {
			return GetToken(CSharp4Parser.MINUS, i);
		}
		public Additive_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additive_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAdditive_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAdditive_expression(this);
		}
	}

	[RuleVersion(0)]
	public Additive_expressionContext additive_expression() {
		Additive_expressionContext _localctx = new Additive_expressionContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_additive_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1389; multiplicative_expression();
			State = 1396;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==PLUS || _la==MINUS) {
				{
				State = 1394;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case PLUS:
					{
					{
					State = 1390; Match(PLUS);
					State = 1391; multiplicative_expression();
					}
					}
					break;
				case MINUS:
					{
					{
					State = 1392; Match(MINUS);
					State = 1393; multiplicative_expression();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 1398;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shift_expressionContext : ParserRuleContext {
		public Additive_expressionContext[] additive_expression() {
			return GetRuleContexts<Additive_expressionContext>();
		}
		public Additive_expressionContext additive_expression(int i) {
			return GetRuleContext<Additive_expressionContext>(i);
		}
		public ITerminalNode[] OP_LEFT_SHIFT() { return GetTokens(CSharp4Parser.OP_LEFT_SHIFT); }
		public ITerminalNode OP_LEFT_SHIFT(int i) {
			return GetToken(CSharp4Parser.OP_LEFT_SHIFT, i);
		}
		public Right_shiftContext[] right_shift() {
			return GetRuleContexts<Right_shiftContext>();
		}
		public Right_shiftContext right_shift(int i) {
			return GetRuleContext<Right_shiftContext>(i);
		}
		public Shift_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shift_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterShift_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitShift_expression(this);
		}
	}

	[RuleVersion(0)]
	public Shift_expressionContext shift_expression() {
		Shift_expressionContext _localctx = new Shift_expressionContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_shift_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1399; additive_expression();
			State = 1407;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,68,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 1405;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case OP_LEFT_SHIFT:
						{
						{
						State = 1400; Match(OP_LEFT_SHIFT);
						State = 1401; additive_expression();
						}
						}
						break;
					case GT:
						{
						{
						State = 1402; right_shift();
						State = 1403; additive_expression();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 1409;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,68,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relational_expressionContext : ParserRuleContext {
		public Shift_expressionContext[] shift_expression() {
			return GetRuleContexts<Shift_expressionContext>();
		}
		public Shift_expressionContext shift_expression(int i) {
			return GetRuleContext<Shift_expressionContext>(i);
		}
		public ITerminalNode[] LT() { return GetTokens(CSharp4Parser.LT); }
		public ITerminalNode LT(int i) {
			return GetToken(CSharp4Parser.LT, i);
		}
		public ITerminalNode[] GT() { return GetTokens(CSharp4Parser.GT); }
		public ITerminalNode GT(int i) {
			return GetToken(CSharp4Parser.GT, i);
		}
		public ITerminalNode[] OP_LE() { return GetTokens(CSharp4Parser.OP_LE); }
		public ITerminalNode OP_LE(int i) {
			return GetToken(CSharp4Parser.OP_LE, i);
		}
		public ITerminalNode[] OP_GE() { return GetTokens(CSharp4Parser.OP_GE); }
		public ITerminalNode OP_GE(int i) {
			return GetToken(CSharp4Parser.OP_GE, i);
		}
		public ITerminalNode[] IS() { return GetTokens(CSharp4Parser.IS); }
		public ITerminalNode IS(int i) {
			return GetToken(CSharp4Parser.IS, i);
		}
		public IsTypeContext[] isType() {
			return GetRuleContexts<IsTypeContext>();
		}
		public IsTypeContext isType(int i) {
			return GetRuleContext<IsTypeContext>(i);
		}
		public ITerminalNode[] AS() { return GetTokens(CSharp4Parser.AS); }
		public ITerminalNode AS(int i) {
			return GetToken(CSharp4Parser.AS, i);
		}
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public Relational_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relational_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterRelational_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitRelational_expression(this);
		}
	}

	[RuleVersion(0)]
	public Relational_expressionContext relational_expression() {
		Relational_expressionContext _localctx = new Relational_expressionContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_relational_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1410; shift_expression();
			State = 1425;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AS || _la==IS || ((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & ((1L << (LT - 135)) | (1L << (GT - 135)) | (1L << (OP_LE - 135)) | (1L << (OP_GE - 135)))) != 0)) {
				{
				State = 1423;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case LT:
					{
					State = 1411; Match(LT);
					State = 1412; shift_expression();
					}
					break;
				case GT:
					{
					State = 1413; Match(GT);
					State = 1414; shift_expression();
					}
					break;
				case OP_LE:
					{
					State = 1415; Match(OP_LE);
					State = 1416; shift_expression();
					}
					break;
				case OP_GE:
					{
					State = 1417; Match(OP_GE);
					State = 1418; shift_expression();
					}
					break;
				case IS:
					{
					State = 1419; Match(IS);
					State = 1420; isType();
					}
					break;
				case AS:
					{
					State = 1421; Match(AS);
					State = 1422; type();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 1427;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scan_for_shift_generic_precedenceContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode LT() { return GetToken(CSharp4Parser.LT, 0); }
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode GT() { return GetToken(CSharp4Parser.GT, 0); }
		public Shift_disambiguation_tokenContext shift_disambiguation_token() {
			return GetRuleContext<Shift_disambiguation_tokenContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Scan_for_shift_generic_precedenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scan_for_shift_generic_precedence; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterScan_for_shift_generic_precedence(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitScan_for_shift_generic_precedence(this);
		}
	}

	[RuleVersion(0)]
	public Scan_for_shift_generic_precedenceContext scan_for_shift_generic_precedence() {
		Scan_for_shift_generic_precedenceContext _localctx = new Scan_for_shift_generic_precedenceContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_scan_for_shift_generic_precedence);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1428; identifier();
			State = 1429; Match(LT);
			State = 1430; type();
			State = 1435;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1431; Match(COMMA);
				State = 1432; type();
				}
				}
				State = 1437;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1438; Match(GT);
			State = 1439; shift_disambiguation_token();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shift_disambiguation_tokenContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharp4Parser.CLOSE_BRACKET, 0); }
		public ITerminalNode COLON() { return GetToken(CSharp4Parser.COLON, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public ITerminalNode COMMA() { return GetToken(CSharp4Parser.COMMA, 0); }
		public ITerminalNode DOT() { return GetToken(CSharp4Parser.DOT, 0); }
		public ITerminalNode INTERR() { return GetToken(CSharp4Parser.INTERR, 0); }
		public ITerminalNode OP_EQ() { return GetToken(CSharp4Parser.OP_EQ, 0); }
		public ITerminalNode OP_NE() { return GetToken(CSharp4Parser.OP_NE, 0); }
		public ITerminalNode GT() { return GetToken(CSharp4Parser.GT, 0); }
		public Shift_disambiguation_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shift_disambiguation_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterShift_disambiguation_token(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitShift_disambiguation_token(this);
		}
	}

	[RuleVersion(0)]
	public Shift_disambiguation_tokenContext shift_disambiguation_token() {
		Shift_disambiguation_tokenContext _localctx = new Shift_disambiguation_tokenContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_shift_disambiguation_token);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1441;
			_la = _input.La(1);
			if ( !(((((_la - 117)) & ~0x3f) == 0 && ((1L << (_la - 117)) & ((1L << (CLOSE_BRACKET - 117)) | (1L << (OPEN_PARENS - 117)) | (1L << (CLOSE_PARENS - 117)) | (1L << (DOT - 117)) | (1L << (COMMA - 117)) | (1L << (COLON - 117)) | (1L << (SEMICOLON - 117)) | (1L << (GT - 117)) | (1L << (INTERR - 117)) | (1L << (OP_EQ - 117)) | (1L << (OP_NE - 117)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsTypeContext : ParserRuleContext {
		public Non_nullable_value_typeContext non_nullable_value_type() {
			return GetRuleContext<Non_nullable_value_typeContext>(0);
		}
		public ITerminalNode INTERR() { return GetToken(CSharp4Parser.INTERR, 0); }
		public IsTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterIsType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitIsType(this);
		}
	}

	[RuleVersion(0)]
	public IsTypeContext isType() {
		IsTypeContext _localctx = new IsTypeContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_isType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1443; non_nullable_value_type();
			State = 1445;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,72,_ctx) ) {
			case 1:
				{
				State = 1444; Match(INTERR);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Is_disambiguation_tokenContext : ParserRuleContext {
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public ITerminalNode OP_AND() { return GetToken(CSharp4Parser.OP_AND, 0); }
		public ITerminalNode OP_OR() { return GetToken(CSharp4Parser.OP_OR, 0); }
		public ITerminalNode INTERR() { return GetToken(CSharp4Parser.INTERR, 0); }
		public Is_disambiguation_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_is_disambiguation_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterIs_disambiguation_token(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitIs_disambiguation_token(this);
		}
	}

	[RuleVersion(0)]
	public Is_disambiguation_tokenContext is_disambiguation_token() {
		Is_disambiguation_tokenContext _localctx = new Is_disambiguation_tokenContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_is_disambiguation_token);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1447;
			_la = _input.La(1);
			if ( !(((((_la - 119)) & ~0x3f) == 0 && ((1L << (_la - 119)) & ((1L << (CLOSE_PARENS - 119)) | (1L << (INTERR - 119)) | (1L << (OP_AND - 119)) | (1L << (OP_OR - 119)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Equality_expressionContext : ParserRuleContext {
		public Relational_expressionContext[] relational_expression() {
			return GetRuleContexts<Relational_expressionContext>();
		}
		public Relational_expressionContext relational_expression(int i) {
			return GetRuleContext<Relational_expressionContext>(i);
		}
		public ITerminalNode[] OP_EQ() { return GetTokens(CSharp4Parser.OP_EQ); }
		public ITerminalNode OP_EQ(int i) {
			return GetToken(CSharp4Parser.OP_EQ, i);
		}
		public ITerminalNode[] OP_NE() { return GetTokens(CSharp4Parser.OP_NE); }
		public ITerminalNode OP_NE(int i) {
			return GetToken(CSharp4Parser.OP_NE, i);
		}
		public Equality_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterEquality_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitEquality_expression(this);
		}
	}

	[RuleVersion(0)]
	public Equality_expressionContext equality_expression() {
		Equality_expressionContext _localctx = new Equality_expressionContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_equality_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1449; relational_expression();
			State = 1456;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==OP_EQ || _la==OP_NE) {
				{
				State = 1454;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case OP_EQ:
					{
					{
					State = 1450; Match(OP_EQ);
					State = 1451; relational_expression();
					}
					}
					break;
				case OP_NE:
					{
					{
					State = 1452; Match(OP_NE);
					State = 1453; relational_expression();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 1458;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class And_expressionContext : ParserRuleContext {
		public Equality_expressionContext[] equality_expression() {
			return GetRuleContexts<Equality_expressionContext>();
		}
		public Equality_expressionContext equality_expression(int i) {
			return GetRuleContext<Equality_expressionContext>(i);
		}
		public ITerminalNode[] AMP() { return GetTokens(CSharp4Parser.AMP); }
		public ITerminalNode AMP(int i) {
			return GetToken(CSharp4Parser.AMP, i);
		}
		public And_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAnd_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAnd_expression(this);
		}
	}

	[RuleVersion(0)]
	public And_expressionContext and_expression() {
		And_expressionContext _localctx = new And_expressionContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_and_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1459; equality_expression();
			State = 1464;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AMP) {
				{
				{
				State = 1460; Match(AMP);
				State = 1461; equality_expression();
				}
				}
				State = 1466;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exclusive_or_expressionContext : ParserRuleContext {
		public And_expressionContext[] and_expression() {
			return GetRuleContexts<And_expressionContext>();
		}
		public And_expressionContext and_expression(int i) {
			return GetRuleContext<And_expressionContext>(i);
		}
		public ITerminalNode[] CARET() { return GetTokens(CSharp4Parser.CARET); }
		public ITerminalNode CARET(int i) {
			return GetToken(CSharp4Parser.CARET, i);
		}
		public Exclusive_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusive_or_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterExclusive_or_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitExclusive_or_expression(this);
		}
	}

	[RuleVersion(0)]
	public Exclusive_or_expressionContext exclusive_or_expression() {
		Exclusive_or_expressionContext _localctx = new Exclusive_or_expressionContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_exclusive_or_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1467; and_expression();
			State = 1472;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==CARET) {
				{
				{
				State = 1468; Match(CARET);
				State = 1469; and_expression();
				}
				}
				State = 1474;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inclusive_or_expressionContext : ParserRuleContext {
		public Exclusive_or_expressionContext[] exclusive_or_expression() {
			return GetRuleContexts<Exclusive_or_expressionContext>();
		}
		public Exclusive_or_expressionContext exclusive_or_expression(int i) {
			return GetRuleContext<Exclusive_or_expressionContext>(i);
		}
		public ITerminalNode[] BITWISE_OR() { return GetTokens(CSharp4Parser.BITWISE_OR); }
		public ITerminalNode BITWISE_OR(int i) {
			return GetToken(CSharp4Parser.BITWISE_OR, i);
		}
		public Inclusive_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inclusive_or_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterInclusive_or_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitInclusive_or_expression(this);
		}
	}

	[RuleVersion(0)]
	public Inclusive_or_expressionContext inclusive_or_expression() {
		Inclusive_or_expressionContext _localctx = new Inclusive_or_expressionContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_inclusive_or_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1475; exclusive_or_expression();
			State = 1480;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==BITWISE_OR) {
				{
				{
				State = 1476; Match(BITWISE_OR);
				State = 1477; exclusive_or_expression();
				}
				}
				State = 1482;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_and_expressionContext : ParserRuleContext {
		public Inclusive_or_expressionContext[] inclusive_or_expression() {
			return GetRuleContexts<Inclusive_or_expressionContext>();
		}
		public Inclusive_or_expressionContext inclusive_or_expression(int i) {
			return GetRuleContext<Inclusive_or_expressionContext>(i);
		}
		public ITerminalNode[] OP_AND() { return GetTokens(CSharp4Parser.OP_AND); }
		public ITerminalNode OP_AND(int i) {
			return GetToken(CSharp4Parser.OP_AND, i);
		}
		public Conditional_and_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_and_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterConditional_and_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitConditional_and_expression(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_and_expressionContext conditional_and_expression() {
		Conditional_and_expressionContext _localctx = new Conditional_and_expressionContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_conditional_and_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1483; inclusive_or_expression();
			State = 1488;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==OP_AND) {
				{
				{
				State = 1484; Match(OP_AND);
				State = 1485; inclusive_or_expression();
				}
				}
				State = 1490;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_or_expressionContext : ParserRuleContext {
		public Conditional_and_expressionContext[] conditional_and_expression() {
			return GetRuleContexts<Conditional_and_expressionContext>();
		}
		public Conditional_and_expressionContext conditional_and_expression(int i) {
			return GetRuleContext<Conditional_and_expressionContext>(i);
		}
		public ITerminalNode[] OP_OR() { return GetTokens(CSharp4Parser.OP_OR); }
		public ITerminalNode OP_OR(int i) {
			return GetToken(CSharp4Parser.OP_OR, i);
		}
		public Conditional_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_or_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterConditional_or_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitConditional_or_expression(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_or_expressionContext conditional_or_expression() {
		Conditional_or_expressionContext _localctx = new Conditional_or_expressionContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_conditional_or_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1491; conditional_and_expression();
			State = 1496;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==OP_OR) {
				{
				{
				State = 1492; Match(OP_OR);
				State = 1493; conditional_and_expression();
				}
				}
				State = 1498;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Null_coalescing_expressionContext : ParserRuleContext {
		public Conditional_or_expressionContext conditional_or_expression() {
			return GetRuleContext<Conditional_or_expressionContext>(0);
		}
		public ITerminalNode OP_COALESCING() { return GetToken(CSharp4Parser.OP_COALESCING, 0); }
		public Null_coalescing_expressionContext null_coalescing_expression() {
			return GetRuleContext<Null_coalescing_expressionContext>(0);
		}
		public Null_coalescing_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null_coalescing_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterNull_coalescing_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitNull_coalescing_expression(this);
		}
	}

	[RuleVersion(0)]
	public Null_coalescing_expressionContext null_coalescing_expression() {
		Null_coalescing_expressionContext _localctx = new Null_coalescing_expressionContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_null_coalescing_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1499; conditional_or_expression();
			State = 1502;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OP_COALESCING) {
				{
				State = 1500; Match(OP_COALESCING);
				State = 1501; null_coalescing_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_expressionContext : ParserRuleContext {
		public Null_coalescing_expressionContext null_coalescing_expression() {
			return GetRuleContext<Null_coalescing_expressionContext>(0);
		}
		public ITerminalNode INTERR() { return GetToken(CSharp4Parser.INTERR, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode COLON() { return GetToken(CSharp4Parser.COLON, 0); }
		public Conditional_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterConditional_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitConditional_expression(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_expressionContext conditional_expression() {
		Conditional_expressionContext _localctx = new Conditional_expressionContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_conditional_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1504; null_coalescing_expression();
			State = 1510;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==INTERR) {
				{
				State = 1505; Match(INTERR);
				State = 1506; expression();
				State = 1507; Match(COLON);
				State = 1508; expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lambda_expressionContext : ParserRuleContext {
		public Anonymous_function_signatureContext anonymous_function_signature() {
			return GetRuleContext<Anonymous_function_signatureContext>(0);
		}
		public Right_arrowContext right_arrow() {
			return GetRuleContext<Right_arrowContext>(0);
		}
		public Anonymous_function_bodyContext anonymous_function_body() {
			return GetRuleContext<Anonymous_function_bodyContext>(0);
		}
		public Lambda_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterLambda_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitLambda_expression(this);
		}
	}

	[RuleVersion(0)]
	public Lambda_expressionContext lambda_expression() {
		Lambda_expressionContext _localctx = new Lambda_expressionContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_lambda_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1512; anonymous_function_signature();
			State = 1513; right_arrow();
			State = 1514; anonymous_function_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Anonymous_method_expressionContext : ParserRuleContext {
		public ITerminalNode DELEGATE() { return GetToken(CSharp4Parser.DELEGATE, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Explicit_anonymous_function_signatureContext explicit_anonymous_function_signature() {
			return GetRuleContext<Explicit_anonymous_function_signatureContext>(0);
		}
		public Anonymous_method_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymous_method_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAnonymous_method_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAnonymous_method_expression(this);
		}
	}

	[RuleVersion(0)]
	public Anonymous_method_expressionContext anonymous_method_expression() {
		Anonymous_method_expressionContext _localctx = new Anonymous_method_expressionContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_anonymous_method_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1516; Match(DELEGATE);
			State = 1518;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OPEN_PARENS) {
				{
				State = 1517; explicit_anonymous_function_signature();
				}
			}

			State = 1520; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Anonymous_function_signatureContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Explicit_anonymous_function_parameter_listContext explicit_anonymous_function_parameter_list() {
			return GetRuleContext<Explicit_anonymous_function_parameter_listContext>(0);
		}
		public Implicit_anonymous_function_parameter_listContext implicit_anonymous_function_parameter_list() {
			return GetRuleContext<Implicit_anonymous_function_parameter_listContext>(0);
		}
		public Implicit_anonymous_function_parameterContext implicit_anonymous_function_parameter() {
			return GetRuleContext<Implicit_anonymous_function_parameterContext>(0);
		}
		public Anonymous_function_signatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymous_function_signature; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAnonymous_function_signature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAnonymous_function_signature(this);
		}
	}

	[RuleVersion(0)]
	public Anonymous_function_signatureContext anonymous_function_signature() {
		Anonymous_function_signatureContext _localctx = new Anonymous_function_signatureContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_anonymous_function_signature);
		try {
			State = 1533;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,83,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1522; Match(OPEN_PARENS);
				State = 1523; Match(CLOSE_PARENS);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1524; Match(OPEN_PARENS);
				State = 1525; explicit_anonymous_function_parameter_list();
				State = 1526; Match(CLOSE_PARENS);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1528; Match(OPEN_PARENS);
				State = 1529; implicit_anonymous_function_parameter_list();
				State = 1530; Match(CLOSE_PARENS);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1532; implicit_anonymous_function_parameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explicit_anonymous_function_signatureContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Explicit_anonymous_function_parameter_listContext explicit_anonymous_function_parameter_list() {
			return GetRuleContext<Explicit_anonymous_function_parameter_listContext>(0);
		}
		public Explicit_anonymous_function_signatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicit_anonymous_function_signature; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterExplicit_anonymous_function_signature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitExplicit_anonymous_function_signature(this);
		}
	}

	[RuleVersion(0)]
	public Explicit_anonymous_function_signatureContext explicit_anonymous_function_signature() {
		Explicit_anonymous_function_signatureContext _localctx = new Explicit_anonymous_function_signatureContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_explicit_anonymous_function_signature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1535; Match(OPEN_PARENS);
			State = 1537;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OUT - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STRING - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (USHORT - 65)) | (1L << (VOID - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)))) != 0)) {
				{
				State = 1536; explicit_anonymous_function_parameter_list();
				}
			}

			State = 1539; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explicit_anonymous_function_parameter_listContext : ParserRuleContext {
		public Explicit_anonymous_function_parameterContext[] explicit_anonymous_function_parameter() {
			return GetRuleContexts<Explicit_anonymous_function_parameterContext>();
		}
		public Explicit_anonymous_function_parameterContext explicit_anonymous_function_parameter(int i) {
			return GetRuleContext<Explicit_anonymous_function_parameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Explicit_anonymous_function_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicit_anonymous_function_parameter_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterExplicit_anonymous_function_parameter_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitExplicit_anonymous_function_parameter_list(this);
		}
	}

	[RuleVersion(0)]
	public Explicit_anonymous_function_parameter_listContext explicit_anonymous_function_parameter_list() {
		Explicit_anonymous_function_parameter_listContext _localctx = new Explicit_anonymous_function_parameter_listContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_explicit_anonymous_function_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1541; explicit_anonymous_function_parameter();
			State = 1546;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1542; Match(COMMA);
				State = 1543; explicit_anonymous_function_parameter();
				}
				}
				State = 1548;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explicit_anonymous_function_parameterContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Anonymous_function_parameter_modifierContext anonymous_function_parameter_modifier() {
			return GetRuleContext<Anonymous_function_parameter_modifierContext>(0);
		}
		public Explicit_anonymous_function_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicit_anonymous_function_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterExplicit_anonymous_function_parameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitExplicit_anonymous_function_parameter(this);
		}
	}

	[RuleVersion(0)]
	public Explicit_anonymous_function_parameterContext explicit_anonymous_function_parameter() {
		Explicit_anonymous_function_parameterContext _localctx = new Explicit_anonymous_function_parameterContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_explicit_anonymous_function_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1550;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OUT || _la==REF) {
				{
				State = 1549; anonymous_function_parameter_modifier();
				}
			}

			State = 1552; type();
			State = 1553; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Anonymous_function_parameter_modifierContext : ParserRuleContext {
		public ITerminalNode REF() { return GetToken(CSharp4Parser.REF, 0); }
		public ITerminalNode OUT() { return GetToken(CSharp4Parser.OUT, 0); }
		public Anonymous_function_parameter_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymous_function_parameter_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAnonymous_function_parameter_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAnonymous_function_parameter_modifier(this);
		}
	}

	[RuleVersion(0)]
	public Anonymous_function_parameter_modifierContext anonymous_function_parameter_modifier() {
		Anonymous_function_parameter_modifierContext _localctx = new Anonymous_function_parameter_modifierContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_anonymous_function_parameter_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1555;
			_la = _input.La(1);
			if ( !(_la==OUT || _la==REF) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Implicit_anonymous_function_signatureContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Implicit_anonymous_function_parameter_listContext implicit_anonymous_function_parameter_list() {
			return GetRuleContext<Implicit_anonymous_function_parameter_listContext>(0);
		}
		public Implicit_anonymous_function_parameterContext implicit_anonymous_function_parameter() {
			return GetRuleContext<Implicit_anonymous_function_parameterContext>(0);
		}
		public Implicit_anonymous_function_signatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicit_anonymous_function_signature; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterImplicit_anonymous_function_signature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitImplicit_anonymous_function_signature(this);
		}
	}

	[RuleVersion(0)]
	public Implicit_anonymous_function_signatureContext implicit_anonymous_function_signature() {
		Implicit_anonymous_function_signatureContext _localctx = new Implicit_anonymous_function_signatureContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_implicit_anonymous_function_signature);
		int _la;
		try {
			State = 1563;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case OPEN_PARENS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1557; Match(OPEN_PARENS);
				State = 1559;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BY) | (1L << DESCENDING) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INTO) | (1L << JOIN) | (1L << LET))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (ON - 66)) | (1L << (ORDERBY - 66)) | (1L << (PARTIAL - 66)) | (1L << (REMOVE - 66)) | (1L << (SELECT - 66)) | (1L << (SET - 66)) | (1L << (WHERE - 66)) | (1L << (YIELD - 66)) | (1L << (IDENTIFIER - 66)))) != 0)) {
					{
					State = 1558; implicit_anonymous_function_parameter_list();
					}
				}

				State = 1561; Match(CLOSE_PARENS);
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BY:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1562; implicit_anonymous_function_parameter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Implicit_anonymous_function_parameter_listContext : ParserRuleContext {
		public Implicit_anonymous_function_parameterContext[] implicit_anonymous_function_parameter() {
			return GetRuleContexts<Implicit_anonymous_function_parameterContext>();
		}
		public Implicit_anonymous_function_parameterContext implicit_anonymous_function_parameter(int i) {
			return GetRuleContext<Implicit_anonymous_function_parameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Implicit_anonymous_function_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicit_anonymous_function_parameter_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterImplicit_anonymous_function_parameter_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitImplicit_anonymous_function_parameter_list(this);
		}
	}

	[RuleVersion(0)]
	public Implicit_anonymous_function_parameter_listContext implicit_anonymous_function_parameter_list() {
		Implicit_anonymous_function_parameter_listContext _localctx = new Implicit_anonymous_function_parameter_listContext(_ctx, State);
		EnterRule(_localctx, 176, RULE_implicit_anonymous_function_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1565; implicit_anonymous_function_parameter();
			State = 1570;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1566; Match(COMMA);
				State = 1567; implicit_anonymous_function_parameter();
				}
				}
				State = 1572;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Implicit_anonymous_function_parameterContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Implicit_anonymous_function_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicit_anonymous_function_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterImplicit_anonymous_function_parameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitImplicit_anonymous_function_parameter(this);
		}
	}

	[RuleVersion(0)]
	public Implicit_anonymous_function_parameterContext implicit_anonymous_function_parameter() {
		Implicit_anonymous_function_parameterContext _localctx = new Implicit_anonymous_function_parameterContext(_ctx, State);
		EnterRule(_localctx, 178, RULE_implicit_anonymous_function_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1573; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Anonymous_function_bodyContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Anonymous_function_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymous_function_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAnonymous_function_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAnonymous_function_body(this);
		}
	}

	[RuleVersion(0)]
	public Anonymous_function_bodyContext anonymous_function_body() {
		Anonymous_function_bodyContext _localctx = new Anonymous_function_bodyContext(_ctx, State);
		EnterRule(_localctx, 180, RULE_anonymous_function_body);
		try {
			State = 1577;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case USHORT:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1575; expression();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1576; block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_expressionContext : ParserRuleContext {
		public From_clauseContext from_clause() {
			return GetRuleContext<From_clauseContext>(0);
		}
		public Query_bodyContext query_body() {
			return GetRuleContext<Query_bodyContext>(0);
		}
		public Query_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterQuery_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitQuery_expression(this);
		}
	}

	[RuleVersion(0)]
	public Query_expressionContext query_expression() {
		Query_expressionContext _localctx = new Query_expressionContext(_ctx, State);
		EnterRule(_localctx, 182, RULE_query_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1579; from_clause();
			State = 1580; query_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class From_clauseContext : ParserRuleContext {
		public From_contextual_keywordContext from_contextual_keyword() {
			return GetRuleContext<From_contextual_keywordContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode IN() { return GetToken(CSharp4Parser.IN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterFrom_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitFrom_clause(this);
		}
	}

	[RuleVersion(0)]
	public From_clauseContext from_clause() {
		From_clauseContext _localctx = new From_clauseContext(_ctx, State);
		EnterRule(_localctx, 184, RULE_from_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1582; from_contextual_keyword();
			State = 1584;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,91,_ctx) ) {
			case 1:
				{
				State = 1583; type();
				}
				break;
			}
			State = 1586; identifier();
			State = 1587; Match(IN);
			State = 1588; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_bodyContext : ParserRuleContext {
		public Select_or_group_clauseContext select_or_group_clause() {
			return GetRuleContext<Select_or_group_clauseContext>(0);
		}
		public Query_body_clausesContext query_body_clauses() {
			return GetRuleContext<Query_body_clausesContext>(0);
		}
		public Query_continuationContext query_continuation() {
			return GetRuleContext<Query_continuationContext>(0);
		}
		public Query_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterQuery_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitQuery_body(this);
		}
	}

	[RuleVersion(0)]
	public Query_bodyContext query_body() {
		Query_bodyContext _localctx = new Query_bodyContext(_ctx, State);
		EnterRule(_localctx, 186, RULE_query_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1591;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 46)) & ~0x3f) == 0 && ((1L << (_la - 46)) & ((1L << (FROM - 46)) | (1L << (JOIN - 46)) | (1L << (LET - 46)) | (1L << (ORDERBY - 46)) | (1L << (WHERE - 46)))) != 0)) {
				{
				State = 1590; query_body_clauses();
				}
			}

			State = 1593; select_or_group_clause();
			State = 1595;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,93,_ctx) ) {
			case 1:
				{
				State = 1594; query_continuation();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_body_clausesContext : ParserRuleContext {
		public Query_body_clauseContext[] query_body_clause() {
			return GetRuleContexts<Query_body_clauseContext>();
		}
		public Query_body_clauseContext query_body_clause(int i) {
			return GetRuleContext<Query_body_clauseContext>(i);
		}
		public Query_body_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_body_clauses; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterQuery_body_clauses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitQuery_body_clauses(this);
		}
	}

	[RuleVersion(0)]
	public Query_body_clausesContext query_body_clauses() {
		Query_body_clausesContext _localctx = new Query_body_clausesContext(_ctx, State);
		EnterRule(_localctx, 188, RULE_query_body_clauses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1597; query_body_clause();
			State = 1601;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 46)) & ~0x3f) == 0 && ((1L << (_la - 46)) & ((1L << (FROM - 46)) | (1L << (JOIN - 46)) | (1L << (LET - 46)) | (1L << (ORDERBY - 46)) | (1L << (WHERE - 46)))) != 0)) {
				{
				{
				State = 1598; query_body_clause();
				}
				}
				State = 1603;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_body_clauseContext : ParserRuleContext {
		public From_clauseContext from_clause() {
			return GetRuleContext<From_clauseContext>(0);
		}
		public Let_clauseContext let_clause() {
			return GetRuleContext<Let_clauseContext>(0);
		}
		public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		public Combined_join_clauseContext combined_join_clause() {
			return GetRuleContext<Combined_join_clauseContext>(0);
		}
		public Orderby_clauseContext orderby_clause() {
			return GetRuleContext<Orderby_clauseContext>(0);
		}
		public Query_body_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_body_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterQuery_body_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitQuery_body_clause(this);
		}
	}

	[RuleVersion(0)]
	public Query_body_clauseContext query_body_clause() {
		Query_body_clauseContext _localctx = new Query_body_clauseContext(_ctx, State);
		EnterRule(_localctx, 190, RULE_query_body_clause);
		try {
			State = 1609;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case FROM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1604; from_clause();
				}
				break;
			case LET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1605; let_clause();
				}
				break;
			case WHERE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1606; where_clause();
				}
				break;
			case JOIN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1607; combined_join_clause();
				}
				break;
			case ORDERBY:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1608; orderby_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Let_clauseContext : ParserRuleContext {
		public Let_contextual_keywordContext let_contextual_keyword() {
			return GetRuleContext<Let_contextual_keywordContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(CSharp4Parser.ASSIGNMENT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Let_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_let_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterLet_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitLet_clause(this);
		}
	}

	[RuleVersion(0)]
	public Let_clauseContext let_clause() {
		Let_clauseContext _localctx = new Let_clauseContext(_ctx, State);
		EnterRule(_localctx, 192, RULE_let_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1611; let_contextual_keyword();
			State = 1612; identifier();
			State = 1613; Match(ASSIGNMENT);
			State = 1614; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_clauseContext : ParserRuleContext {
		public Where_contextual_keywordContext where_contextual_keyword() {
			return GetRuleContext<Where_contextual_keywordContext>(0);
		}
		public Boolean_expressionContext boolean_expression() {
			return GetRuleContext<Boolean_expressionContext>(0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterWhere_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitWhere_clause(this);
		}
	}

	[RuleVersion(0)]
	public Where_clauseContext where_clause() {
		Where_clauseContext _localctx = new Where_clauseContext(_ctx, State);
		EnterRule(_localctx, 194, RULE_where_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1616; where_contextual_keyword();
			State = 1617; boolean_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_clauseContext : ParserRuleContext {
		public Join_contextual_keywordContext join_contextual_keyword() {
			return GetRuleContext<Join_contextual_keywordContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode IN() { return GetToken(CSharp4Parser.IN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public On_contextual_keywordContext on_contextual_keyword() {
			return GetRuleContext<On_contextual_keywordContext>(0);
		}
		public Equals_contextual_keywordContext equals_contextual_keyword() {
			return GetRuleContext<Equals_contextual_keywordContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Join_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterJoin_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitJoin_clause(this);
		}
	}

	[RuleVersion(0)]
	public Join_clauseContext join_clause() {
		Join_clauseContext _localctx = new Join_clauseContext(_ctx, State);
		EnterRule(_localctx, 196, RULE_join_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1619; join_contextual_keyword();
			State = 1621;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,96,_ctx) ) {
			case 1:
				{
				State = 1620; type();
				}
				break;
			}
			State = 1623; identifier();
			State = 1624; Match(IN);
			State = 1625; expression();
			State = 1626; on_contextual_keyword();
			State = 1627; expression();
			State = 1628; equals_contextual_keyword();
			State = 1629; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_into_clauseContext : ParserRuleContext {
		public Join_contextual_keywordContext join_contextual_keyword() {
			return GetRuleContext<Join_contextual_keywordContext>(0);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode IN() { return GetToken(CSharp4Parser.IN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public On_contextual_keywordContext on_contextual_keyword() {
			return GetRuleContext<On_contextual_keywordContext>(0);
		}
		public Equals_contextual_keywordContext equals_contextual_keyword() {
			return GetRuleContext<Equals_contextual_keywordContext>(0);
		}
		public Into_contextual_keywordContext into_contextual_keyword() {
			return GetRuleContext<Into_contextual_keywordContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Join_into_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_into_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterJoin_into_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitJoin_into_clause(this);
		}
	}

	[RuleVersion(0)]
	public Join_into_clauseContext join_into_clause() {
		Join_into_clauseContext _localctx = new Join_into_clauseContext(_ctx, State);
		EnterRule(_localctx, 198, RULE_join_into_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1631; join_contextual_keyword();
			State = 1633;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,97,_ctx) ) {
			case 1:
				{
				State = 1632; type();
				}
				break;
			}
			State = 1635; identifier();
			State = 1636; Match(IN);
			State = 1637; expression();
			State = 1638; on_contextual_keyword();
			State = 1639; expression();
			State = 1640; equals_contextual_keyword();
			State = 1641; expression();
			State = 1642; into_contextual_keyword();
			State = 1643; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Combined_join_clauseContext : ParserRuleContext {
		public Join_contextual_keywordContext join_contextual_keyword() {
			return GetRuleContext<Join_contextual_keywordContext>(0);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode IN() { return GetToken(CSharp4Parser.IN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public On_contextual_keywordContext on_contextual_keyword() {
			return GetRuleContext<On_contextual_keywordContext>(0);
		}
		public Equals_contextual_keywordContext equals_contextual_keyword() {
			return GetRuleContext<Equals_contextual_keywordContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Into_contextual_keywordContext into_contextual_keyword() {
			return GetRuleContext<Into_contextual_keywordContext>(0);
		}
		public Combined_join_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_combined_join_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterCombined_join_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitCombined_join_clause(this);
		}
	}

	[RuleVersion(0)]
	public Combined_join_clauseContext combined_join_clause() {
		Combined_join_clauseContext _localctx = new Combined_join_clauseContext(_ctx, State);
		EnterRule(_localctx, 200, RULE_combined_join_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1645; join_contextual_keyword();
			State = 1647;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,98,_ctx) ) {
			case 1:
				{
				State = 1646; type();
				}
				break;
			}
			State = 1649; identifier();
			State = 1650; Match(IN);
			State = 1651; expression();
			State = 1652; on_contextual_keyword();
			State = 1653; expression();
			State = 1654; equals_contextual_keyword();
			State = 1655; expression();
			State = 1659;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==INTO) {
				{
				State = 1656; into_contextual_keyword();
				State = 1657; identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Orderby_clauseContext : ParserRuleContext {
		public Orderby_contextual_keywordContext orderby_contextual_keyword() {
			return GetRuleContext<Orderby_contextual_keywordContext>(0);
		}
		public OrderingsContext orderings() {
			return GetRuleContext<OrderingsContext>(0);
		}
		public Orderby_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderby_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterOrderby_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitOrderby_clause(this);
		}
	}

	[RuleVersion(0)]
	public Orderby_clauseContext orderby_clause() {
		Orderby_clauseContext _localctx = new Orderby_clauseContext(_ctx, State);
		EnterRule(_localctx, 202, RULE_orderby_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1661; orderby_contextual_keyword();
			State = 1662; orderings();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderingsContext : ParserRuleContext {
		public OrderingContext[] ordering() {
			return GetRuleContexts<OrderingContext>();
		}
		public OrderingContext ordering(int i) {
			return GetRuleContext<OrderingContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public OrderingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderings; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterOrderings(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitOrderings(this);
		}
	}

	[RuleVersion(0)]
	public OrderingsContext orderings() {
		OrderingsContext _localctx = new OrderingsContext(_ctx, State);
		EnterRule(_localctx, 204, RULE_orderings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1664; ordering();
			State = 1669;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1665; Match(COMMA);
				State = 1666; ordering();
				}
				}
				State = 1671;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderingContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Ordering_directionContext ordering_direction() {
			return GetRuleContext<Ordering_directionContext>(0);
		}
		public OrderingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ordering; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterOrdering(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitOrdering(this);
		}
	}

	[RuleVersion(0)]
	public OrderingContext ordering() {
		OrderingContext _localctx = new OrderingContext(_ctx, State);
		EnterRule(_localctx, 206, RULE_ordering);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1672; expression();
			State = 1674;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ASCENDING || _la==DESCENDING) {
				{
				State = 1673; ordering_direction();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ordering_directionContext : ParserRuleContext {
		public Ascending_contextual_keywordContext ascending_contextual_keyword() {
			return GetRuleContext<Ascending_contextual_keywordContext>(0);
		}
		public Descending_contextual_keywordContext descending_contextual_keyword() {
			return GetRuleContext<Descending_contextual_keywordContext>(0);
		}
		public Ordering_directionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ordering_direction; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterOrdering_direction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitOrdering_direction(this);
		}
	}

	[RuleVersion(0)]
	public Ordering_directionContext ordering_direction() {
		Ordering_directionContext _localctx = new Ordering_directionContext(_ctx, State);
		EnterRule(_localctx, 208, RULE_ordering_direction);
		try {
			State = 1678;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ASCENDING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1676; ascending_contextual_keyword();
				}
				break;
			case DESCENDING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1677; descending_contextual_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_or_group_clauseContext : ParserRuleContext {
		public Select_clauseContext select_clause() {
			return GetRuleContext<Select_clauseContext>(0);
		}
		public Group_clauseContext group_clause() {
			return GetRuleContext<Group_clauseContext>(0);
		}
		public Select_or_group_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_or_group_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterSelect_or_group_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitSelect_or_group_clause(this);
		}
	}

	[RuleVersion(0)]
	public Select_or_group_clauseContext select_or_group_clause() {
		Select_or_group_clauseContext _localctx = new Select_or_group_clauseContext(_ctx, State);
		EnterRule(_localctx, 210, RULE_select_or_group_clause);
		try {
			State = 1682;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case SELECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1680; select_clause();
				}
				break;
			case GROUP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1681; group_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_clauseContext : ParserRuleContext {
		public Select_contextual_keywordContext select_contextual_keyword() {
			return GetRuleContext<Select_contextual_keywordContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Select_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterSelect_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitSelect_clause(this);
		}
	}

	[RuleVersion(0)]
	public Select_clauseContext select_clause() {
		Select_clauseContext _localctx = new Select_clauseContext(_ctx, State);
		EnterRule(_localctx, 212, RULE_select_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1684; select_contextual_keyword();
			State = 1685; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_clauseContext : ParserRuleContext {
		public Group_contextual_keywordContext group_contextual_keyword() {
			return GetRuleContext<Group_contextual_keywordContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public By_contextual_keywordContext by_contextual_keyword() {
			return GetRuleContext<By_contextual_keywordContext>(0);
		}
		public Group_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterGroup_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitGroup_clause(this);
		}
	}

	[RuleVersion(0)]
	public Group_clauseContext group_clause() {
		Group_clauseContext _localctx = new Group_clauseContext(_ctx, State);
		EnterRule(_localctx, 214, RULE_group_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1687; group_contextual_keyword();
			State = 1688; expression();
			State = 1689; by_contextual_keyword();
			State = 1690; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_continuationContext : ParserRuleContext {
		public Into_contextual_keywordContext into_contextual_keyword() {
			return GetRuleContext<Into_contextual_keywordContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Query_bodyContext query_body() {
			return GetRuleContext<Query_bodyContext>(0);
		}
		public Query_continuationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_continuation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterQuery_continuation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitQuery_continuation(this);
		}
	}

	[RuleVersion(0)]
	public Query_continuationContext query_continuation() {
		Query_continuationContext _localctx = new Query_continuationContext(_ctx, State);
		EnterRule(_localctx, 216, RULE_query_continuation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1692; into_contextual_keyword();
			State = 1693; identifier();
			State = 1694; query_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(_ctx, State);
		EnterRule(_localctx, 218, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1696; unary_expression();
			State = 1697; assignment_operator();
			State = 1698; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_operatorContext : ParserRuleContext {
		public ITerminalNode ASSIGNMENT() { return GetToken(CSharp4Parser.ASSIGNMENT, 0); }
		public ITerminalNode OP_ADD_ASSIGNMENT() { return GetToken(CSharp4Parser.OP_ADD_ASSIGNMENT, 0); }
		public ITerminalNode OP_SUB_ASSIGNMENT() { return GetToken(CSharp4Parser.OP_SUB_ASSIGNMENT, 0); }
		public ITerminalNode OP_MULT_ASSIGNMENT() { return GetToken(CSharp4Parser.OP_MULT_ASSIGNMENT, 0); }
		public ITerminalNode OP_DIV_ASSIGNMENT() { return GetToken(CSharp4Parser.OP_DIV_ASSIGNMENT, 0); }
		public ITerminalNode OP_MOD_ASSIGNMENT() { return GetToken(CSharp4Parser.OP_MOD_ASSIGNMENT, 0); }
		public ITerminalNode OP_AND_ASSIGNMENT() { return GetToken(CSharp4Parser.OP_AND_ASSIGNMENT, 0); }
		public ITerminalNode OP_OR_ASSIGNMENT() { return GetToken(CSharp4Parser.OP_OR_ASSIGNMENT, 0); }
		public ITerminalNode OP_XOR_ASSIGNMENT() { return GetToken(CSharp4Parser.OP_XOR_ASSIGNMENT, 0); }
		public ITerminalNode OP_LEFT_SHIFT_ASSIGNMENT() { return GetToken(CSharp4Parser.OP_LEFT_SHIFT_ASSIGNMENT, 0); }
		public Right_shift_assignmentContext right_shift_assignment() {
			return GetRuleContext<Right_shift_assignmentContext>(0);
		}
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAssignment_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAssignment_operator(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_operatorContext assignment_operator() {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(_ctx, State);
		EnterRule(_localctx, 220, RULE_assignment_operator);
		try {
			State = 1711;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ASSIGNMENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1700; Match(ASSIGNMENT);
				}
				break;
			case OP_ADD_ASSIGNMENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1701; Match(OP_ADD_ASSIGNMENT);
				}
				break;
			case OP_SUB_ASSIGNMENT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1702; Match(OP_SUB_ASSIGNMENT);
				}
				break;
			case OP_MULT_ASSIGNMENT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1703; Match(OP_MULT_ASSIGNMENT);
				}
				break;
			case OP_DIV_ASSIGNMENT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1704; Match(OP_DIV_ASSIGNMENT);
				}
				break;
			case OP_MOD_ASSIGNMENT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1705; Match(OP_MOD_ASSIGNMENT);
				}
				break;
			case OP_AND_ASSIGNMENT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1706; Match(OP_AND_ASSIGNMENT);
				}
				break;
			case OP_OR_ASSIGNMENT:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1707; Match(OP_OR_ASSIGNMENT);
				}
				break;
			case OP_XOR_ASSIGNMENT:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1708; Match(OP_XOR_ASSIGNMENT);
				}
				break;
			case OP_LEFT_SHIFT_ASSIGNMENT:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1709; Match(OP_LEFT_SHIFT_ASSIGNMENT);
				}
				break;
			case GT:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1710; right_shift_assignment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public Non_assignment_expressionContext non_assignment_expression() {
			return GetRuleContext<Non_assignment_expressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(_ctx, State);
		EnterRule(_localctx, 222, RULE_expression);
		try {
			State = 1715;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,105,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1713; assignment();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1714; non_assignment_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Non_assignment_expressionContext : ParserRuleContext {
		public Lambda_expressionContext lambda_expression() {
			return GetRuleContext<Lambda_expressionContext>(0);
		}
		public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		public Conditional_expressionContext conditional_expression() {
			return GetRuleContext<Conditional_expressionContext>(0);
		}
		public Non_assignment_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_non_assignment_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterNon_assignment_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitNon_assignment_expression(this);
		}
	}

	[RuleVersion(0)]
	public Non_assignment_expressionContext non_assignment_expression() {
		Non_assignment_expressionContext _localctx = new Non_assignment_expressionContext(_ctx, State);
		EnterRule(_localctx, 224, RULE_non_assignment_expression);
		try {
			State = 1720;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,106,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1717; lambda_expression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1718; query_expression();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1719; conditional_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_expressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Constant_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterConstant_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitConstant_expression(this);
		}
	}

	[RuleVersion(0)]
	public Constant_expressionContext constant_expression() {
		Constant_expressionContext _localctx = new Constant_expressionContext(_ctx, State);
		EnterRule(_localctx, 226, RULE_constant_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1722; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_expressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Boolean_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterBoolean_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitBoolean_expression(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_expressionContext boolean_expression() {
		Boolean_expressionContext _localctx = new Boolean_expressionContext(_ctx, State);
		EnterRule(_localctx, 228, RULE_boolean_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1724; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public Labeled_statementContext labeled_statement() {
			return GetRuleContext<Labeled_statementContext>(0);
		}
		public Declaration_statementContext declaration_statement() {
			return GetRuleContext<Declaration_statementContext>(0);
		}
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 230, RULE_statement);
		try {
			State = 1729;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,107,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1726; labeled_statement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1727; declaration_statement();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1728; embedded_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Embedded_statementContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Simple_embedded_statementContext simple_embedded_statement() {
			return GetRuleContext<Simple_embedded_statementContext>(0);
		}
		public Embedded_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_embedded_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterEmbedded_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitEmbedded_statement(this);
		}
	}

	[RuleVersion(0)]
	public Embedded_statementContext embedded_statement() {
		Embedded_statementContext _localctx = new Embedded_statementContext(_ctx, State);
		EnterRule(_localctx, 232, RULE_embedded_statement);
		try {
			State = 1733;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1731; block();
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BASE:
			case BOOL:
			case BREAK:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case CONTINUE:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DO:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FIXED:
			case FLOAT:
			case FOR:
			case FOREACH:
			case FROM:
			case GET:
			case GOTO:
			case GROUP:
			case IF:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LOCK:
			case LONG:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case RETURN:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case SWITCH:
			case THIS:
			case THROW:
			case TRUE:
			case TRY:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNSAFE:
			case USHORT:
			case USING:
			case WHERE:
			case WHILE:
			case YIELD:
			case IDENTIFIER:
			case INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case OPEN_PARENS:
			case SEMICOLON:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1732; simple_embedded_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_embedded_statementContext : ParserRuleContext {
		public Empty_statementContext empty_statement() {
			return GetRuleContext<Empty_statementContext>(0);
		}
		public Expression_statementContext expression_statement() {
			return GetRuleContext<Expression_statementContext>(0);
		}
		public Selection_statementContext selection_statement() {
			return GetRuleContext<Selection_statementContext>(0);
		}
		public Iteration_statementContext iteration_statement() {
			return GetRuleContext<Iteration_statementContext>(0);
		}
		public Jump_statementContext jump_statement() {
			return GetRuleContext<Jump_statementContext>(0);
		}
		public Try_statementContext try_statement() {
			return GetRuleContext<Try_statementContext>(0);
		}
		public Checked_statementContext checked_statement() {
			return GetRuleContext<Checked_statementContext>(0);
		}
		public Unchecked_statementContext unchecked_statement() {
			return GetRuleContext<Unchecked_statementContext>(0);
		}
		public Lock_statementContext lock_statement() {
			return GetRuleContext<Lock_statementContext>(0);
		}
		public Using_statementContext using_statement() {
			return GetRuleContext<Using_statementContext>(0);
		}
		public Yield_statementContext yield_statement() {
			return GetRuleContext<Yield_statementContext>(0);
		}
		public Embedded_statement_unsafeContext embedded_statement_unsafe() {
			return GetRuleContext<Embedded_statement_unsafeContext>(0);
		}
		public Simple_embedded_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_embedded_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterSimple_embedded_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitSimple_embedded_statement(this);
		}
	}

	[RuleVersion(0)]
	public Simple_embedded_statementContext simple_embedded_statement() {
		Simple_embedded_statementContext _localctx = new Simple_embedded_statementContext(_ctx, State);
		EnterRule(_localctx, 234, RULE_simple_embedded_statement);
		try {
			State = 1747;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,109,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1735; empty_statement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1736; expression_statement();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1737; selection_statement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1738; iteration_statement();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1739; jump_statement();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1740; try_statement();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1741; checked_statement();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1742; unchecked_statement();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1743; lock_statement();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1744; using_statement();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1745; yield_statement();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1746; embedded_statement_unsafe();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharp4Parser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharp4Parser.CLOSE_BRACE, 0); }
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 236, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1749; Match(OPEN_BRACE);
			State = 1751;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (ADD - 10)) | (1L << (ALIAS - 10)) | (1L << (ARGLIST - 10)) | (1L << (ASCENDING - 10)) | (1L << (BASE - 10)) | (1L << (BOOL - 10)) | (1L << (BREAK - 10)) | (1L << (BY - 10)) | (1L << (BYTE - 10)) | (1L << (CHAR - 10)) | (1L << (CHECKED - 10)) | (1L << (CONST - 10)) | (1L << (CONTINUE - 10)) | (1L << (DECIMAL - 10)) | (1L << (DEFAULT - 10)) | (1L << (DELEGATE - 10)) | (1L << (DESCENDING - 10)) | (1L << (DO - 10)) | (1L << (DOUBLE - 10)) | (1L << (DYNAMIC - 10)) | (1L << (EQUALS - 10)) | (1L << (FALSE - 10)) | (1L << (FIXED - 10)) | (1L << (FLOAT - 10)) | (1L << (FOR - 10)) | (1L << (FOREACH - 10)) | (1L << (FROM - 10)) | (1L << (GET - 10)) | (1L << (GOTO - 10)) | (1L << (GROUP - 10)) | (1L << (IF - 10)) | (1L << (INT - 10)) | (1L << (INTO - 10)) | (1L << (JOIN - 10)) | (1L << (LET - 10)) | (1L << (LOCK - 10)) | (1L << (LONG - 10)) | (1L << (NEW - 10)) | (1L << (NULL - 10)) | (1L << (OBJECT - 10)) | (1L << (ON - 10)) | (1L << (ORDERBY - 10)) | (1L << (PARTIAL - 10)))) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (REMOVE - 78)) | (1L << (RETURN - 78)) | (1L << (SBYTE - 78)) | (1L << (SELECT - 78)) | (1L << (SET - 78)) | (1L << (SHORT - 78)) | (1L << (SIZEOF - 78)) | (1L << (STRING - 78)) | (1L << (SWITCH - 78)) | (1L << (THIS - 78)) | (1L << (THROW - 78)) | (1L << (TRUE - 78)) | (1L << (TRY - 78)) | (1L << (TYPEOF - 78)) | (1L << (UINT - 78)) | (1L << (ULONG - 78)) | (1L << (UNCHECKED - 78)) | (1L << (UNSAFE - 78)) | (1L << (USHORT - 78)) | (1L << (USING - 78)) | (1L << (VOID - 78)) | (1L << (WHERE - 78)) | (1L << (WHILE - 78)) | (1L << (YIELD - 78)) | (1L << (IDENTIFIER - 78)) | (1L << (INTEGER_LITERAL - 78)) | (1L << (REAL_LITERAL - 78)) | (1L << (CHARACTER_LITERAL - 78)) | (1L << (STRING_LITERAL - 78)) | (1L << (OPEN_BRACE - 78)) | (1L << (OPEN_PARENS - 78)) | (1L << (SEMICOLON - 78)) | (1L << (PLUS - 78)) | (1L << (MINUS - 78)) | (1L << (STAR - 78)) | (1L << (AMP - 78)) | (1L << (BANG - 78)) | (1L << (TILDE - 78)) | (1L << (OP_INC - 78)) | (1L << (OP_DEC - 78)))) != 0)) {
				{
				State = 1750; statement_list();
				}
			}

			State = 1753; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_listContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterStatement_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitStatement_list(this);
		}
	}

	[RuleVersion(0)]
	public Statement_listContext statement_list() {
		Statement_listContext _localctx = new Statement_listContext(_ctx, State);
		EnterRule(_localctx, 238, RULE_statement_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1756;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1755; statement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1758;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,111,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Empty_statementContext : ParserRuleContext {
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Empty_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_empty_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterEmpty_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitEmpty_statement(this);
		}
	}

	[RuleVersion(0)]
	public Empty_statementContext empty_statement() {
		Empty_statementContext _localctx = new Empty_statementContext(_ctx, State);
		EnterRule(_localctx, 240, RULE_empty_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1760; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Labeled_statementContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(CSharp4Parser.COLON, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public Labeled_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeled_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterLabeled_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitLabeled_statement(this);
		}
	}

	[RuleVersion(0)]
	public Labeled_statementContext labeled_statement() {
		Labeled_statementContext _localctx = new Labeled_statementContext(_ctx, State);
		EnterRule(_localctx, 242, RULE_labeled_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1762; identifier();
			State = 1763; Match(COLON);
			State = 1764; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declaration_statementContext : ParserRuleContext {
		public Local_variable_declarationContext local_variable_declaration() {
			return GetRuleContext<Local_variable_declarationContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Local_constant_declarationContext local_constant_declaration() {
			return GetRuleContext<Local_constant_declarationContext>(0);
		}
		public Declaration_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterDeclaration_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitDeclaration_statement(this);
		}
	}

	[RuleVersion(0)]
	public Declaration_statementContext declaration_statement() {
		Declaration_statementContext _localctx = new Declaration_statementContext(_ctx, State);
		EnterRule(_localctx, 244, RULE_declaration_statement);
		try {
			State = 1772;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case DECIMAL:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case STRING:
			case UINT:
			case ULONG:
			case USHORT:
			case VOID:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1766; local_variable_declaration();
				State = 1767; Match(SEMICOLON);
				}
				break;
			case CONST:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1769; local_constant_declaration();
				State = 1770; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_variable_declarationContext : ParserRuleContext {
		public Local_variable_typeContext t;
		public Local_variable_declaratorsContext local_variable_declarators() {
			return GetRuleContext<Local_variable_declaratorsContext>(0);
		}
		public Local_variable_typeContext local_variable_type() {
			return GetRuleContext<Local_variable_typeContext>(0);
		}
		public Local_variable_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_variable_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterLocal_variable_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitLocal_variable_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Local_variable_declarationContext local_variable_declaration() {
		Local_variable_declarationContext _localctx = new Local_variable_declarationContext(_ctx, State);
		EnterRule(_localctx, 246, RULE_local_variable_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1774; _localctx.t = local_variable_type();
			State = 1775; local_variable_declarators();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_variable_typeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Local_variable_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_variable_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterLocal_variable_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitLocal_variable_type(this);
		}
	}

	[RuleVersion(0)]
	public Local_variable_typeContext local_variable_type() {
		Local_variable_typeContext _localctx = new Local_variable_typeContext(_ctx, State);
		EnterRule(_localctx, 248, RULE_local_variable_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1777; type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_variable_declaratorsContext : ParserRuleContext {
		public Local_variable_declaratorContext[] local_variable_declarator() {
			return GetRuleContexts<Local_variable_declaratorContext>();
		}
		public Local_variable_declaratorContext local_variable_declarator(int i) {
			return GetRuleContext<Local_variable_declaratorContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Local_variable_declaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_variable_declarators; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterLocal_variable_declarators(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitLocal_variable_declarators(this);
		}
	}

	[RuleVersion(0)]
	public Local_variable_declaratorsContext local_variable_declarators() {
		Local_variable_declaratorsContext _localctx = new Local_variable_declaratorsContext(_ctx, State);
		EnterRule(_localctx, 250, RULE_local_variable_declarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1779; local_variable_declarator();
			State = 1784;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1780; Match(COMMA);
				State = 1781; local_variable_declarator();
				}
				}
				State = 1786;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_variable_declaratorContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(CSharp4Parser.ASSIGNMENT, 0); }
		public Local_variable_initializerContext local_variable_initializer() {
			return GetRuleContext<Local_variable_initializerContext>(0);
		}
		public Local_variable_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_variable_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterLocal_variable_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitLocal_variable_declarator(this);
		}
	}

	[RuleVersion(0)]
	public Local_variable_declaratorContext local_variable_declarator() {
		Local_variable_declaratorContext _localctx = new Local_variable_declaratorContext(_ctx, State);
		EnterRule(_localctx, 252, RULE_local_variable_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1787; identifier();
			State = 1790;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ASSIGNMENT) {
				{
				State = 1788; Match(ASSIGNMENT);
				State = 1789; local_variable_initializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_variable_initializerContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Array_initializerContext array_initializer() {
			return GetRuleContext<Array_initializerContext>(0);
		}
		public Local_variable_initializer_unsafeContext local_variable_initializer_unsafe() {
			return GetRuleContext<Local_variable_initializer_unsafeContext>(0);
		}
		public Local_variable_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_variable_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterLocal_variable_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitLocal_variable_initializer(this);
		}
	}

	[RuleVersion(0)]
	public Local_variable_initializerContext local_variable_initializer() {
		Local_variable_initializerContext _localctx = new Local_variable_initializerContext(_ctx, State);
		EnterRule(_localctx, 254, RULE_local_variable_initializer);
		try {
			State = 1795;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case USHORT:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1792; expression();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1793; array_initializer();
				}
				break;
			case STACKALLOC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1794; local_variable_initializer_unsafe();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_constant_declarationContext : ParserRuleContext {
		public ITerminalNode CONST() { return GetToken(CSharp4Parser.CONST, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Constant_declaratorsContext constant_declarators() {
			return GetRuleContext<Constant_declaratorsContext>(0);
		}
		public Local_constant_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_constant_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterLocal_constant_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitLocal_constant_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Local_constant_declarationContext local_constant_declaration() {
		Local_constant_declarationContext _localctx = new Local_constant_declarationContext(_ctx, State);
		EnterRule(_localctx, 256, RULE_local_constant_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1797; Match(CONST);
			State = 1798; type();
			State = 1799; constant_declarators();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_statementContext : ParserRuleContext {
		public Statement_expressionContext statement_expression() {
			return GetRuleContext<Statement_expressionContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Expression_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterExpression_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitExpression_statement(this);
		}
	}

	[RuleVersion(0)]
	public Expression_statementContext expression_statement() {
		Expression_statementContext _localctx = new Expression_statementContext(_ctx, State);
		EnterRule(_localctx, 258, RULE_expression_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1801; statement_expression();
			State = 1802; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_expressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Statement_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterStatement_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitStatement_expression(this);
		}
	}

	[RuleVersion(0)]
	public Statement_expressionContext statement_expression() {
		Statement_expressionContext _localctx = new Statement_expressionContext(_ctx, State);
		EnterRule(_localctx, 260, RULE_statement_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1804; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selection_statementContext : ParserRuleContext {
		public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		public Switch_statementContext switch_statement() {
			return GetRuleContext<Switch_statementContext>(0);
		}
		public Selection_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selection_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterSelection_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitSelection_statement(this);
		}
	}

	[RuleVersion(0)]
	public Selection_statementContext selection_statement() {
		Selection_statementContext _localctx = new Selection_statementContext(_ctx, State);
		EnterRule(_localctx, 262, RULE_selection_statement);
		try {
			State = 1808;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1806; if_statement();
				}
				break;
			case SWITCH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1807; switch_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_bodyContext : ParserRuleContext {
		public If_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_body; } }
	 
		public If_bodyContext() { }
		public virtual void CopyFrom(If_bodyContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfBodyBlockContext : If_bodyContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfBodyBlockContext(If_bodyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterIfBodyBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitIfBodyBlock(this);
		}
	}
	public partial class IfBodySingleContext : If_bodyContext {
		public Simple_embedded_statementContext simple_embedded_statement() {
			return GetRuleContext<Simple_embedded_statementContext>(0);
		}
		public IfBodySingleContext(If_bodyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterIfBodySingle(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitIfBodySingle(this);
		}
	}

	[RuleVersion(0)]
	public If_bodyContext if_body() {
		If_bodyContext _localctx = new If_bodyContext(_ctx, State);
		EnterRule(_localctx, 264, RULE_if_body);
		try {
			State = 1812;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case OPEN_BRACE:
				_localctx = new IfBodyBlockContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1810; block();
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BASE:
			case BOOL:
			case BREAK:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case CONTINUE:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DO:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FIXED:
			case FLOAT:
			case FOR:
			case FOREACH:
			case FROM:
			case GET:
			case GOTO:
			case GROUP:
			case IF:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LOCK:
			case LONG:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case RETURN:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case SWITCH:
			case THIS:
			case THROW:
			case TRUE:
			case TRY:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNSAFE:
			case USHORT:
			case USING:
			case WHERE:
			case WHILE:
			case YIELD:
			case IDENTIFIER:
			case INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case OPEN_PARENS:
			case SEMICOLON:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				_localctx = new IfBodySingleContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1811; simple_embedded_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(CSharp4Parser.IF, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public Boolean_expressionContext boolean_expression() {
			return GetRuleContext<Boolean_expressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public If_bodyContext[] if_body() {
			return GetRuleContexts<If_bodyContext>();
		}
		public If_bodyContext if_body(int i) {
			return GetRuleContext<If_bodyContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(CSharp4Parser.ELSE, 0); }
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(_ctx, State);
		EnterRule(_localctx, 266, RULE_if_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1814; Match(IF);
			State = 1815; Match(OPEN_PARENS);
			State = 1816; boolean_expression();
			State = 1817; Match(CLOSE_PARENS);
			State = 1818; if_body();
			State = 1821;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,118,_ctx) ) {
			case 1:
				{
				State = 1819; Match(ELSE);
				State = 1820; if_body();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_statementContext : ParserRuleContext {
		public ITerminalNode SWITCH() { return GetToken(CSharp4Parser.SWITCH, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Switch_blockContext switch_block() {
			return GetRuleContext<Switch_blockContext>(0);
		}
		public Switch_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterSwitch_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitSwitch_statement(this);
		}
	}

	[RuleVersion(0)]
	public Switch_statementContext switch_statement() {
		Switch_statementContext _localctx = new Switch_statementContext(_ctx, State);
		EnterRule(_localctx, 268, RULE_switch_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1823; Match(SWITCH);
			State = 1824; Match(OPEN_PARENS);
			State = 1825; expression();
			State = 1826; Match(CLOSE_PARENS);
			State = 1827; switch_block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_blockContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharp4Parser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharp4Parser.CLOSE_BRACE, 0); }
		public Switch_sectionsContext switch_sections() {
			return GetRuleContext<Switch_sectionsContext>(0);
		}
		public Switch_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterSwitch_block(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitSwitch_block(this);
		}
	}

	[RuleVersion(0)]
	public Switch_blockContext switch_block() {
		Switch_blockContext _localctx = new Switch_blockContext(_ctx, State);
		EnterRule(_localctx, 270, RULE_switch_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1829; Match(OPEN_BRACE);
			State = 1831;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CASE || _la==DEFAULT) {
				{
				State = 1830; switch_sections();
				}
			}

			State = 1833; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_sectionsContext : ParserRuleContext {
		public Switch_sectionContext[] switch_section() {
			return GetRuleContexts<Switch_sectionContext>();
		}
		public Switch_sectionContext switch_section(int i) {
			return GetRuleContext<Switch_sectionContext>(i);
		}
		public Switch_sectionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_sections; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterSwitch_sections(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitSwitch_sections(this);
		}
	}

	[RuleVersion(0)]
	public Switch_sectionsContext switch_sections() {
		Switch_sectionsContext _localctx = new Switch_sectionsContext(_ctx, State);
		EnterRule(_localctx, 272, RULE_switch_sections);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1835; switch_section();
			State = 1839;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==CASE || _la==DEFAULT) {
				{
				{
				State = 1836; switch_section();
				}
				}
				State = 1841;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_sectionContext : ParserRuleContext {
		public Switch_labelsContext switch_labels() {
			return GetRuleContext<Switch_labelsContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public Switch_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_section; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterSwitch_section(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitSwitch_section(this);
		}
	}

	[RuleVersion(0)]
	public Switch_sectionContext switch_section() {
		Switch_sectionContext _localctx = new Switch_sectionContext(_ctx, State);
		EnterRule(_localctx, 274, RULE_switch_section);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1842; switch_labels();
			State = 1843; statement_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_labelsContext : ParserRuleContext {
		public Switch_labelContext[] switch_label() {
			return GetRuleContexts<Switch_labelContext>();
		}
		public Switch_labelContext switch_label(int i) {
			return GetRuleContext<Switch_labelContext>(i);
		}
		public Switch_labelsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_labels; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterSwitch_labels(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitSwitch_labels(this);
		}
	}

	[RuleVersion(0)]
	public Switch_labelsContext switch_labels() {
		Switch_labelsContext _localctx = new Switch_labelsContext(_ctx, State);
		EnterRule(_localctx, 276, RULE_switch_labels);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1845; switch_label();
			State = 1849;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,121,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1846; switch_label();
					}
					} 
				}
				State = 1851;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,121,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_labelContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(CSharp4Parser.CASE, 0); }
		public Constant_expressionContext constant_expression() {
			return GetRuleContext<Constant_expressionContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(CSharp4Parser.COLON, 0); }
		public ITerminalNode DEFAULT() { return GetToken(CSharp4Parser.DEFAULT, 0); }
		public Switch_labelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_label; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterSwitch_label(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitSwitch_label(this);
		}
	}

	[RuleVersion(0)]
	public Switch_labelContext switch_label() {
		Switch_labelContext _localctx = new Switch_labelContext(_ctx, State);
		EnterRule(_localctx, 278, RULE_switch_label);
		try {
			State = 1858;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case CASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1852; Match(CASE);
				State = 1853; constant_expression();
				State = 1854; Match(COLON);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1856; Match(DEFAULT);
				State = 1857; Match(COLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Iteration_statementContext : ParserRuleContext {
		public While_statementContext while_statement() {
			return GetRuleContext<While_statementContext>(0);
		}
		public Do_statementContext do_statement() {
			return GetRuleContext<Do_statementContext>(0);
		}
		public For_statementContext for_statement() {
			return GetRuleContext<For_statementContext>(0);
		}
		public Foreach_statementContext foreach_statement() {
			return GetRuleContext<Foreach_statementContext>(0);
		}
		public Iteration_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iteration_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterIteration_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitIteration_statement(this);
		}
	}

	[RuleVersion(0)]
	public Iteration_statementContext iteration_statement() {
		Iteration_statementContext _localctx = new Iteration_statementContext(_ctx, State);
		EnterRule(_localctx, 280, RULE_iteration_statement);
		try {
			State = 1864;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case WHILE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1860; while_statement();
				}
				break;
			case DO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1861; do_statement();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1862; for_statement();
				}
				break;
			case FOREACH:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1863; foreach_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_statementContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(CSharp4Parser.WHILE, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public Boolean_expressionContext boolean_expression() {
			return GetRuleContext<Boolean_expressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public While_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterWhile_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitWhile_statement(this);
		}
	}

	[RuleVersion(0)]
	public While_statementContext while_statement() {
		While_statementContext _localctx = new While_statementContext(_ctx, State);
		EnterRule(_localctx, 282, RULE_while_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1866; Match(WHILE);
			State = 1867; Match(OPEN_PARENS);
			State = 1868; boolean_expression();
			State = 1869; Match(CLOSE_PARENS);
			State = 1870; embedded_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Do_statementContext : ParserRuleContext {
		public ITerminalNode DO() { return GetToken(CSharp4Parser.DO, 0); }
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(CSharp4Parser.WHILE, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public Boolean_expressionContext boolean_expression() {
			return GetRuleContext<Boolean_expressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Do_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_do_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterDo_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitDo_statement(this);
		}
	}

	[RuleVersion(0)]
	public Do_statementContext do_statement() {
		Do_statementContext _localctx = new Do_statementContext(_ctx, State);
		EnterRule(_localctx, 284, RULE_do_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1872; Match(DO);
			State = 1873; embedded_statement();
			State = 1874; Match(WHILE);
			State = 1875; Match(OPEN_PARENS);
			State = 1876; boolean_expression();
			State = 1877; Match(CLOSE_PARENS);
			State = 1878; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_statementContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(CSharp4Parser.FOR, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ITerminalNode[] SEMICOLON() { return GetTokens(CSharp4Parser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(CSharp4Parser.SEMICOLON, i);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public For_initializerContext for_initializer() {
			return GetRuleContext<For_initializerContext>(0);
		}
		public For_conditionContext for_condition() {
			return GetRuleContext<For_conditionContext>(0);
		}
		public For_iteratorContext for_iterator() {
			return GetRuleContext<For_iteratorContext>(0);
		}
		public For_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterFor_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitFor_statement(this);
		}
	}

	[RuleVersion(0)]
	public For_statementContext for_statement() {
		For_statementContext _localctx = new For_statementContext(_ctx, State);
		EnterRule(_localctx, 286, RULE_for_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1880; Match(FOR);
			State = 1881; Match(OPEN_PARENS);
			State = 1883;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (ADD - 10)) | (1L << (ALIAS - 10)) | (1L << (ARGLIST - 10)) | (1L << (ASCENDING - 10)) | (1L << (BASE - 10)) | (1L << (BOOL - 10)) | (1L << (BY - 10)) | (1L << (BYTE - 10)) | (1L << (CHAR - 10)) | (1L << (CHECKED - 10)) | (1L << (DECIMAL - 10)) | (1L << (DEFAULT - 10)) | (1L << (DELEGATE - 10)) | (1L << (DESCENDING - 10)) | (1L << (DOUBLE - 10)) | (1L << (DYNAMIC - 10)) | (1L << (EQUALS - 10)) | (1L << (FALSE - 10)) | (1L << (FLOAT - 10)) | (1L << (FROM - 10)) | (1L << (GET - 10)) | (1L << (GROUP - 10)) | (1L << (INT - 10)) | (1L << (INTO - 10)) | (1L << (JOIN - 10)) | (1L << (LET - 10)) | (1L << (LONG - 10)) | (1L << (NEW - 10)) | (1L << (NULL - 10)) | (1L << (OBJECT - 10)) | (1L << (ON - 10)) | (1L << (ORDERBY - 10)) | (1L << (PARTIAL - 10)))) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (REMOVE - 78)) | (1L << (SBYTE - 78)) | (1L << (SELECT - 78)) | (1L << (SET - 78)) | (1L << (SHORT - 78)) | (1L << (SIZEOF - 78)) | (1L << (STRING - 78)) | (1L << (THIS - 78)) | (1L << (TRUE - 78)) | (1L << (TYPEOF - 78)) | (1L << (UINT - 78)) | (1L << (ULONG - 78)) | (1L << (UNCHECKED - 78)) | (1L << (USHORT - 78)) | (1L << (VOID - 78)) | (1L << (WHERE - 78)) | (1L << (YIELD - 78)) | (1L << (IDENTIFIER - 78)) | (1L << (INTEGER_LITERAL - 78)) | (1L << (REAL_LITERAL - 78)) | (1L << (CHARACTER_LITERAL - 78)) | (1L << (STRING_LITERAL - 78)) | (1L << (OPEN_PARENS - 78)) | (1L << (PLUS - 78)) | (1L << (MINUS - 78)) | (1L << (STAR - 78)) | (1L << (AMP - 78)) | (1L << (BANG - 78)) | (1L << (TILDE - 78)) | (1L << (OP_INC - 78)) | (1L << (OP_DEC - 78)))) != 0)) {
				{
				State = 1882; for_initializer();
				}
			}

			State = 1885; Match(SEMICOLON);
			State = 1887;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (ADD - 10)) | (1L << (ALIAS - 10)) | (1L << (ARGLIST - 10)) | (1L << (ASCENDING - 10)) | (1L << (BASE - 10)) | (1L << (BOOL - 10)) | (1L << (BY - 10)) | (1L << (BYTE - 10)) | (1L << (CHAR - 10)) | (1L << (CHECKED - 10)) | (1L << (DECIMAL - 10)) | (1L << (DEFAULT - 10)) | (1L << (DELEGATE - 10)) | (1L << (DESCENDING - 10)) | (1L << (DOUBLE - 10)) | (1L << (DYNAMIC - 10)) | (1L << (EQUALS - 10)) | (1L << (FALSE - 10)) | (1L << (FLOAT - 10)) | (1L << (FROM - 10)) | (1L << (GET - 10)) | (1L << (GROUP - 10)) | (1L << (INT - 10)) | (1L << (INTO - 10)) | (1L << (JOIN - 10)) | (1L << (LET - 10)) | (1L << (LONG - 10)) | (1L << (NEW - 10)) | (1L << (NULL - 10)) | (1L << (OBJECT - 10)) | (1L << (ON - 10)) | (1L << (ORDERBY - 10)) | (1L << (PARTIAL - 10)))) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (REMOVE - 78)) | (1L << (SBYTE - 78)) | (1L << (SELECT - 78)) | (1L << (SET - 78)) | (1L << (SHORT - 78)) | (1L << (SIZEOF - 78)) | (1L << (STRING - 78)) | (1L << (THIS - 78)) | (1L << (TRUE - 78)) | (1L << (TYPEOF - 78)) | (1L << (UINT - 78)) | (1L << (ULONG - 78)) | (1L << (UNCHECKED - 78)) | (1L << (USHORT - 78)) | (1L << (WHERE - 78)) | (1L << (YIELD - 78)) | (1L << (IDENTIFIER - 78)) | (1L << (INTEGER_LITERAL - 78)) | (1L << (REAL_LITERAL - 78)) | (1L << (CHARACTER_LITERAL - 78)) | (1L << (STRING_LITERAL - 78)) | (1L << (OPEN_PARENS - 78)) | (1L << (PLUS - 78)) | (1L << (MINUS - 78)) | (1L << (STAR - 78)) | (1L << (AMP - 78)) | (1L << (BANG - 78)) | (1L << (TILDE - 78)) | (1L << (OP_INC - 78)) | (1L << (OP_DEC - 78)))) != 0)) {
				{
				State = 1886; for_condition();
				}
			}

			State = 1889; Match(SEMICOLON);
			State = 1891;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (ADD - 10)) | (1L << (ALIAS - 10)) | (1L << (ARGLIST - 10)) | (1L << (ASCENDING - 10)) | (1L << (BASE - 10)) | (1L << (BOOL - 10)) | (1L << (BY - 10)) | (1L << (BYTE - 10)) | (1L << (CHAR - 10)) | (1L << (CHECKED - 10)) | (1L << (DECIMAL - 10)) | (1L << (DEFAULT - 10)) | (1L << (DELEGATE - 10)) | (1L << (DESCENDING - 10)) | (1L << (DOUBLE - 10)) | (1L << (DYNAMIC - 10)) | (1L << (EQUALS - 10)) | (1L << (FALSE - 10)) | (1L << (FLOAT - 10)) | (1L << (FROM - 10)) | (1L << (GET - 10)) | (1L << (GROUP - 10)) | (1L << (INT - 10)) | (1L << (INTO - 10)) | (1L << (JOIN - 10)) | (1L << (LET - 10)) | (1L << (LONG - 10)) | (1L << (NEW - 10)) | (1L << (NULL - 10)) | (1L << (OBJECT - 10)) | (1L << (ON - 10)) | (1L << (ORDERBY - 10)) | (1L << (PARTIAL - 10)))) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (REMOVE - 78)) | (1L << (SBYTE - 78)) | (1L << (SELECT - 78)) | (1L << (SET - 78)) | (1L << (SHORT - 78)) | (1L << (SIZEOF - 78)) | (1L << (STRING - 78)) | (1L << (THIS - 78)) | (1L << (TRUE - 78)) | (1L << (TYPEOF - 78)) | (1L << (UINT - 78)) | (1L << (ULONG - 78)) | (1L << (UNCHECKED - 78)) | (1L << (USHORT - 78)) | (1L << (WHERE - 78)) | (1L << (YIELD - 78)) | (1L << (IDENTIFIER - 78)) | (1L << (INTEGER_LITERAL - 78)) | (1L << (REAL_LITERAL - 78)) | (1L << (CHARACTER_LITERAL - 78)) | (1L << (STRING_LITERAL - 78)) | (1L << (OPEN_PARENS - 78)) | (1L << (PLUS - 78)) | (1L << (MINUS - 78)) | (1L << (STAR - 78)) | (1L << (AMP - 78)) | (1L << (BANG - 78)) | (1L << (TILDE - 78)) | (1L << (OP_INC - 78)) | (1L << (OP_DEC - 78)))) != 0)) {
				{
				State = 1890; for_iterator();
				}
			}

			State = 1893; Match(CLOSE_PARENS);
			State = 1894; embedded_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_initializerContext : ParserRuleContext {
		public Local_variable_declarationContext local_variable_declaration() {
			return GetRuleContext<Local_variable_declarationContext>(0);
		}
		public Statement_expression_listContext statement_expression_list() {
			return GetRuleContext<Statement_expression_listContext>(0);
		}
		public For_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterFor_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitFor_initializer(this);
		}
	}

	[RuleVersion(0)]
	public For_initializerContext for_initializer() {
		For_initializerContext _localctx = new For_initializerContext(_ctx, State);
		EnterRule(_localctx, 288, RULE_for_initializer);
		try {
			State = 1898;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,127,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1896; local_variable_declaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1897; statement_expression_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_conditionContext : ParserRuleContext {
		public Boolean_expressionContext boolean_expression() {
			return GetRuleContext<Boolean_expressionContext>(0);
		}
		public For_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterFor_condition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitFor_condition(this);
		}
	}

	[RuleVersion(0)]
	public For_conditionContext for_condition() {
		For_conditionContext _localctx = new For_conditionContext(_ctx, State);
		EnterRule(_localctx, 290, RULE_for_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1900; boolean_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_iteratorContext : ParserRuleContext {
		public Statement_expression_listContext statement_expression_list() {
			return GetRuleContext<Statement_expression_listContext>(0);
		}
		public For_iteratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_iterator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterFor_iterator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitFor_iterator(this);
		}
	}

	[RuleVersion(0)]
	public For_iteratorContext for_iterator() {
		For_iteratorContext _localctx = new For_iteratorContext(_ctx, State);
		EnterRule(_localctx, 292, RULE_for_iterator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1902; statement_expression_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_expression_listContext : ParserRuleContext {
		public Statement_expressionContext[] statement_expression() {
			return GetRuleContexts<Statement_expressionContext>();
		}
		public Statement_expressionContext statement_expression(int i) {
			return GetRuleContext<Statement_expressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Statement_expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_expression_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterStatement_expression_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitStatement_expression_list(this);
		}
	}

	[RuleVersion(0)]
	public Statement_expression_listContext statement_expression_list() {
		Statement_expression_listContext _localctx = new Statement_expression_listContext(_ctx, State);
		EnterRule(_localctx, 294, RULE_statement_expression_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1904; statement_expression();
			State = 1909;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1905; Match(COMMA);
				State = 1906; statement_expression();
				}
				}
				State = 1911;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Foreach_statementContext : ParserRuleContext {
		public ITerminalNode FOREACH() { return GetToken(CSharp4Parser.FOREACH, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public Local_variable_typeContext local_variable_type() {
			return GetRuleContext<Local_variable_typeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode IN() { return GetToken(CSharp4Parser.IN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public Foreach_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreach_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterForeach_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitForeach_statement(this);
		}
	}

	[RuleVersion(0)]
	public Foreach_statementContext foreach_statement() {
		Foreach_statementContext _localctx = new Foreach_statementContext(_ctx, State);
		EnterRule(_localctx, 296, RULE_foreach_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1912; Match(FOREACH);
			State = 1913; Match(OPEN_PARENS);
			State = 1914; local_variable_type();
			State = 1915; identifier();
			State = 1916; Match(IN);
			State = 1917; expression();
			State = 1918; Match(CLOSE_PARENS);
			State = 1919; embedded_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Jump_statementContext : ParserRuleContext {
		public Break_statementContext break_statement() {
			return GetRuleContext<Break_statementContext>(0);
		}
		public Continue_statementContext continue_statement() {
			return GetRuleContext<Continue_statementContext>(0);
		}
		public Goto_statementContext goto_statement() {
			return GetRuleContext<Goto_statementContext>(0);
		}
		public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		public Throw_statementContext throw_statement() {
			return GetRuleContext<Throw_statementContext>(0);
		}
		public Jump_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jump_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterJump_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitJump_statement(this);
		}
	}

	[RuleVersion(0)]
	public Jump_statementContext jump_statement() {
		Jump_statementContext _localctx = new Jump_statementContext(_ctx, State);
		EnterRule(_localctx, 298, RULE_jump_statement);
		try {
			State = 1926;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case BREAK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1921; break_statement();
				}
				break;
			case CONTINUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1922; continue_statement();
				}
				break;
			case GOTO:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1923; goto_statement();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1924; return_statement();
				}
				break;
			case THROW:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1925; throw_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Break_statementContext : ParserRuleContext {
		public ITerminalNode BREAK() { return GetToken(CSharp4Parser.BREAK, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Break_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_break_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterBreak_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitBreak_statement(this);
		}
	}

	[RuleVersion(0)]
	public Break_statementContext break_statement() {
		Break_statementContext _localctx = new Break_statementContext(_ctx, State);
		EnterRule(_localctx, 300, RULE_break_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1928; Match(BREAK);
			State = 1929; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Continue_statementContext : ParserRuleContext {
		public ITerminalNode CONTINUE() { return GetToken(CSharp4Parser.CONTINUE, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Continue_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continue_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterContinue_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitContinue_statement(this);
		}
	}

	[RuleVersion(0)]
	public Continue_statementContext continue_statement() {
		Continue_statementContext _localctx = new Continue_statementContext(_ctx, State);
		EnterRule(_localctx, 302, RULE_continue_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1931; Match(CONTINUE);
			State = 1932; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Goto_statementContext : ParserRuleContext {
		public ITerminalNode GOTO() { return GetToken(CSharp4Parser.GOTO, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public ITerminalNode CASE() { return GetToken(CSharp4Parser.CASE, 0); }
		public Constant_expressionContext constant_expression() {
			return GetRuleContext<Constant_expressionContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(CSharp4Parser.DEFAULT, 0); }
		public Goto_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goto_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterGoto_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitGoto_statement(this);
		}
	}

	[RuleVersion(0)]
	public Goto_statementContext goto_statement() {
		Goto_statementContext _localctx = new Goto_statementContext(_ctx, State);
		EnterRule(_localctx, 304, RULE_goto_statement);
		try {
			State = 1946;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,130,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1934; Match(GOTO);
				State = 1935; identifier();
				State = 1936; Match(SEMICOLON);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1938; Match(GOTO);
				State = 1939; Match(CASE);
				State = 1940; constant_expression();
				State = 1941; Match(SEMICOLON);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1943; Match(GOTO);
				State = 1944; Match(DEFAULT);
				State = 1945; Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(CSharp4Parser.RETURN, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(_ctx, State);
		EnterRule(_localctx, 306, RULE_return_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1948; Match(RETURN);
			State = 1950;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (ADD - 10)) | (1L << (ALIAS - 10)) | (1L << (ARGLIST - 10)) | (1L << (ASCENDING - 10)) | (1L << (BASE - 10)) | (1L << (BOOL - 10)) | (1L << (BY - 10)) | (1L << (BYTE - 10)) | (1L << (CHAR - 10)) | (1L << (CHECKED - 10)) | (1L << (DECIMAL - 10)) | (1L << (DEFAULT - 10)) | (1L << (DELEGATE - 10)) | (1L << (DESCENDING - 10)) | (1L << (DOUBLE - 10)) | (1L << (DYNAMIC - 10)) | (1L << (EQUALS - 10)) | (1L << (FALSE - 10)) | (1L << (FLOAT - 10)) | (1L << (FROM - 10)) | (1L << (GET - 10)) | (1L << (GROUP - 10)) | (1L << (INT - 10)) | (1L << (INTO - 10)) | (1L << (JOIN - 10)) | (1L << (LET - 10)) | (1L << (LONG - 10)) | (1L << (NEW - 10)) | (1L << (NULL - 10)) | (1L << (OBJECT - 10)) | (1L << (ON - 10)) | (1L << (ORDERBY - 10)) | (1L << (PARTIAL - 10)))) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (REMOVE - 78)) | (1L << (SBYTE - 78)) | (1L << (SELECT - 78)) | (1L << (SET - 78)) | (1L << (SHORT - 78)) | (1L << (SIZEOF - 78)) | (1L << (STRING - 78)) | (1L << (THIS - 78)) | (1L << (TRUE - 78)) | (1L << (TYPEOF - 78)) | (1L << (UINT - 78)) | (1L << (ULONG - 78)) | (1L << (UNCHECKED - 78)) | (1L << (USHORT - 78)) | (1L << (WHERE - 78)) | (1L << (YIELD - 78)) | (1L << (IDENTIFIER - 78)) | (1L << (INTEGER_LITERAL - 78)) | (1L << (REAL_LITERAL - 78)) | (1L << (CHARACTER_LITERAL - 78)) | (1L << (STRING_LITERAL - 78)) | (1L << (OPEN_PARENS - 78)) | (1L << (PLUS - 78)) | (1L << (MINUS - 78)) | (1L << (STAR - 78)) | (1L << (AMP - 78)) | (1L << (BANG - 78)) | (1L << (TILDE - 78)) | (1L << (OP_INC - 78)) | (1L << (OP_DEC - 78)))) != 0)) {
				{
				State = 1949; expression();
				}
			}

			State = 1952; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Throw_statementContext : ParserRuleContext {
		public ITerminalNode THROW() { return GetToken(CSharp4Parser.THROW, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Throw_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throw_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterThrow_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitThrow_statement(this);
		}
	}

	[RuleVersion(0)]
	public Throw_statementContext throw_statement() {
		Throw_statementContext _localctx = new Throw_statementContext(_ctx, State);
		EnterRule(_localctx, 308, RULE_throw_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1954; Match(THROW);
			State = 1956;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (ADD - 10)) | (1L << (ALIAS - 10)) | (1L << (ARGLIST - 10)) | (1L << (ASCENDING - 10)) | (1L << (BASE - 10)) | (1L << (BOOL - 10)) | (1L << (BY - 10)) | (1L << (BYTE - 10)) | (1L << (CHAR - 10)) | (1L << (CHECKED - 10)) | (1L << (DECIMAL - 10)) | (1L << (DEFAULT - 10)) | (1L << (DELEGATE - 10)) | (1L << (DESCENDING - 10)) | (1L << (DOUBLE - 10)) | (1L << (DYNAMIC - 10)) | (1L << (EQUALS - 10)) | (1L << (FALSE - 10)) | (1L << (FLOAT - 10)) | (1L << (FROM - 10)) | (1L << (GET - 10)) | (1L << (GROUP - 10)) | (1L << (INT - 10)) | (1L << (INTO - 10)) | (1L << (JOIN - 10)) | (1L << (LET - 10)) | (1L << (LONG - 10)) | (1L << (NEW - 10)) | (1L << (NULL - 10)) | (1L << (OBJECT - 10)) | (1L << (ON - 10)) | (1L << (ORDERBY - 10)) | (1L << (PARTIAL - 10)))) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (REMOVE - 78)) | (1L << (SBYTE - 78)) | (1L << (SELECT - 78)) | (1L << (SET - 78)) | (1L << (SHORT - 78)) | (1L << (SIZEOF - 78)) | (1L << (STRING - 78)) | (1L << (THIS - 78)) | (1L << (TRUE - 78)) | (1L << (TYPEOF - 78)) | (1L << (UINT - 78)) | (1L << (ULONG - 78)) | (1L << (UNCHECKED - 78)) | (1L << (USHORT - 78)) | (1L << (WHERE - 78)) | (1L << (YIELD - 78)) | (1L << (IDENTIFIER - 78)) | (1L << (INTEGER_LITERAL - 78)) | (1L << (REAL_LITERAL - 78)) | (1L << (CHARACTER_LITERAL - 78)) | (1L << (STRING_LITERAL - 78)) | (1L << (OPEN_PARENS - 78)) | (1L << (PLUS - 78)) | (1L << (MINUS - 78)) | (1L << (STAR - 78)) | (1L << (AMP - 78)) | (1L << (BANG - 78)) | (1L << (TILDE - 78)) | (1L << (OP_INC - 78)) | (1L << (OP_DEC - 78)))) != 0)) {
				{
				State = 1955; expression();
				}
			}

			State = 1958; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Try_statementContext : ParserRuleContext {
		public ITerminalNode TRY() { return GetToken(CSharp4Parser.TRY, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Catch_clausesContext catch_clauses() {
			return GetRuleContext<Catch_clausesContext>(0);
		}
		public Finally_clauseContext finally_clause() {
			return GetRuleContext<Finally_clauseContext>(0);
		}
		public Try_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_try_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterTry_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitTry_statement(this);
		}
	}

	[RuleVersion(0)]
	public Try_statementContext try_statement() {
		Try_statementContext _localctx = new Try_statementContext(_ctx, State);
		EnterRule(_localctx, 310, RULE_try_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1960; Match(TRY);
			State = 1961; block();
			State = 1963;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CATCH) {
				{
				State = 1962; catch_clauses();
				}
			}

			State = 1966;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==FINALLY) {
				{
				State = 1965; finally_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Catch_clausesContext : ParserRuleContext {
		public Specific_catch_clausesContext specific_catch_clauses() {
			return GetRuleContext<Specific_catch_clausesContext>(0);
		}
		public General_catch_clauseContext general_catch_clause() {
			return GetRuleContext<General_catch_clauseContext>(0);
		}
		public Catch_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catch_clauses; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterCatch_clauses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitCatch_clauses(this);
		}
	}

	[RuleVersion(0)]
	public Catch_clausesContext catch_clauses() {
		Catch_clausesContext _localctx = new Catch_clausesContext(_ctx, State);
		EnterRule(_localctx, 312, RULE_catch_clauses);
		int _la;
		try {
			State = 1973;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,136,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1968; specific_catch_clauses();
				State = 1970;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==CATCH) {
					{
					State = 1969; general_catch_clause();
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1972; general_catch_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Specific_catch_clausesContext : ParserRuleContext {
		public Specific_catch_clauseContext[] specific_catch_clause() {
			return GetRuleContexts<Specific_catch_clauseContext>();
		}
		public Specific_catch_clauseContext specific_catch_clause(int i) {
			return GetRuleContext<Specific_catch_clauseContext>(i);
		}
		public Specific_catch_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specific_catch_clauses; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterSpecific_catch_clauses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitSpecific_catch_clauses(this);
		}
	}

	[RuleVersion(0)]
	public Specific_catch_clausesContext specific_catch_clauses() {
		Specific_catch_clausesContext _localctx = new Specific_catch_clausesContext(_ctx, State);
		EnterRule(_localctx, 314, RULE_specific_catch_clauses);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1975; specific_catch_clause();
			State = 1979;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,137,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1976; specific_catch_clause();
					}
					} 
				}
				State = 1981;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,137,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Specific_catch_clauseContext : ParserRuleContext {
		public ITerminalNode CATCH() { return GetToken(CSharp4Parser.CATCH, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Specific_catch_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specific_catch_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterSpecific_catch_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitSpecific_catch_clause(this);
		}
	}

	[RuleVersion(0)]
	public Specific_catch_clauseContext specific_catch_clause() {
		Specific_catch_clauseContext _localctx = new Specific_catch_clauseContext(_ctx, State);
		EnterRule(_localctx, 316, RULE_specific_catch_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1982; Match(CATCH);
			State = 1983; Match(OPEN_PARENS);
			State = 1984; class_type();
			State = 1986;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BY) | (1L << DESCENDING) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INTO) | (1L << JOIN) | (1L << LET))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (ON - 66)) | (1L << (ORDERBY - 66)) | (1L << (PARTIAL - 66)) | (1L << (REMOVE - 66)) | (1L << (SELECT - 66)) | (1L << (SET - 66)) | (1L << (WHERE - 66)) | (1L << (YIELD - 66)) | (1L << (IDENTIFIER - 66)))) != 0)) {
				{
				State = 1985; identifier();
				}
			}

			State = 1988; Match(CLOSE_PARENS);
			State = 1989; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class General_catch_clauseContext : ParserRuleContext {
		public ITerminalNode CATCH() { return GetToken(CSharp4Parser.CATCH, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public General_catch_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_general_catch_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterGeneral_catch_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitGeneral_catch_clause(this);
		}
	}

	[RuleVersion(0)]
	public General_catch_clauseContext general_catch_clause() {
		General_catch_clauseContext _localctx = new General_catch_clauseContext(_ctx, State);
		EnterRule(_localctx, 318, RULE_general_catch_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1991; Match(CATCH);
			State = 1992; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Finally_clauseContext : ParserRuleContext {
		public ITerminalNode FINALLY() { return GetToken(CSharp4Parser.FINALLY, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Finally_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finally_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterFinally_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitFinally_clause(this);
		}
	}

	[RuleVersion(0)]
	public Finally_clauseContext finally_clause() {
		Finally_clauseContext _localctx = new Finally_clauseContext(_ctx, State);
		EnterRule(_localctx, 320, RULE_finally_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1994; Match(FINALLY);
			State = 1995; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Checked_statementContext : ParserRuleContext {
		public ITerminalNode CHECKED() { return GetToken(CSharp4Parser.CHECKED, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Checked_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checked_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterChecked_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitChecked_statement(this);
		}
	}

	[RuleVersion(0)]
	public Checked_statementContext checked_statement() {
		Checked_statementContext _localctx = new Checked_statementContext(_ctx, State);
		EnterRule(_localctx, 322, RULE_checked_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1997; Match(CHECKED);
			State = 1998; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unchecked_statementContext : ParserRuleContext {
		public ITerminalNode UNCHECKED() { return GetToken(CSharp4Parser.UNCHECKED, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Unchecked_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unchecked_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterUnchecked_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitUnchecked_statement(this);
		}
	}

	[RuleVersion(0)]
	public Unchecked_statementContext unchecked_statement() {
		Unchecked_statementContext _localctx = new Unchecked_statementContext(_ctx, State);
		EnterRule(_localctx, 324, RULE_unchecked_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2000; Match(UNCHECKED);
			State = 2001; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lock_statementContext : ParserRuleContext {
		public ITerminalNode LOCK() { return GetToken(CSharp4Parser.LOCK, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public Lock_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lock_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterLock_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitLock_statement(this);
		}
	}

	[RuleVersion(0)]
	public Lock_statementContext lock_statement() {
		Lock_statementContext _localctx = new Lock_statementContext(_ctx, State);
		EnterRule(_localctx, 326, RULE_lock_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2003; Match(LOCK);
			State = 2004; Match(OPEN_PARENS);
			State = 2005; expression();
			State = 2006; Match(CLOSE_PARENS);
			State = 2007; embedded_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_statementContext : ParserRuleContext {
		public ITerminalNode USING() { return GetToken(CSharp4Parser.USING, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public Resource_acquisitionContext resource_acquisition() {
			return GetRuleContext<Resource_acquisitionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public Using_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterUsing_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitUsing_statement(this);
		}
	}

	[RuleVersion(0)]
	public Using_statementContext using_statement() {
		Using_statementContext _localctx = new Using_statementContext(_ctx, State);
		EnterRule(_localctx, 328, RULE_using_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2009; Match(USING);
			State = 2010; Match(OPEN_PARENS);
			State = 2011; resource_acquisition();
			State = 2012; Match(CLOSE_PARENS);
			State = 2013; embedded_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Resource_acquisitionContext : ParserRuleContext {
		public Local_variable_declarationContext local_variable_declaration() {
			return GetRuleContext<Local_variable_declarationContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Resource_acquisitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resource_acquisition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterResource_acquisition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitResource_acquisition(this);
		}
	}

	[RuleVersion(0)]
	public Resource_acquisitionContext resource_acquisition() {
		Resource_acquisitionContext _localctx = new Resource_acquisitionContext(_ctx, State);
		EnterRule(_localctx, 330, RULE_resource_acquisition);
		try {
			State = 2017;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,139,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2015; local_variable_declaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2016; expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Yield_statementContext : ParserRuleContext {
		public Yield_contextual_keywordContext yield_contextual_keyword() {
			return GetRuleContext<Yield_contextual_keywordContext>(0);
		}
		public ITerminalNode RETURN() { return GetToken(CSharp4Parser.RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public ITerminalNode BREAK() { return GetToken(CSharp4Parser.BREAK, 0); }
		public Yield_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_yield_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterYield_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitYield_statement(this);
		}
	}

	[RuleVersion(0)]
	public Yield_statementContext yield_statement() {
		Yield_statementContext _localctx = new Yield_statementContext(_ctx, State);
		EnterRule(_localctx, 332, RULE_yield_statement);
		try {
			State = 2028;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,140,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2019; yield_contextual_keyword();
				State = 2020; Match(RETURN);
				State = 2021; expression();
				State = 2022; Match(SEMICOLON);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2024; yield_contextual_keyword();
				State = 2025; Match(BREAK);
				State = 2026; Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compilation_unitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(CSharp4Parser.Eof, 0); }
		public ITerminalNode BYTE_ORDER_MARK() { return GetToken(CSharp4Parser.BYTE_ORDER_MARK, 0); }
		public Extern_alias_directivesContext extern_alias_directives() {
			return GetRuleContext<Extern_alias_directivesContext>(0);
		}
		public Using_directivesContext using_directives() {
			return GetRuleContext<Using_directivesContext>(0);
		}
		public Global_attribute_sectionContext[] global_attribute_section() {
			return GetRuleContexts<Global_attribute_sectionContext>();
		}
		public Global_attribute_sectionContext global_attribute_section(int i) {
			return GetRuleContext<Global_attribute_sectionContext>(i);
		}
		public Namespace_member_declarationsContext namespace_member_declarations() {
			return GetRuleContext<Namespace_member_declarationsContext>(0);
		}
		public Compilation_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilation_unit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterCompilation_unit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitCompilation_unit(this);
		}
	}

	[RuleVersion(0)]
	public Compilation_unitContext compilation_unit() {
		Compilation_unitContext _localctx = new Compilation_unitContext(_ctx, State);
		EnterRule(_localctx, 334, RULE_compilation_unit);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2031;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==BYTE_ORDER_MARK) {
				{
				State = 2030; Match(BYTE_ORDER_MARK);
				}
			}

			State = 2034;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,142,_ctx) ) {
			case 1:
				{
				State = 2033; extern_alias_directives();
				}
				break;
			}
			State = 2037;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==USING) {
				{
				State = 2036; using_directives();
				}
			}

			State = 2042;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,144,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2039; global_attribute_section();
					}
					} 
				}
				State = 2044;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,144,_ctx);
			}
			State = 2046;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << CLASS) | (1L << DELEGATE) | (1L << ENUM) | (1L << EXTERN) | (1L << INTERFACE) | (1L << INTERNAL) | (1L << NAMESPACE) | (1L << NEW))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OVERRIDE - 70)) | (1L << (PARTIAL - 70)) | (1L << (PRIVATE - 70)) | (1L << (PROTECTED - 70)) | (1L << (PUBLIC - 70)) | (1L << (READONLY - 70)) | (1L << (SEALED - 70)) | (1L << (STATIC - 70)) | (1L << (STRUCT - 70)) | (1L << (UNSAFE - 70)) | (1L << (VIRTUAL - 70)) | (1L << (VOLATILE - 70)) | (1L << (OPEN_BRACKET - 70)))) != 0)) {
				{
				State = 2045; namespace_member_declarations();
				}
			}

			State = 2048; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_declarationContext : ParserRuleContext {
		public Qualified_identifierContext qi;
		public ITerminalNode NAMESPACE() { return GetToken(CSharp4Parser.NAMESPACE, 0); }
		public Namespace_bodyContext namespace_body() {
			return GetRuleContext<Namespace_bodyContext>(0);
		}
		public Qualified_identifierContext qualified_identifier() {
			return GetRuleContext<Qualified_identifierContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Namespace_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterNamespace_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitNamespace_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_declarationContext namespace_declaration() {
		Namespace_declarationContext _localctx = new Namespace_declarationContext(_ctx, State);
		EnterRule(_localctx, 336, RULE_namespace_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2050; Match(NAMESPACE);
			State = 2051; _localctx.qi = qualified_identifier();
			State = 2052; namespace_body();
			State = 2054;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==SEMICOLON) {
				{
				State = 2053; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qualified_identifierContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(CSharp4Parser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(CSharp4Parser.DOT, i);
		}
		public Qualified_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterQualified_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitQualified_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Qualified_identifierContext qualified_identifier() {
		Qualified_identifierContext _localctx = new Qualified_identifierContext(_ctx, State);
		EnterRule(_localctx, 338, RULE_qualified_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2056; identifier();
			State = 2061;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==DOT) {
				{
				{
				State = 2057; Match(DOT);
				State = 2058; identifier();
				}
				}
				State = 2063;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_bodyContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharp4Parser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharp4Parser.CLOSE_BRACE, 0); }
		public Extern_alias_directivesContext extern_alias_directives() {
			return GetRuleContext<Extern_alias_directivesContext>(0);
		}
		public Using_directivesContext using_directives() {
			return GetRuleContext<Using_directivesContext>(0);
		}
		public Namespace_member_declarationsContext namespace_member_declarations() {
			return GetRuleContext<Namespace_member_declarationsContext>(0);
		}
		public Namespace_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterNamespace_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitNamespace_body(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_bodyContext namespace_body() {
		Namespace_bodyContext _localctx = new Namespace_bodyContext(_ctx, State);
		EnterRule(_localctx, 340, RULE_namespace_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2064; Match(OPEN_BRACE);
			State = 2066;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,148,_ctx) ) {
			case 1:
				{
				State = 2065; extern_alias_directives();
				}
				break;
			}
			State = 2069;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==USING) {
				{
				State = 2068; using_directives();
				}
			}

			State = 2072;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << CLASS) | (1L << DELEGATE) | (1L << ENUM) | (1L << EXTERN) | (1L << INTERFACE) | (1L << INTERNAL) | (1L << NAMESPACE) | (1L << NEW))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OVERRIDE - 70)) | (1L << (PARTIAL - 70)) | (1L << (PRIVATE - 70)) | (1L << (PROTECTED - 70)) | (1L << (PUBLIC - 70)) | (1L << (READONLY - 70)) | (1L << (SEALED - 70)) | (1L << (STATIC - 70)) | (1L << (STRUCT - 70)) | (1L << (UNSAFE - 70)) | (1L << (VIRTUAL - 70)) | (1L << (VOLATILE - 70)) | (1L << (OPEN_BRACKET - 70)))) != 0)) {
				{
				State = 2071; namespace_member_declarations();
				}
			}

			State = 2074; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Extern_alias_directivesContext : ParserRuleContext {
		public Extern_alias_directiveContext[] extern_alias_directive() {
			return GetRuleContexts<Extern_alias_directiveContext>();
		}
		public Extern_alias_directiveContext extern_alias_directive(int i) {
			return GetRuleContext<Extern_alias_directiveContext>(i);
		}
		public Extern_alias_directivesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extern_alias_directives; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterExtern_alias_directives(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitExtern_alias_directives(this);
		}
	}

	[RuleVersion(0)]
	public Extern_alias_directivesContext extern_alias_directives() {
		Extern_alias_directivesContext _localctx = new Extern_alias_directivesContext(_ctx, State);
		EnterRule(_localctx, 342, RULE_extern_alias_directives);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2077;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2076; extern_alias_directive();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2079;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,151,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Extern_alias_directiveContext : ParserRuleContext {
		public ITerminalNode EXTERN() { return GetToken(CSharp4Parser.EXTERN, 0); }
		public Alias_contextual_keywordContext alias_contextual_keyword() {
			return GetRuleContext<Alias_contextual_keywordContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Extern_alias_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extern_alias_directive; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterExtern_alias_directive(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitExtern_alias_directive(this);
		}
	}

	[RuleVersion(0)]
	public Extern_alias_directiveContext extern_alias_directive() {
		Extern_alias_directiveContext _localctx = new Extern_alias_directiveContext(_ctx, State);
		EnterRule(_localctx, 344, RULE_extern_alias_directive);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2081; Match(EXTERN);
			State = 2082; alias_contextual_keyword();
			State = 2083; identifier();
			State = 2084; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_directivesContext : ParserRuleContext {
		public Using_directiveContext[] using_directive() {
			return GetRuleContexts<Using_directiveContext>();
		}
		public Using_directiveContext using_directive(int i) {
			return GetRuleContext<Using_directiveContext>(i);
		}
		public Using_directivesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_directives; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterUsing_directives(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitUsing_directives(this);
		}
	}

	[RuleVersion(0)]
	public Using_directivesContext using_directives() {
		Using_directivesContext _localctx = new Using_directivesContext(_ctx, State);
		EnterRule(_localctx, 346, RULE_using_directives);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2087;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 2086; using_directive();
				}
				}
				State = 2089;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==USING );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_directiveContext : ParserRuleContext {
		public Using_alias_directiveContext using_alias_directive() {
			return GetRuleContext<Using_alias_directiveContext>(0);
		}
		public Using_namespace_directiveContext using_namespace_directive() {
			return GetRuleContext<Using_namespace_directiveContext>(0);
		}
		public Using_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_directive; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterUsing_directive(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitUsing_directive(this);
		}
	}

	[RuleVersion(0)]
	public Using_directiveContext using_directive() {
		Using_directiveContext _localctx = new Using_directiveContext(_ctx, State);
		EnterRule(_localctx, 348, RULE_using_directive);
		try {
			State = 2093;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,153,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2091; using_alias_directive();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2092; using_namespace_directive();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_alias_directiveContext : ParserRuleContext {
		public ITerminalNode USING() { return GetToken(CSharp4Parser.USING, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(CSharp4Parser.ASSIGNMENT, 0); }
		public Namespace_or_type_nameContext namespace_or_type_name() {
			return GetRuleContext<Namespace_or_type_nameContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Using_alias_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_alias_directive; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterUsing_alias_directive(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitUsing_alias_directive(this);
		}
	}

	[RuleVersion(0)]
	public Using_alias_directiveContext using_alias_directive() {
		Using_alias_directiveContext _localctx = new Using_alias_directiveContext(_ctx, State);
		EnterRule(_localctx, 350, RULE_using_alias_directive);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2095; Match(USING);
			State = 2096; identifier();
			State = 2097; Match(ASSIGNMENT);
			State = 2098; namespace_or_type_name();
			State = 2099; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_namespace_directiveContext : ParserRuleContext {
		public ITerminalNode USING() { return GetToken(CSharp4Parser.USING, 0); }
		public Namespace_nameContext namespace_name() {
			return GetRuleContext<Namespace_nameContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Using_namespace_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_namespace_directive; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterUsing_namespace_directive(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitUsing_namespace_directive(this);
		}
	}

	[RuleVersion(0)]
	public Using_namespace_directiveContext using_namespace_directive() {
		Using_namespace_directiveContext _localctx = new Using_namespace_directiveContext(_ctx, State);
		EnterRule(_localctx, 352, RULE_using_namespace_directive);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2101; Match(USING);
			State = 2102; namespace_name();
			State = 2103; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_member_declarationsContext : ParserRuleContext {
		public Namespace_member_declarationContext[] namespace_member_declaration() {
			return GetRuleContexts<Namespace_member_declarationContext>();
		}
		public Namespace_member_declarationContext namespace_member_declaration(int i) {
			return GetRuleContext<Namespace_member_declarationContext>(i);
		}
		public Namespace_member_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_member_declarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterNamespace_member_declarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitNamespace_member_declarations(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_member_declarationsContext namespace_member_declarations() {
		Namespace_member_declarationsContext _localctx = new Namespace_member_declarationsContext(_ctx, State);
		EnterRule(_localctx, 354, RULE_namespace_member_declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2106;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 2105; namespace_member_declaration();
				}
				}
				State = 2108;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << CLASS) | (1L << DELEGATE) | (1L << ENUM) | (1L << EXTERN) | (1L << INTERFACE) | (1L << INTERNAL) | (1L << NAMESPACE) | (1L << NEW))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OVERRIDE - 70)) | (1L << (PARTIAL - 70)) | (1L << (PRIVATE - 70)) | (1L << (PROTECTED - 70)) | (1L << (PUBLIC - 70)) | (1L << (READONLY - 70)) | (1L << (SEALED - 70)) | (1L << (STATIC - 70)) | (1L << (STRUCT - 70)) | (1L << (UNSAFE - 70)) | (1L << (VIRTUAL - 70)) | (1L << (VOLATILE - 70)) | (1L << (OPEN_BRACKET - 70)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_member_declarationContext : ParserRuleContext {
		public Namespace_declarationContext namespace_declaration() {
			return GetRuleContext<Namespace_declarationContext>(0);
		}
		public Type_declarationContext type_declaration() {
			return GetRuleContext<Type_declarationContext>(0);
		}
		public Namespace_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_member_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterNamespace_member_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitNamespace_member_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_member_declarationContext namespace_member_declaration() {
		Namespace_member_declarationContext _localctx = new Namespace_member_declarationContext(_ctx, State);
		EnterRule(_localctx, 356, RULE_namespace_member_declaration);
		try {
			State = 2112;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NAMESPACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2110; namespace_declaration();
				}
				break;
			case ABSTRACT:
			case CLASS:
			case DELEGATE:
			case ENUM:
			case EXTERN:
			case INTERFACE:
			case INTERNAL:
			case NEW:
			case OVERRIDE:
			case PARTIAL:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case READONLY:
			case SEALED:
			case STATIC:
			case STRUCT:
			case UNSAFE:
			case VIRTUAL:
			case VOLATILE:
			case OPEN_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2111; type_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_declarationContext : ParserRuleContext {
		public Class_definitionContext class_definition() {
			return GetRuleContext<Class_definitionContext>(0);
		}
		public Struct_definitionContext struct_definition() {
			return GetRuleContext<Struct_definitionContext>(0);
		}
		public Interface_definitionContext interface_definition() {
			return GetRuleContext<Interface_definitionContext>(0);
		}
		public Enum_definitionContext enum_definition() {
			return GetRuleContext<Enum_definitionContext>(0);
		}
		public Delegate_definitionContext delegate_definition() {
			return GetRuleContext<Delegate_definitionContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public All_member_modifiersContext all_member_modifiers() {
			return GetRuleContext<All_member_modifiersContext>(0);
		}
		public Type_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterType_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitType_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Type_declarationContext type_declaration() {
		Type_declarationContext _localctx = new Type_declarationContext(_ctx, State);
		EnterRule(_localctx, 358, RULE_type_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2115;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2114; attributes();
				}
			}

			State = 2118;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << EXTERN) | (1L << INTERNAL) | (1L << NEW))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OVERRIDE - 70)) | (1L << (PARTIAL - 70)) | (1L << (PRIVATE - 70)) | (1L << (PROTECTED - 70)) | (1L << (PUBLIC - 70)) | (1L << (READONLY - 70)) | (1L << (SEALED - 70)) | (1L << (STATIC - 70)) | (1L << (UNSAFE - 70)) | (1L << (VIRTUAL - 70)) | (1L << (VOLATILE - 70)))) != 0)) {
				{
				State = 2117; all_member_modifiers();
				}
			}

			State = 2125;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case CLASS:
				{
				State = 2120; class_definition();
				}
				break;
			case STRUCT:
				{
				State = 2121; struct_definition();
				}
				break;
			case INTERFACE:
				{
				State = 2122; interface_definition();
				}
				break;
			case ENUM:
				{
				State = 2123; enum_definition();
				}
				break;
			case DELEGATE:
				{
				State = 2124; delegate_definition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qualified_alias_memberContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode DOUBLE_COLON() { return GetToken(CSharp4Parser.DOUBLE_COLON, 0); }
		public Type_argument_list_optContext type_argument_list_opt() {
			return GetRuleContext<Type_argument_list_optContext>(0);
		}
		public Qualified_alias_memberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified_alias_member; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterQualified_alias_member(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitQualified_alias_member(this);
		}
	}

	[RuleVersion(0)]
	public Qualified_alias_memberContext qualified_alias_member() {
		Qualified_alias_memberContext _localctx = new Qualified_alias_memberContext(_ctx, State);
		EnterRule(_localctx, 360, RULE_qualified_alias_member);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2127; identifier();
			State = 2128; Match(DOUBLE_COLON);
			State = 2129; identifier();
			State = 2130; type_argument_list_opt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_declarationContext : ParserRuleContext {
		public ITerminalNode CLASS() { return GetToken(CSharp4Parser.CLASS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Class_bodyContext class_body() {
			return GetRuleContext<Class_bodyContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Class_modifiersContext class_modifiers() {
			return GetRuleContext<Class_modifiersContext>(0);
		}
		public Partial_contextual_keywordContext partial_contextual_keyword() {
			return GetRuleContext<Partial_contextual_keywordContext>(0);
		}
		public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		public Class_baseContext class_base() {
			return GetRuleContext<Class_baseContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Class_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterClass_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitClass_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Class_declarationContext class_declaration() {
		Class_declarationContext _localctx = new Class_declarationContext(_ctx, State);
		EnterRule(_localctx, 362, RULE_class_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2133;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2132; attributes();
				}
			}

			State = 2136;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << INTERNAL) | (1L << NEW))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (PRIVATE - 73)) | (1L << (PROTECTED - 73)) | (1L << (PUBLIC - 73)) | (1L << (SEALED - 73)) | (1L << (STATIC - 73)) | (1L << (UNSAFE - 73)))) != 0)) {
				{
				State = 2135; class_modifiers();
				}
			}

			State = 2139;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==PARTIAL) {
				{
				State = 2138; partial_contextual_keyword();
				}
			}

			State = 2141; Match(CLASS);
			State = 2142; identifier();
			State = 2144;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 2143; type_parameter_list();
				}
			}

			State = 2147;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COLON) {
				{
				State = 2146; class_base();
				}
			}

			State = 2150;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WHERE) {
				{
				State = 2149; type_parameter_constraints_clauses();
				}
			}

			State = 2152; class_body();
			State = 2154;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==SEMICOLON) {
				{
				State = 2153; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_modifiersContext : ParserRuleContext {
		public Class_modifierContext[] class_modifier() {
			return GetRuleContexts<Class_modifierContext>();
		}
		public Class_modifierContext class_modifier(int i) {
			return GetRuleContext<Class_modifierContext>(i);
		}
		public Class_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_modifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterClass_modifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitClass_modifiers(this);
		}
	}

	[RuleVersion(0)]
	public Class_modifiersContext class_modifiers() {
		Class_modifiersContext _localctx = new Class_modifiersContext(_ctx, State);
		EnterRule(_localctx, 364, RULE_class_modifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2156; class_modifier();
			State = 2160;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << INTERNAL) | (1L << NEW))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (PRIVATE - 73)) | (1L << (PROTECTED - 73)) | (1L << (PUBLIC - 73)) | (1L << (SEALED - 73)) | (1L << (STATIC - 73)) | (1L << (UNSAFE - 73)))) != 0)) {
				{
				{
				State = 2157; class_modifier();
				}
				}
				State = 2162;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_modifierContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(CSharp4Parser.NEW, 0); }
		public ITerminalNode PUBLIC() { return GetToken(CSharp4Parser.PUBLIC, 0); }
		public ITerminalNode PROTECTED() { return GetToken(CSharp4Parser.PROTECTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(CSharp4Parser.INTERNAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(CSharp4Parser.PRIVATE, 0); }
		public ITerminalNode ABSTRACT() { return GetToken(CSharp4Parser.ABSTRACT, 0); }
		public ITerminalNode SEALED() { return GetToken(CSharp4Parser.SEALED, 0); }
		public ITerminalNode STATIC() { return GetToken(CSharp4Parser.STATIC, 0); }
		public Class_modifier_unsafeContext class_modifier_unsafe() {
			return GetRuleContext<Class_modifier_unsafeContext>(0);
		}
		public Class_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterClass_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitClass_modifier(this);
		}
	}

	[RuleVersion(0)]
	public Class_modifierContext class_modifier() {
		Class_modifierContext _localctx = new Class_modifierContext(_ctx, State);
		EnterRule(_localctx, 366, RULE_class_modifier);
		try {
			State = 2172;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NEW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2163; Match(NEW);
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2164; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2165; Match(PROTECTED);
				}
				break;
			case INTERNAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2166; Match(INTERNAL);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2167; Match(PRIVATE);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2168; Match(ABSTRACT);
				}
				break;
			case SEALED:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2169; Match(SEALED);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2170; Match(STATIC);
				}
				break;
			case UNSAFE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2171; class_modifier_unsafe();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameter_listContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(CSharp4Parser.LT, 0); }
		public Type_parametersContext type_parameters() {
			return GetRuleContext<Type_parametersContext>(0);
		}
		public ITerminalNode GT() { return GetToken(CSharp4Parser.GT, 0); }
		public Type_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterType_parameter_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitType_parameter_list(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameter_listContext type_parameter_list() {
		Type_parameter_listContext _localctx = new Type_parameter_listContext(_ctx, State);
		EnterRule(_localctx, 368, RULE_type_parameter_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2174; Match(LT);
			State = 2175; type_parameters();
			State = 2176; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parametersContext : ParserRuleContext {
		public Type_parameterContext[] type_parameter() {
			return GetRuleContexts<Type_parameterContext>();
		}
		public Type_parameterContext type_parameter(int i) {
			return GetRuleContext<Type_parameterContext>(i);
		}
		public AttributesContext[] attributes() {
			return GetRuleContexts<AttributesContext>();
		}
		public AttributesContext attributes(int i) {
			return GetRuleContext<AttributesContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Type_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterType_parameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitType_parameters(this);
		}
	}

	[RuleVersion(0)]
	public Type_parametersContext type_parameters() {
		Type_parametersContext _localctx = new Type_parametersContext(_ctx, State);
		EnterRule(_localctx, 370, RULE_type_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2179;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2178; attributes();
				}
			}

			State = 2181; type_parameter();
			State = 2189;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2182; Match(COMMA);
				State = 2184;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==OPEN_BRACKET) {
					{
					State = 2183; attributes();
					}
				}

				State = 2186; type_parameter();
				}
				}
				State = 2191;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameterContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Type_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterType_parameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitType_parameter(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameterContext type_parameter() {
		Type_parameterContext _localctx = new Type_parameterContext(_ctx, State);
		EnterRule(_localctx, 372, RULE_type_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2192; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_baseContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(CSharp4Parser.COLON, 0); }
		public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Interface_typeContext[] interface_type() {
			return GetRuleContexts<Interface_typeContext>();
		}
		public Interface_typeContext interface_type(int i) {
			return GetRuleContext<Interface_typeContext>(i);
		}
		public Class_baseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_base; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterClass_base(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitClass_base(this);
		}
	}

	[RuleVersion(0)]
	public Class_baseContext class_base() {
		Class_baseContext _localctx = new Class_baseContext(_ctx, State);
		EnterRule(_localctx, 374, RULE_class_base);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2194; Match(COLON);
			State = 2195; class_type();
			State = 2200;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2196; Match(COMMA);
				State = 2197; interface_type();
				}
				}
				State = 2202;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_type_listContext : ParserRuleContext {
		public Interface_typeContext[] interface_type() {
			return GetRuleContexts<Interface_typeContext>();
		}
		public Interface_typeContext interface_type(int i) {
			return GetRuleContext<Interface_typeContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Interface_type_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_type_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterInterface_type_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitInterface_type_list(this);
		}
	}

	[RuleVersion(0)]
	public Interface_type_listContext interface_type_list() {
		Interface_type_listContext _localctx = new Interface_type_listContext(_ctx, State);
		EnterRule(_localctx, 376, RULE_interface_type_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2203; interface_type();
			State = 2208;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2204; Match(COMMA);
				State = 2205; interface_type();
				}
				}
				State = 2210;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameter_constraints_clausesContext : ParserRuleContext {
		public Type_parameter_constraints_clauseContext[] type_parameter_constraints_clause() {
			return GetRuleContexts<Type_parameter_constraints_clauseContext>();
		}
		public Type_parameter_constraints_clauseContext type_parameter_constraints_clause(int i) {
			return GetRuleContext<Type_parameter_constraints_clauseContext>(i);
		}
		public Type_parameter_constraints_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter_constraints_clauses; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterType_parameter_constraints_clauses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitType_parameter_constraints_clauses(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
		Type_parameter_constraints_clausesContext _localctx = new Type_parameter_constraints_clausesContext(_ctx, State);
		EnterRule(_localctx, 378, RULE_type_parameter_constraints_clauses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2211; type_parameter_constraints_clause();
			State = 2215;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WHERE) {
				{
				{
				State = 2212; type_parameter_constraints_clause();
				}
				}
				State = 2217;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameter_constraints_clauseContext : ParserRuleContext {
		public Where_contextual_keywordContext where_contextual_keyword() {
			return GetRuleContext<Where_contextual_keywordContext>(0);
		}
		public Type_parameterContext type_parameter() {
			return GetRuleContext<Type_parameterContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(CSharp4Parser.COLON, 0); }
		public Type_parameter_constraintsContext type_parameter_constraints() {
			return GetRuleContext<Type_parameter_constraintsContext>(0);
		}
		public Type_parameter_constraints_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter_constraints_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterType_parameter_constraints_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitType_parameter_constraints_clause(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameter_constraints_clauseContext type_parameter_constraints_clause() {
		Type_parameter_constraints_clauseContext _localctx = new Type_parameter_constraints_clauseContext(_ctx, State);
		EnterRule(_localctx, 380, RULE_type_parameter_constraints_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2218; where_contextual_keyword();
			State = 2219; type_parameter();
			State = 2220; Match(COLON);
			State = 2221; type_parameter_constraints();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameter_constraintsContext : ParserRuleContext {
		public Constructor_constraintContext constructor_constraint() {
			return GetRuleContext<Constructor_constraintContext>(0);
		}
		public Primary_constraintContext primary_constraint() {
			return GetRuleContext<Primary_constraintContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Secondary_constraintsContext secondary_constraints() {
			return GetRuleContext<Secondary_constraintsContext>(0);
		}
		public Type_parameter_constraintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter_constraints; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterType_parameter_constraints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitType_parameter_constraints(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameter_constraintsContext type_parameter_constraints() {
		Type_parameter_constraintsContext _localctx = new Type_parameter_constraintsContext(_ctx, State);
		EnterRule(_localctx, 382, RULE_type_parameter_constraints);
		int _la;
		try {
			State = 2233;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NEW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2223; constructor_constraint();
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BY:
			case CLASS:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case STRING:
			case STRUCT:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2224; primary_constraint();
				State = 2227;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,174,_ctx) ) {
				case 1:
					{
					State = 2225; Match(COMMA);
					State = 2226; secondary_constraints();
					}
					break;
				}
				State = 2231;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 2229; Match(COMMA);
					State = 2230; constructor_constraint();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_constraintContext : ParserRuleContext {
		public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		public ITerminalNode CLASS() { return GetToken(CSharp4Parser.CLASS, 0); }
		public ITerminalNode STRUCT() { return GetToken(CSharp4Parser.STRUCT, 0); }
		public Primary_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterPrimary_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitPrimary_constraint(this);
		}
	}

	[RuleVersion(0)]
	public Primary_constraintContext primary_constraint() {
		Primary_constraintContext _localctx = new Primary_constraintContext(_ctx, State);
		EnterRule(_localctx, 384, RULE_primary_constraint);
		try {
			State = 2238;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BY:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case STRING:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2235; class_type();
				}
				break;
			case CLASS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2236; Match(CLASS);
				}
				break;
			case STRUCT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2237; Match(STRUCT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Secondary_constraintsContext : ParserRuleContext {
		public Interface_typeContext[] interface_type() {
			return GetRuleContexts<Interface_typeContext>();
		}
		public Interface_typeContext interface_type(int i) {
			return GetRuleContext<Interface_typeContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Secondary_constraintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_secondary_constraints; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterSecondary_constraints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitSecondary_constraints(this);
		}
	}

	[RuleVersion(0)]
	public Secondary_constraintsContext secondary_constraints() {
		Secondary_constraintsContext _localctx = new Secondary_constraintsContext(_ctx, State);
		EnterRule(_localctx, 386, RULE_secondary_constraints);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2240; interface_type();
			State = 2245;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,178,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2241; Match(COMMA);
					State = 2242; interface_type();
					}
					} 
				}
				State = 2247;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,178,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_constraintContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(CSharp4Parser.NEW, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Constructor_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterConstructor_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitConstructor_constraint(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_constraintContext constructor_constraint() {
		Constructor_constraintContext _localctx = new Constructor_constraintContext(_ctx, State);
		EnterRule(_localctx, 388, RULE_constructor_constraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2248; Match(NEW);
			State = 2249; Match(OPEN_PARENS);
			State = 2250; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_bodyContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharp4Parser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharp4Parser.CLOSE_BRACE, 0); }
		public Class_member_declarationsContext class_member_declarations() {
			return GetRuleContext<Class_member_declarationsContext>(0);
		}
		public Class_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterClass_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitClass_body(this);
		}
	}

	[RuleVersion(0)]
	public Class_bodyContext class_body() {
		Class_bodyContext _localctx = new Class_bodyContext(_ctx, State);
		EnterRule(_localctx, 390, RULE_class_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2252; Match(OPEN_BRACE);
			State = 2254;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Pp_directive) | (1L << ABSTRACT) | (1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << CONST) | (1L << DECIMAL) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << ENUM) | (1L << EQUALS) | (1L << EVENT) | (1L << EXPLICIT) | (1L << EXTERN) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << IMPLICIT) | (1L << INT) | (1L << INTERFACE) | (1L << INTERNAL) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NEW))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OVERRIDE - 65)) | (1L << (PARTIAL - 65)) | (1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (READONLY - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SEALED - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STATIC - 65)) | (1L << (STRING - 65)) | (1L << (STRUCT - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNSAFE - 65)) | (1L << (USHORT - 65)) | (1L << (VIRTUAL - 65)) | (1L << (VOID - 65)) | (1L << (VOLATILE - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0) || _la==TILDE) {
				{
				State = 2253; class_member_declarations();
				}
			}

			State = 2256; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_member_declarationsContext : ParserRuleContext {
		public Class_member_declarationContext[] class_member_declaration() {
			return GetRuleContexts<Class_member_declarationContext>();
		}
		public Class_member_declarationContext class_member_declaration(int i) {
			return GetRuleContext<Class_member_declarationContext>(i);
		}
		public Class_member_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_member_declarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterClass_member_declarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitClass_member_declarations(this);
		}
	}

	[RuleVersion(0)]
	public Class_member_declarationsContext class_member_declarations() {
		Class_member_declarationsContext _localctx = new Class_member_declarationsContext(_ctx, State);
		EnterRule(_localctx, 392, RULE_class_member_declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2259;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 2258; class_member_declaration();
				}
				}
				State = 2261;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Pp_directive) | (1L << ABSTRACT) | (1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << CONST) | (1L << DECIMAL) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << ENUM) | (1L << EQUALS) | (1L << EVENT) | (1L << EXPLICIT) | (1L << EXTERN) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << IMPLICIT) | (1L << INT) | (1L << INTERFACE) | (1L << INTERNAL) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NEW))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OVERRIDE - 65)) | (1L << (PARTIAL - 65)) | (1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (READONLY - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SEALED - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STATIC - 65)) | (1L << (STRING - 65)) | (1L << (STRUCT - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNSAFE - 65)) | (1L << (USHORT - 65)) | (1L << (VIRTUAL - 65)) | (1L << (VOID - 65)) | (1L << (VOLATILE - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0) || _la==TILDE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_member_declarationContext : ParserRuleContext {
		public Common_member_declarationContext common_member_declaration() {
			return GetRuleContext<Common_member_declarationContext>(0);
		}
		public ITerminalNode TILDE() { return GetToken(CSharp4Parser.TILDE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Destructor_bodyContext destructor_body() {
			return GetRuleContext<Destructor_bodyContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public All_member_modifiersContext all_member_modifiers() {
			return GetRuleContext<All_member_modifiersContext>(0);
		}
		public ITerminalNode Pp_directive() { return GetToken(CSharp4Parser.Pp_directive, 0); }
		public Class_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_member_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterClass_member_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitClass_member_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Class_member_declarationContext class_member_declaration() {
		Class_member_declarationContext _localctx = new Class_member_declarationContext(_ctx, State);
		EnterRule(_localctx, 394, RULE_class_member_declaration);
		int _la;
		try {
			State = 2279;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ABSTRACT:
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CLASS:
			case CONST:
			case DECIMAL:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case ENUM:
			case EQUALS:
			case EVENT:
			case EXPLICIT:
			case EXTERN:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case IMPLICIT:
			case INT:
			case INTERFACE:
			case INTERNAL:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NEW:
			case OBJECT:
			case ON:
			case ORDERBY:
			case OVERRIDE:
			case PARTIAL:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case READONLY:
			case REMOVE:
			case SBYTE:
			case SEALED:
			case SELECT:
			case SET:
			case SHORT:
			case STATIC:
			case STRING:
			case STRUCT:
			case UINT:
			case ULONG:
			case UNSAFE:
			case USHORT:
			case VIRTUAL:
			case VOID:
			case VOLATILE:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case OPEN_BRACKET:
			case TILDE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2264;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==OPEN_BRACKET) {
					{
					State = 2263; attributes();
					}
				}

				State = 2267;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,182,_ctx) ) {
				case 1:
					{
					State = 2266; all_member_modifiers();
					}
					break;
				}
				State = 2276;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case ADD:
				case ALIAS:
				case ARGLIST:
				case ASCENDING:
				case BOOL:
				case BY:
				case BYTE:
				case CHAR:
				case CLASS:
				case CONST:
				case DECIMAL:
				case DELEGATE:
				case DESCENDING:
				case DOUBLE:
				case DYNAMIC:
				case ENUM:
				case EQUALS:
				case EVENT:
				case EXPLICIT:
				case FLOAT:
				case FROM:
				case GET:
				case GROUP:
				case IMPLICIT:
				case INT:
				case INTERFACE:
				case INTO:
				case JOIN:
				case LET:
				case LONG:
				case OBJECT:
				case ON:
				case ORDERBY:
				case PARTIAL:
				case REMOVE:
				case SBYTE:
				case SELECT:
				case SET:
				case SHORT:
				case STRING:
				case STRUCT:
				case UINT:
				case ULONG:
				case USHORT:
				case VOID:
				case WHERE:
				case YIELD:
				case IDENTIFIER:
					{
					State = 2269; common_member_declaration();
					}
					break;
				case TILDE:
					{
					State = 2270; Match(TILDE);
					State = 2271; identifier();
					State = 2272; Match(OPEN_PARENS);
					State = 2273; Match(CLOSE_PARENS);
					State = 2274; destructor_body();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case Pp_directive:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2278; Match(Pp_directive);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class All_member_modifiersContext : ParserRuleContext {
		public All_member_modifierContext m;
		public All_member_modifierContext[] all_member_modifier() {
			return GetRuleContexts<All_member_modifierContext>();
		}
		public All_member_modifierContext all_member_modifier(int i) {
			return GetRuleContext<All_member_modifierContext>(i);
		}
		public All_member_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_all_member_modifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAll_member_modifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAll_member_modifiers(this);
		}
	}

	[RuleVersion(0)]
	public All_member_modifiersContext all_member_modifiers() {
		All_member_modifiersContext _localctx = new All_member_modifiersContext(_ctx, State);
		EnterRule(_localctx, 396, RULE_all_member_modifiers);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2282;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2281; _localctx.m = all_member_modifier();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2284;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,185,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class All_member_modifierContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(CSharp4Parser.NEW, 0); }
		public ITerminalNode PUBLIC() { return GetToken(CSharp4Parser.PUBLIC, 0); }
		public ITerminalNode PROTECTED() { return GetToken(CSharp4Parser.PROTECTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(CSharp4Parser.INTERNAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(CSharp4Parser.PRIVATE, 0); }
		public ITerminalNode READONLY() { return GetToken(CSharp4Parser.READONLY, 0); }
		public ITerminalNode VOLATILE() { return GetToken(CSharp4Parser.VOLATILE, 0); }
		public ITerminalNode VIRTUAL() { return GetToken(CSharp4Parser.VIRTUAL, 0); }
		public ITerminalNode SEALED() { return GetToken(CSharp4Parser.SEALED, 0); }
		public ITerminalNode OVERRIDE() { return GetToken(CSharp4Parser.OVERRIDE, 0); }
		public ITerminalNode ABSTRACT() { return GetToken(CSharp4Parser.ABSTRACT, 0); }
		public ITerminalNode STATIC() { return GetToken(CSharp4Parser.STATIC, 0); }
		public ITerminalNode UNSAFE() { return GetToken(CSharp4Parser.UNSAFE, 0); }
		public ITerminalNode EXTERN() { return GetToken(CSharp4Parser.EXTERN, 0); }
		public Partial_contextual_keywordContext partial_contextual_keyword() {
			return GetRuleContext<Partial_contextual_keywordContext>(0);
		}
		public All_member_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_all_member_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAll_member_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAll_member_modifier(this);
		}
	}

	[RuleVersion(0)]
	public All_member_modifierContext all_member_modifier() {
		All_member_modifierContext _localctx = new All_member_modifierContext(_ctx, State);
		EnterRule(_localctx, 398, RULE_all_member_modifier);
		try {
			State = 2301;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NEW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2286; Match(NEW);
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2287; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2288; Match(PROTECTED);
				}
				break;
			case INTERNAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2289; Match(INTERNAL);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2290; Match(PRIVATE);
				}
				break;
			case READONLY:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2291; Match(READONLY);
				}
				break;
			case VOLATILE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2292; Match(VOLATILE);
				}
				break;
			case VIRTUAL:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2293; Match(VIRTUAL);
				}
				break;
			case SEALED:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2294; Match(SEALED);
				}
				break;
			case OVERRIDE:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2295; Match(OVERRIDE);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2296; Match(ABSTRACT);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2297; Match(STATIC);
				}
				break;
			case UNSAFE:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2298; Match(UNSAFE);
				}
				break;
			case EXTERN:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2299; Match(EXTERN);
				}
				break;
			case PARTIAL:
				EnterOuterAlt(_localctx, 15);
				{
				State = 2300; partial_contextual_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Common_member_declarationContext : ParserRuleContext {
		public Constant_declaration2Context constant_declaration2() {
			return GetRuleContext<Constant_declaration2Context>(0);
		}
		public Typed_member_declarationContext typed_member_declaration() {
			return GetRuleContext<Typed_member_declarationContext>(0);
		}
		public Event_declaration2Context event_declaration2() {
			return GetRuleContext<Event_declaration2Context>(0);
		}
		public Conversion_operator_declaratorContext conversion_operator_declarator() {
			return GetRuleContext<Conversion_operator_declaratorContext>(0);
		}
		public Operator_bodyContext operator_body() {
			return GetRuleContext<Operator_bodyContext>(0);
		}
		public Constructor_declaration2Context constructor_declaration2() {
			return GetRuleContext<Constructor_declaration2Context>(0);
		}
		public Type_voidContext type_void() {
			return GetRuleContext<Type_voidContext>(0);
		}
		public Method_declaration2Context method_declaration2() {
			return GetRuleContext<Method_declaration2Context>(0);
		}
		public Class_definitionContext class_definition() {
			return GetRuleContext<Class_definitionContext>(0);
		}
		public Struct_definitionContext struct_definition() {
			return GetRuleContext<Struct_definitionContext>(0);
		}
		public Interface_definitionContext interface_definition() {
			return GetRuleContext<Interface_definitionContext>(0);
		}
		public Enum_definitionContext enum_definition() {
			return GetRuleContext<Enum_definitionContext>(0);
		}
		public Delegate_definitionContext delegate_definition() {
			return GetRuleContext<Delegate_definitionContext>(0);
		}
		public Common_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_common_member_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterCommon_member_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitCommon_member_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Common_member_declarationContext common_member_declaration() {
		Common_member_declarationContext _localctx = new Common_member_declarationContext(_ctx, State);
		EnterRule(_localctx, 400, RULE_common_member_declaration);
		try {
			State = 2318;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,187,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2303; constant_declaration2();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2304; typed_member_declaration();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2305; event_declaration2();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2306; conversion_operator_declarator();
				State = 2307; operator_body();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2309; constructor_declaration2();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2310; type_void();
				State = 2311; method_declaration2();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2313; class_definition();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2314; struct_definition();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2315; interface_definition();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2316; enum_definition();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2317; delegate_definition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Typed_member_declarationContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Interface_typeContext interface_type() {
			return GetRuleContext<Interface_typeContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(CSharp4Parser.DOT, 0); }
		public Indexer_declaration2Context indexer_declaration2() {
			return GetRuleContext<Indexer_declaration2Context>(0);
		}
		public Method_declaration2Context method_declaration2() {
			return GetRuleContext<Method_declaration2Context>(0);
		}
		public Property_declaration2Context property_declaration2() {
			return GetRuleContext<Property_declaration2Context>(0);
		}
		public Operator_declaration2Context operator_declaration2() {
			return GetRuleContext<Operator_declaration2Context>(0);
		}
		public Field_declaration2Context field_declaration2() {
			return GetRuleContext<Field_declaration2Context>(0);
		}
		public Typed_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typed_member_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterTyped_member_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitTyped_member_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Typed_member_declarationContext typed_member_declaration() {
		Typed_member_declarationContext _localctx = new Typed_member_declarationContext(_ctx, State);
		EnterRule(_localctx, 402, RULE_typed_member_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2320; type();
			State = 2330;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,188,_ctx) ) {
			case 1:
				{
				State = 2321; interface_type();
				State = 2322; Match(DOT);
				State = 2323; indexer_declaration2();
				}
				break;

			case 2:
				{
				State = 2325; method_declaration2();
				}
				break;

			case 3:
				{
				State = 2326; property_declaration2();
				}
				break;

			case 4:
				{
				State = 2327; indexer_declaration2();
				}
				break;

			case 5:
				{
				State = 2328; operator_declaration2();
				}
				break;

			case 6:
				{
				State = 2329; field_declaration2();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_declaratorsContext : ParserRuleContext {
		public Constant_declaratorContext[] constant_declarator() {
			return GetRuleContexts<Constant_declaratorContext>();
		}
		public Constant_declaratorContext constant_declarator(int i) {
			return GetRuleContext<Constant_declaratorContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Constant_declaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_declarators; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterConstant_declarators(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitConstant_declarators(this);
		}
	}

	[RuleVersion(0)]
	public Constant_declaratorsContext constant_declarators() {
		Constant_declaratorsContext _localctx = new Constant_declaratorsContext(_ctx, State);
		EnterRule(_localctx, 404, RULE_constant_declarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2332; constant_declarator();
			State = 2337;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2333; Match(COMMA);
				State = 2334; constant_declarator();
				}
				}
				State = 2339;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_declaratorContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(CSharp4Parser.ASSIGNMENT, 0); }
		public Constant_expressionContext constant_expression() {
			return GetRuleContext<Constant_expressionContext>(0);
		}
		public Constant_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterConstant_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitConstant_declarator(this);
		}
	}

	[RuleVersion(0)]
	public Constant_declaratorContext constant_declarator() {
		Constant_declaratorContext _localctx = new Constant_declaratorContext(_ctx, State);
		EnterRule(_localctx, 406, RULE_constant_declarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2340; identifier();
			State = 2341; Match(ASSIGNMENT);
			State = 2342; constant_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declaratorsContext : ParserRuleContext {
		public Variable_declaratorContext[] variable_declarator() {
			return GetRuleContexts<Variable_declaratorContext>();
		}
		public Variable_declaratorContext variable_declarator(int i) {
			return GetRuleContext<Variable_declaratorContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Variable_declaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declarators; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterVariable_declarators(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitVariable_declarators(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declaratorsContext variable_declarators() {
		Variable_declaratorsContext _localctx = new Variable_declaratorsContext(_ctx, State);
		EnterRule(_localctx, 408, RULE_variable_declarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2344; variable_declarator();
			State = 2349;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2345; Match(COMMA);
				State = 2346; variable_declarator();
				}
				}
				State = 2351;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declaratorContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(CSharp4Parser.ASSIGNMENT, 0); }
		public Variable_initializerContext variable_initializer() {
			return GetRuleContext<Variable_initializerContext>(0);
		}
		public Variable_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterVariable_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitVariable_declarator(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declaratorContext variable_declarator() {
		Variable_declaratorContext _localctx = new Variable_declaratorContext(_ctx, State);
		EnterRule(_localctx, 410, RULE_variable_declarator);
		try {
			State = 2357;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,191,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2352; identifier();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2353; identifier();
				State = 2354; Match(ASSIGNMENT);
				State = 2355; variable_initializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_initializerContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Array_initializerContext array_initializer() {
			return GetRuleContext<Array_initializerContext>(0);
		}
		public Variable_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterVariable_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitVariable_initializer(this);
		}
	}

	[RuleVersion(0)]
	public Variable_initializerContext variable_initializer() {
		Variable_initializerContext _localctx = new Variable_initializerContext(_ctx, State);
		EnterRule(_localctx, 412, RULE_variable_initializer);
		try {
			State = 2361;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case USHORT:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2359; expression();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2360; array_initializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_declarationContext : ParserRuleContext {
		public Method_headerContext method_header() {
			return GetRuleContext<Method_headerContext>(0);
		}
		public Method_bodyContext method_body() {
			return GetRuleContext<Method_bodyContext>(0);
		}
		public Method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterMethod_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitMethod_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Method_declarationContext method_declaration() {
		Method_declarationContext _localctx = new Method_declarationContext(_ctx, State);
		EnterRule(_localctx, 414, RULE_method_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2363; method_header();
			State = 2364; method_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_headerContext : ParserRuleContext {
		public Return_typeContext return_type() {
			return GetRuleContext<Return_typeContext>(0);
		}
		public Member_nameContext member_name() {
			return GetRuleContext<Member_nameContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Method_modifiersContext method_modifiers() {
			return GetRuleContext<Method_modifiersContext>(0);
		}
		public Partial_contextual_keywordContext partial_contextual_keyword() {
			return GetRuleContext<Partial_contextual_keywordContext>(0);
		}
		public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public Method_headerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_header; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterMethod_header(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitMethod_header(this);
		}
	}

	[RuleVersion(0)]
	public Method_headerContext method_header() {
		Method_headerContext _localctx = new Method_headerContext(_ctx, State);
		EnterRule(_localctx, 416, RULE_method_header);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2367;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2366; attributes();
				}
			}

			State = 2370;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << EXTERN) | (1L << INTERNAL) | (1L << NEW))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OVERRIDE - 70)) | (1L << (PRIVATE - 70)) | (1L << (PROTECTED - 70)) | (1L << (PUBLIC - 70)) | (1L << (SEALED - 70)) | (1L << (STATIC - 70)) | (1L << (UNSAFE - 70)) | (1L << (VIRTUAL - 70)))) != 0)) {
				{
				State = 2369; method_modifiers();
				}
			}

			State = 2373;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,195,_ctx) ) {
			case 1:
				{
				State = 2372; partial_contextual_keyword();
				}
				break;
			}
			State = 2375; return_type();
			State = 2376; member_name();
			State = 2378;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 2377; type_parameter_list();
				}
			}

			State = 2380; Match(OPEN_PARENS);
			State = 2382;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OUT - 65)) | (1L << (PARAMS - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (USHORT - 65)) | (1L << (VOID - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0)) {
				{
				State = 2381; formal_parameter_list();
				}
			}

			State = 2384; Match(CLOSE_PARENS);
			State = 2386;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WHERE) {
				{
				State = 2385; type_parameter_constraints_clauses();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_modifiersContext : ParserRuleContext {
		public Method_modifierContext[] method_modifier() {
			return GetRuleContexts<Method_modifierContext>();
		}
		public Method_modifierContext method_modifier(int i) {
			return GetRuleContext<Method_modifierContext>(i);
		}
		public Method_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_modifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterMethod_modifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitMethod_modifiers(this);
		}
	}

	[RuleVersion(0)]
	public Method_modifiersContext method_modifiers() {
		Method_modifiersContext _localctx = new Method_modifiersContext(_ctx, State);
		EnterRule(_localctx, 418, RULE_method_modifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2389;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 2388; method_modifier();
				}
				}
				State = 2391;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << EXTERN) | (1L << INTERNAL) | (1L << NEW))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OVERRIDE - 70)) | (1L << (PRIVATE - 70)) | (1L << (PROTECTED - 70)) | (1L << (PUBLIC - 70)) | (1L << (SEALED - 70)) | (1L << (STATIC - 70)) | (1L << (UNSAFE - 70)) | (1L << (VIRTUAL - 70)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_modifierContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(CSharp4Parser.NEW, 0); }
		public ITerminalNode PUBLIC() { return GetToken(CSharp4Parser.PUBLIC, 0); }
		public ITerminalNode PROTECTED() { return GetToken(CSharp4Parser.PROTECTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(CSharp4Parser.INTERNAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(CSharp4Parser.PRIVATE, 0); }
		public ITerminalNode STATIC() { return GetToken(CSharp4Parser.STATIC, 0); }
		public ITerminalNode VIRTUAL() { return GetToken(CSharp4Parser.VIRTUAL, 0); }
		public ITerminalNode SEALED() { return GetToken(CSharp4Parser.SEALED, 0); }
		public ITerminalNode OVERRIDE() { return GetToken(CSharp4Parser.OVERRIDE, 0); }
		public ITerminalNode ABSTRACT() { return GetToken(CSharp4Parser.ABSTRACT, 0); }
		public ITerminalNode EXTERN() { return GetToken(CSharp4Parser.EXTERN, 0); }
		public Method_modifier_unsafeContext method_modifier_unsafe() {
			return GetRuleContext<Method_modifier_unsafeContext>(0);
		}
		public Method_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterMethod_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitMethod_modifier(this);
		}
	}

	[RuleVersion(0)]
	public Method_modifierContext method_modifier() {
		Method_modifierContext _localctx = new Method_modifierContext(_ctx, State);
		EnterRule(_localctx, 420, RULE_method_modifier);
		try {
			State = 2405;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NEW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2393; Match(NEW);
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2394; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2395; Match(PROTECTED);
				}
				break;
			case INTERNAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2396; Match(INTERNAL);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2397; Match(PRIVATE);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2398; Match(STATIC);
				}
				break;
			case VIRTUAL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2399; Match(VIRTUAL);
				}
				break;
			case SEALED:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2400; Match(SEALED);
				}
				break;
			case OVERRIDE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2401; Match(OVERRIDE);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2402; Match(ABSTRACT);
				}
				break;
			case EXTERN:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2403; Match(EXTERN);
				}
				break;
			case UNSAFE:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2404; method_modifier_unsafe();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_typeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(CSharp4Parser.VOID, 0); }
		public Return_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterReturn_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitReturn_type(this);
		}
	}

	[RuleVersion(0)]
	public Return_typeContext return_type() {
		Return_typeContext _localctx = new Return_typeContext(_ctx, State);
		EnterRule(_localctx, 422, RULE_return_type);
		try {
			State = 2409;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,201,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2407; type();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2408; Match(VOID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_nameContext : ParserRuleContext {
		public Interface_typeContext interface_type() {
			return GetRuleContext<Interface_typeContext>(0);
		}
		public Member_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterMember_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitMember_name(this);
		}
	}

	[RuleVersion(0)]
	public Member_nameContext member_name() {
		Member_nameContext _localctx = new Member_nameContext(_ctx, State);
		EnterRule(_localctx, 424, RULE_member_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2411; interface_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_bodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Method_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterMethod_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitMethod_body(this);
		}
	}

	[RuleVersion(0)]
	public Method_bodyContext method_body() {
		Method_bodyContext _localctx = new Method_bodyContext(_ctx, State);
		EnterRule(_localctx, 426, RULE_method_body);
		try {
			State = 2415;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2413; block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2414; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Formal_parameter_listContext : ParserRuleContext {
		public Parameter_arrayContext parameter_array() {
			return GetRuleContext<Parameter_arrayContext>(0);
		}
		public Fixed_parametersContext fixed_parameters() {
			return GetRuleContext<Fixed_parametersContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(CSharp4Parser.COMMA, 0); }
		public Formal_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formal_parameter_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterFormal_parameter_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitFormal_parameter_list(this);
		}
	}

	[RuleVersion(0)]
	public Formal_parameter_listContext formal_parameter_list() {
		Formal_parameter_listContext _localctx = new Formal_parameter_listContext(_ctx, State);
		EnterRule(_localctx, 428, RULE_formal_parameter_list);
		int _la;
		try {
			State = 2423;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,204,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2417; parameter_array();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2418; fixed_parameters();
				State = 2421;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 2419; Match(COMMA);
					State = 2420; parameter_array();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_parametersContext : ParserRuleContext {
		public Fixed_parameterContext[] fixed_parameter() {
			return GetRuleContexts<Fixed_parameterContext>();
		}
		public Fixed_parameterContext fixed_parameter(int i) {
			return GetRuleContext<Fixed_parameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Fixed_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_parameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterFixed_parameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitFixed_parameters(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_parametersContext fixed_parameters() {
		Fixed_parametersContext _localctx = new Fixed_parametersContext(_ctx, State);
		EnterRule(_localctx, 430, RULE_fixed_parameters);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2425; fixed_parameter();
			State = 2430;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,205,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2426; Match(COMMA);
					State = 2427; fixed_parameter();
					}
					} 
				}
				State = 2432;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,205,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_parameterContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Parameter_modifierContext parameter_modifier() {
			return GetRuleContext<Parameter_modifierContext>(0);
		}
		public Default_argumentContext default_argument() {
			return GetRuleContext<Default_argumentContext>(0);
		}
		public ArglistContext arglist() {
			return GetRuleContext<ArglistContext>(0);
		}
		public Fixed_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterFixed_parameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitFixed_parameter(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_parameterContext fixed_parameter() {
		Fixed_parameterContext _localctx = new Fixed_parameterContext(_ctx, State);
		EnterRule(_localctx, 432, RULE_fixed_parameter);
		int _la;
		try {
			State = 2445;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,209,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2434;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==OPEN_BRACKET) {
					{
					State = 2433; attributes();
					}
				}

				State = 2437;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (OUT - 69)) | (1L << (REF - 69)) | (1L << (THIS - 69)))) != 0)) {
					{
					State = 2436; parameter_modifier();
					}
				}

				State = 2439; type();
				State = 2440; identifier();
				State = 2442;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ASSIGNMENT) {
					{
					State = 2441; default_argument();
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2444; arglist();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_argumentContext : ParserRuleContext {
		public ITerminalNode ASSIGNMENT() { return GetToken(CSharp4Parser.ASSIGNMENT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Default_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterDefault_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitDefault_argument(this);
		}
	}

	[RuleVersion(0)]
	public Default_argumentContext default_argument() {
		Default_argumentContext _localctx = new Default_argumentContext(_ctx, State);
		EnterRule(_localctx, 434, RULE_default_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2447; Match(ASSIGNMENT);
			State = 2448; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_modifierContext : ParserRuleContext {
		public ITerminalNode REF() { return GetToken(CSharp4Parser.REF, 0); }
		public ITerminalNode OUT() { return GetToken(CSharp4Parser.OUT, 0); }
		public ITerminalNode THIS() { return GetToken(CSharp4Parser.THIS, 0); }
		public Parameter_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterParameter_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitParameter_modifier(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_modifierContext parameter_modifier() {
		Parameter_modifierContext _localctx = new Parameter_modifierContext(_ctx, State);
		EnterRule(_localctx, 436, RULE_parameter_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2450;
			_la = _input.La(1);
			if ( !(((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (OUT - 69)) | (1L << (REF - 69)) | (1L << (THIS - 69)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_arrayContext : ParserRuleContext {
		public ITerminalNode PARAMS() { return GetToken(CSharp4Parser.PARAMS, 0); }
		public Array_typeContext array_type() {
			return GetRuleContext<Array_typeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Parameter_arrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_array; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterParameter_array(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitParameter_array(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_arrayContext parameter_array() {
		Parameter_arrayContext _localctx = new Parameter_arrayContext(_ctx, State);
		EnterRule(_localctx, 438, RULE_parameter_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2453;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2452; attributes();
				}
			}

			State = 2455; Match(PARAMS);
			State = 2456; array_type();
			State = 2457; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_declarationContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Member_nameContext member_name() {
			return GetRuleContext<Member_nameContext>(0);
		}
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharp4Parser.OPEN_BRACE, 0); }
		public Accessor_declarationsContext accessor_declarations() {
			return GetRuleContext<Accessor_declarationsContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharp4Parser.CLOSE_BRACE, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Property_modifiersContext property_modifiers() {
			return GetRuleContext<Property_modifiersContext>(0);
		}
		public Property_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterProperty_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitProperty_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Property_declarationContext property_declaration() {
		Property_declarationContext _localctx = new Property_declarationContext(_ctx, State);
		EnterRule(_localctx, 440, RULE_property_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2460;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2459; attributes();
				}
			}

			State = 2463;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << EXTERN) | (1L << INTERNAL) | (1L << NEW))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OVERRIDE - 70)) | (1L << (PRIVATE - 70)) | (1L << (PROTECTED - 70)) | (1L << (PUBLIC - 70)) | (1L << (SEALED - 70)) | (1L << (STATIC - 70)) | (1L << (UNSAFE - 70)) | (1L << (VIRTUAL - 70)))) != 0)) {
				{
				State = 2462; property_modifiers();
				}
			}

			State = 2465; type();
			State = 2466; member_name();
			State = 2467; Match(OPEN_BRACE);
			State = 2468; accessor_declarations();
			State = 2469; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_modifiersContext : ParserRuleContext {
		public Property_modifierContext[] property_modifier() {
			return GetRuleContexts<Property_modifierContext>();
		}
		public Property_modifierContext property_modifier(int i) {
			return GetRuleContext<Property_modifierContext>(i);
		}
		public Property_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_modifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterProperty_modifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitProperty_modifiers(this);
		}
	}

	[RuleVersion(0)]
	public Property_modifiersContext property_modifiers() {
		Property_modifiersContext _localctx = new Property_modifiersContext(_ctx, State);
		EnterRule(_localctx, 442, RULE_property_modifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2472;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 2471; property_modifier();
				}
				}
				State = 2474;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << EXTERN) | (1L << INTERNAL) | (1L << NEW))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OVERRIDE - 70)) | (1L << (PRIVATE - 70)) | (1L << (PROTECTED - 70)) | (1L << (PUBLIC - 70)) | (1L << (SEALED - 70)) | (1L << (STATIC - 70)) | (1L << (UNSAFE - 70)) | (1L << (VIRTUAL - 70)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_modifierContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(CSharp4Parser.NEW, 0); }
		public ITerminalNode PUBLIC() { return GetToken(CSharp4Parser.PUBLIC, 0); }
		public ITerminalNode PROTECTED() { return GetToken(CSharp4Parser.PROTECTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(CSharp4Parser.INTERNAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(CSharp4Parser.PRIVATE, 0); }
		public ITerminalNode STATIC() { return GetToken(CSharp4Parser.STATIC, 0); }
		public ITerminalNode VIRTUAL() { return GetToken(CSharp4Parser.VIRTUAL, 0); }
		public ITerminalNode SEALED() { return GetToken(CSharp4Parser.SEALED, 0); }
		public ITerminalNode OVERRIDE() { return GetToken(CSharp4Parser.OVERRIDE, 0); }
		public ITerminalNode ABSTRACT() { return GetToken(CSharp4Parser.ABSTRACT, 0); }
		public ITerminalNode EXTERN() { return GetToken(CSharp4Parser.EXTERN, 0); }
		public Property_modifier_unsafeContext property_modifier_unsafe() {
			return GetRuleContext<Property_modifier_unsafeContext>(0);
		}
		public Property_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterProperty_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitProperty_modifier(this);
		}
	}

	[RuleVersion(0)]
	public Property_modifierContext property_modifier() {
		Property_modifierContext _localctx = new Property_modifierContext(_ctx, State);
		EnterRule(_localctx, 444, RULE_property_modifier);
		try {
			State = 2488;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NEW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2476; Match(NEW);
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2477; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2478; Match(PROTECTED);
				}
				break;
			case INTERNAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2479; Match(INTERNAL);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2480; Match(PRIVATE);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2481; Match(STATIC);
				}
				break;
			case VIRTUAL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2482; Match(VIRTUAL);
				}
				break;
			case SEALED:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2483; Match(SEALED);
				}
				break;
			case OVERRIDE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2484; Match(OVERRIDE);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2485; Match(ABSTRACT);
				}
				break;
			case EXTERN:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2486; Match(EXTERN);
				}
				break;
			case UNSAFE:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2487; property_modifier_unsafe();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Accessor_declarationsContext : ParserRuleContext {
		public AttributesContext attrs;
		public Accessor_modifierContext mods;
		public Get_contextual_keywordContext get_contextual_keyword() {
			return GetRuleContext<Get_contextual_keywordContext>(0);
		}
		public Accessor_bodyContext accessor_body() {
			return GetRuleContext<Accessor_bodyContext>(0);
		}
		public Set_contextual_keywordContext set_contextual_keyword() {
			return GetRuleContext<Set_contextual_keywordContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Accessor_modifierContext accessor_modifier() {
			return GetRuleContext<Accessor_modifierContext>(0);
		}
		public Set_accessor_declarationContext set_accessor_declaration() {
			return GetRuleContext<Set_accessor_declarationContext>(0);
		}
		public Get_accessor_declarationContext get_accessor_declaration() {
			return GetRuleContext<Get_accessor_declarationContext>(0);
		}
		public Accessor_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessor_declarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAccessor_declarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAccessor_declarations(this);
		}
	}

	[RuleVersion(0)]
	public Accessor_declarationsContext accessor_declarations() {
		Accessor_declarationsContext _localctx = new Accessor_declarationsContext(_ctx, State);
		EnterRule(_localctx, 446, RULE_accessor_declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2491;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2490; _localctx.attrs = attributes();
				}
			}

			State = 2494;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (INTERNAL - 55)) | (1L << (PRIVATE - 55)) | (1L << (PROTECTED - 55)))) != 0)) {
				{
				State = 2493; _localctx.mods = accessor_modifier();
				}
			}

			State = 2506;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case GET:
				{
				State = 2496; get_contextual_keyword();
				State = 2497; accessor_body();
				State = 2499;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (INTERNAL - 55)) | (1L << (PRIVATE - 55)) | (1L << (PROTECTED - 55)) | (1L << (SET - 55)) | (1L << (OPEN_BRACKET - 55)))) != 0)) {
					{
					State = 2498; set_accessor_declaration();
					}
				}

				}
				break;
			case SET:
				{
				State = 2501; set_contextual_keyword();
				State = 2502; accessor_body();
				State = 2504;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==GET || _la==INTERNAL || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (PRIVATE - 73)) | (1L << (PROTECTED - 73)) | (1L << (OPEN_BRACKET - 73)))) != 0)) {
					{
					State = 2503; get_accessor_declaration();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Get_accessor_declarationContext : ParserRuleContext {
		public Get_contextual_keywordContext get_contextual_keyword() {
			return GetRuleContext<Get_contextual_keywordContext>(0);
		}
		public Accessor_bodyContext accessor_body() {
			return GetRuleContext<Accessor_bodyContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Accessor_modifierContext accessor_modifier() {
			return GetRuleContext<Accessor_modifierContext>(0);
		}
		public Get_accessor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_get_accessor_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterGet_accessor_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitGet_accessor_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Get_accessor_declarationContext get_accessor_declaration() {
		Get_accessor_declarationContext _localctx = new Get_accessor_declarationContext(_ctx, State);
		EnterRule(_localctx, 448, RULE_get_accessor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2509;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2508; attributes();
				}
			}

			State = 2512;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (INTERNAL - 55)) | (1L << (PRIVATE - 55)) | (1L << (PROTECTED - 55)))) != 0)) {
				{
				State = 2511; accessor_modifier();
				}
			}

			State = 2514; get_contextual_keyword();
			State = 2515; accessor_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_accessor_declarationContext : ParserRuleContext {
		public Set_contextual_keywordContext set_contextual_keyword() {
			return GetRuleContext<Set_contextual_keywordContext>(0);
		}
		public Accessor_bodyContext accessor_body() {
			return GetRuleContext<Accessor_bodyContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Accessor_modifierContext accessor_modifier() {
			return GetRuleContext<Accessor_modifierContext>(0);
		}
		public Set_accessor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_accessor_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterSet_accessor_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitSet_accessor_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Set_accessor_declarationContext set_accessor_declaration() {
		Set_accessor_declarationContext _localctx = new Set_accessor_declarationContext(_ctx, State);
		EnterRule(_localctx, 450, RULE_set_accessor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2518;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2517; attributes();
				}
			}

			State = 2521;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (INTERNAL - 55)) | (1L << (PRIVATE - 55)) | (1L << (PROTECTED - 55)))) != 0)) {
				{
				State = 2520; accessor_modifier();
				}
			}

			State = 2523; set_contextual_keyword();
			State = 2524; accessor_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Accessor_modifierContext : ParserRuleContext {
		public ITerminalNode PROTECTED() { return GetToken(CSharp4Parser.PROTECTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(CSharp4Parser.INTERNAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(CSharp4Parser.PRIVATE, 0); }
		public Accessor_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessor_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAccessor_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAccessor_modifier(this);
		}
	}

	[RuleVersion(0)]
	public Accessor_modifierContext accessor_modifier() {
		Accessor_modifierContext _localctx = new Accessor_modifierContext(_ctx, State);
		EnterRule(_localctx, 452, RULE_accessor_modifier);
		try {
			State = 2533;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,224,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2526; Match(PROTECTED);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2527; Match(INTERNAL);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2528; Match(PRIVATE);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2529; Match(PROTECTED);
				State = 2530; Match(INTERNAL);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2531; Match(INTERNAL);
				State = 2532; Match(PROTECTED);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Accessor_bodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Accessor_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessor_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAccessor_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAccessor_body(this);
		}
	}

	[RuleVersion(0)]
	public Accessor_bodyContext accessor_body() {
		Accessor_bodyContext _localctx = new Accessor_bodyContext(_ctx, State);
		EnterRule(_localctx, 454, RULE_accessor_body);
		try {
			State = 2537;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2535; block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2536; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_declarationContext : ParserRuleContext {
		public ITerminalNode EVENT() { return GetToken(CSharp4Parser.EVENT, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Variable_declaratorsContext variable_declarators() {
			return GetRuleContext<Variable_declaratorsContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Member_nameContext member_name() {
			return GetRuleContext<Member_nameContext>(0);
		}
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharp4Parser.OPEN_BRACE, 0); }
		public Event_accessor_declarationsContext event_accessor_declarations() {
			return GetRuleContext<Event_accessor_declarationsContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharp4Parser.CLOSE_BRACE, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Event_modifiersContext event_modifiers() {
			return GetRuleContext<Event_modifiersContext>(0);
		}
		public Event_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterEvent_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitEvent_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Event_declarationContext event_declaration() {
		Event_declarationContext _localctx = new Event_declarationContext(_ctx, State);
		EnterRule(_localctx, 456, RULE_event_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2540;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2539; attributes();
				}
			}

			State = 2543;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << EXTERN) | (1L << INTERNAL) | (1L << NEW))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OVERRIDE - 70)) | (1L << (PRIVATE - 70)) | (1L << (PROTECTED - 70)) | (1L << (PUBLIC - 70)) | (1L << (SEALED - 70)) | (1L << (STATIC - 70)) | (1L << (UNSAFE - 70)) | (1L << (VIRTUAL - 70)))) != 0)) {
				{
				State = 2542; event_modifiers();
				}
			}

			State = 2545; Match(EVENT);
			State = 2546; type();
			State = 2555;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,228,_ctx) ) {
			case 1:
				{
				State = 2547; variable_declarators();
				State = 2548; Match(SEMICOLON);
				}
				break;

			case 2:
				{
				State = 2550; member_name();
				State = 2551; Match(OPEN_BRACE);
				State = 2552; event_accessor_declarations();
				State = 2553; Match(CLOSE_BRACE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_modifiersContext : ParserRuleContext {
		public Event_modifierContext[] event_modifier() {
			return GetRuleContexts<Event_modifierContext>();
		}
		public Event_modifierContext event_modifier(int i) {
			return GetRuleContext<Event_modifierContext>(i);
		}
		public Event_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_modifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterEvent_modifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitEvent_modifiers(this);
		}
	}

	[RuleVersion(0)]
	public Event_modifiersContext event_modifiers() {
		Event_modifiersContext _localctx = new Event_modifiersContext(_ctx, State);
		EnterRule(_localctx, 458, RULE_event_modifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2557; event_modifier();
			State = 2561;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << EXTERN) | (1L << INTERNAL) | (1L << NEW))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OVERRIDE - 70)) | (1L << (PRIVATE - 70)) | (1L << (PROTECTED - 70)) | (1L << (PUBLIC - 70)) | (1L << (SEALED - 70)) | (1L << (STATIC - 70)) | (1L << (UNSAFE - 70)) | (1L << (VIRTUAL - 70)))) != 0)) {
				{
				{
				State = 2558; event_modifier();
				}
				}
				State = 2563;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_modifierContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(CSharp4Parser.NEW, 0); }
		public ITerminalNode PUBLIC() { return GetToken(CSharp4Parser.PUBLIC, 0); }
		public ITerminalNode PROTECTED() { return GetToken(CSharp4Parser.PROTECTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(CSharp4Parser.INTERNAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(CSharp4Parser.PRIVATE, 0); }
		public ITerminalNode STATIC() { return GetToken(CSharp4Parser.STATIC, 0); }
		public ITerminalNode VIRTUAL() { return GetToken(CSharp4Parser.VIRTUAL, 0); }
		public ITerminalNode SEALED() { return GetToken(CSharp4Parser.SEALED, 0); }
		public ITerminalNode OVERRIDE() { return GetToken(CSharp4Parser.OVERRIDE, 0); }
		public ITerminalNode ABSTRACT() { return GetToken(CSharp4Parser.ABSTRACT, 0); }
		public ITerminalNode EXTERN() { return GetToken(CSharp4Parser.EXTERN, 0); }
		public Event_modifier_unsafeContext event_modifier_unsafe() {
			return GetRuleContext<Event_modifier_unsafeContext>(0);
		}
		public Event_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterEvent_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitEvent_modifier(this);
		}
	}

	[RuleVersion(0)]
	public Event_modifierContext event_modifier() {
		Event_modifierContext _localctx = new Event_modifierContext(_ctx, State);
		EnterRule(_localctx, 460, RULE_event_modifier);
		try {
			State = 2576;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NEW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2564; Match(NEW);
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2565; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2566; Match(PROTECTED);
				}
				break;
			case INTERNAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2567; Match(INTERNAL);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2568; Match(PRIVATE);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2569; Match(STATIC);
				}
				break;
			case VIRTUAL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2570; Match(VIRTUAL);
				}
				break;
			case SEALED:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2571; Match(SEALED);
				}
				break;
			case OVERRIDE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2572; Match(OVERRIDE);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2573; Match(ABSTRACT);
				}
				break;
			case EXTERN:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2574; Match(EXTERN);
				}
				break;
			case UNSAFE:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2575; event_modifier_unsafe();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_accessor_declarationsContext : ParserRuleContext {
		public Add_contextual_keywordContext add_contextual_keyword() {
			return GetRuleContext<Add_contextual_keywordContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Remove_accessor_declarationContext remove_accessor_declaration() {
			return GetRuleContext<Remove_accessor_declarationContext>(0);
		}
		public Remove_contextual_keywordContext remove_contextual_keyword() {
			return GetRuleContext<Remove_contextual_keywordContext>(0);
		}
		public Add_accessor_declarationContext add_accessor_declaration() {
			return GetRuleContext<Add_accessor_declarationContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Event_accessor_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_accessor_declarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterEvent_accessor_declarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitEvent_accessor_declarations(this);
		}
	}

	[RuleVersion(0)]
	public Event_accessor_declarationsContext event_accessor_declarations() {
		Event_accessor_declarationsContext _localctx = new Event_accessor_declarationsContext(_ctx, State);
		EnterRule(_localctx, 462, RULE_event_accessor_declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2579;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2578; attributes();
				}
			}

			State = 2589;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ADD:
				{
				State = 2581; add_contextual_keyword();
				State = 2582; block();
				State = 2583; remove_accessor_declaration();
				}
				break;
			case REMOVE:
				{
				State = 2585; remove_contextual_keyword();
				State = 2586; block();
				State = 2587; add_accessor_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_accessor_declarationContext : ParserRuleContext {
		public Add_contextual_keywordContext add_contextual_keyword() {
			return GetRuleContext<Add_contextual_keywordContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Add_accessor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_accessor_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAdd_accessor_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAdd_accessor_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Add_accessor_declarationContext add_accessor_declaration() {
		Add_accessor_declarationContext _localctx = new Add_accessor_declarationContext(_ctx, State);
		EnterRule(_localctx, 464, RULE_add_accessor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2592;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2591; attributes();
				}
			}

			State = 2594; add_contextual_keyword();
			State = 2595; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Remove_accessor_declarationContext : ParserRuleContext {
		public Remove_contextual_keywordContext remove_contextual_keyword() {
			return GetRuleContext<Remove_contextual_keywordContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Remove_accessor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remove_accessor_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterRemove_accessor_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitRemove_accessor_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Remove_accessor_declarationContext remove_accessor_declaration() {
		Remove_accessor_declarationContext _localctx = new Remove_accessor_declarationContext(_ctx, State);
		EnterRule(_localctx, 466, RULE_remove_accessor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2598;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2597; attributes();
				}
			}

			State = 2600; remove_contextual_keyword();
			State = 2601; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indexer_declarationContext : ParserRuleContext {
		public Indexer_declaratorContext indexer_declarator() {
			return GetRuleContext<Indexer_declaratorContext>(0);
		}
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharp4Parser.OPEN_BRACE, 0); }
		public Accessor_declarationsContext accessor_declarations() {
			return GetRuleContext<Accessor_declarationsContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharp4Parser.CLOSE_BRACE, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Indexer_modifiersContext indexer_modifiers() {
			return GetRuleContext<Indexer_modifiersContext>(0);
		}
		public Indexer_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexer_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterIndexer_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitIndexer_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Indexer_declarationContext indexer_declaration() {
		Indexer_declarationContext _localctx = new Indexer_declarationContext(_ctx, State);
		EnterRule(_localctx, 468, RULE_indexer_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2604;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2603; attributes();
				}
			}

			State = 2607;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << EXTERN) | (1L << INTERNAL) | (1L << NEW))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OVERRIDE - 70)) | (1L << (PRIVATE - 70)) | (1L << (PROTECTED - 70)) | (1L << (PUBLIC - 70)) | (1L << (SEALED - 70)) | (1L << (UNSAFE - 70)) | (1L << (VIRTUAL - 70)))) != 0)) {
				{
				State = 2606; indexer_modifiers();
				}
			}

			State = 2609; indexer_declarator();
			State = 2610; Match(OPEN_BRACE);
			State = 2611; accessor_declarations();
			State = 2612; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indexer_modifiersContext : ParserRuleContext {
		public Indexer_modifierContext[] indexer_modifier() {
			return GetRuleContexts<Indexer_modifierContext>();
		}
		public Indexer_modifierContext indexer_modifier(int i) {
			return GetRuleContext<Indexer_modifierContext>(i);
		}
		public Indexer_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexer_modifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterIndexer_modifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitIndexer_modifiers(this);
		}
	}

	[RuleVersion(0)]
	public Indexer_modifiersContext indexer_modifiers() {
		Indexer_modifiersContext _localctx = new Indexer_modifiersContext(_ctx, State);
		EnterRule(_localctx, 470, RULE_indexer_modifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2614; indexer_modifier();
			State = 2618;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << EXTERN) | (1L << INTERNAL) | (1L << NEW))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OVERRIDE - 70)) | (1L << (PRIVATE - 70)) | (1L << (PROTECTED - 70)) | (1L << (PUBLIC - 70)) | (1L << (SEALED - 70)) | (1L << (UNSAFE - 70)) | (1L << (VIRTUAL - 70)))) != 0)) {
				{
				{
				State = 2615; indexer_modifier();
				}
				}
				State = 2620;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indexer_modifierContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(CSharp4Parser.NEW, 0); }
		public ITerminalNode PUBLIC() { return GetToken(CSharp4Parser.PUBLIC, 0); }
		public ITerminalNode PROTECTED() { return GetToken(CSharp4Parser.PROTECTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(CSharp4Parser.INTERNAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(CSharp4Parser.PRIVATE, 0); }
		public ITerminalNode VIRTUAL() { return GetToken(CSharp4Parser.VIRTUAL, 0); }
		public ITerminalNode SEALED() { return GetToken(CSharp4Parser.SEALED, 0); }
		public ITerminalNode OVERRIDE() { return GetToken(CSharp4Parser.OVERRIDE, 0); }
		public ITerminalNode ABSTRACT() { return GetToken(CSharp4Parser.ABSTRACT, 0); }
		public ITerminalNode EXTERN() { return GetToken(CSharp4Parser.EXTERN, 0); }
		public Indexer_modifier_unsafeContext indexer_modifier_unsafe() {
			return GetRuleContext<Indexer_modifier_unsafeContext>(0);
		}
		public Indexer_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexer_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterIndexer_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitIndexer_modifier(this);
		}
	}

	[RuleVersion(0)]
	public Indexer_modifierContext indexer_modifier() {
		Indexer_modifierContext _localctx = new Indexer_modifierContext(_ctx, State);
		EnterRule(_localctx, 472, RULE_indexer_modifier);
		try {
			State = 2632;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NEW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2621; Match(NEW);
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2622; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2623; Match(PROTECTED);
				}
				break;
			case INTERNAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2624; Match(INTERNAL);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2625; Match(PRIVATE);
				}
				break;
			case VIRTUAL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2626; Match(VIRTUAL);
				}
				break;
			case SEALED:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2627; Match(SEALED);
				}
				break;
			case OVERRIDE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2628; Match(OVERRIDE);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2629; Match(ABSTRACT);
				}
				break;
			case EXTERN:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2630; Match(EXTERN);
				}
				break;
			case UNSAFE:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2631; indexer_modifier_unsafe();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indexer_declaratorContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode THIS() { return GetToken(CSharp4Parser.THIS, 0); }
		public ITerminalNode OPEN_BRACKET() { return GetToken(CSharp4Parser.OPEN_BRACKET, 0); }
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharp4Parser.CLOSE_BRACKET, 0); }
		public Interface_typeContext interface_type() {
			return GetRuleContext<Interface_typeContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(CSharp4Parser.DOT, 0); }
		public Indexer_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexer_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterIndexer_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitIndexer_declarator(this);
		}
	}

	[RuleVersion(0)]
	public Indexer_declaratorContext indexer_declarator() {
		Indexer_declaratorContext _localctx = new Indexer_declaratorContext(_ctx, State);
		EnterRule(_localctx, 474, RULE_indexer_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2634; type();
			State = 2638;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BY) | (1L << DESCENDING) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INTO) | (1L << JOIN) | (1L << LET))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (ON - 66)) | (1L << (ORDERBY - 66)) | (1L << (PARTIAL - 66)) | (1L << (REMOVE - 66)) | (1L << (SELECT - 66)) | (1L << (SET - 66)) | (1L << (WHERE - 66)) | (1L << (YIELD - 66)) | (1L << (IDENTIFIER - 66)))) != 0)) {
				{
				State = 2635; interface_type();
				State = 2636; Match(DOT);
				}
			}

			State = 2640; Match(THIS);
			State = 2641; Match(OPEN_BRACKET);
			State = 2642; formal_parameter_list();
			State = 2643; Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_declarationContext : ParserRuleContext {
		public Operator_modifiersContext operator_modifiers() {
			return GetRuleContext<Operator_modifiersContext>(0);
		}
		public Operator_declaratorContext operator_declarator() {
			return GetRuleContext<Operator_declaratorContext>(0);
		}
		public Operator_bodyContext operator_body() {
			return GetRuleContext<Operator_bodyContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Operator_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterOperator_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitOperator_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Operator_declarationContext operator_declaration() {
		Operator_declarationContext _localctx = new Operator_declarationContext(_ctx, State);
		EnterRule(_localctx, 476, RULE_operator_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2646;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2645; attributes();
				}
			}

			State = 2648; operator_modifiers();
			State = 2649; operator_declarator();
			State = 2650; operator_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_modifiersContext : ParserRuleContext {
		public Operator_modifierContext[] operator_modifier() {
			return GetRuleContexts<Operator_modifierContext>();
		}
		public Operator_modifierContext operator_modifier(int i) {
			return GetRuleContext<Operator_modifierContext>(i);
		}
		public Operator_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_modifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterOperator_modifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitOperator_modifiers(this);
		}
	}

	[RuleVersion(0)]
	public Operator_modifiersContext operator_modifiers() {
		Operator_modifiersContext _localctx = new Operator_modifiersContext(_ctx, State);
		EnterRule(_localctx, 478, RULE_operator_modifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2652; operator_modifier();
			State = 2656;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 39)) & ~0x3f) == 0 && ((1L << (_la - 39)) & ((1L << (EXTERN - 39)) | (1L << (PUBLIC - 39)) | (1L << (STATIC - 39)) | (1L << (UNSAFE - 39)))) != 0)) {
				{
				{
				State = 2653; operator_modifier();
				}
				}
				State = 2658;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_modifierContext : ParserRuleContext {
		public ITerminalNode PUBLIC() { return GetToken(CSharp4Parser.PUBLIC, 0); }
		public ITerminalNode STATIC() { return GetToken(CSharp4Parser.STATIC, 0); }
		public ITerminalNode EXTERN() { return GetToken(CSharp4Parser.EXTERN, 0); }
		public Operator_modifier_unsafeContext operator_modifier_unsafe() {
			return GetRuleContext<Operator_modifier_unsafeContext>(0);
		}
		public Operator_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterOperator_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitOperator_modifier(this);
		}
	}

	[RuleVersion(0)]
	public Operator_modifierContext operator_modifier() {
		Operator_modifierContext _localctx = new Operator_modifierContext(_ctx, State);
		EnterRule(_localctx, 480, RULE_operator_modifier);
		try {
			State = 2663;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case PUBLIC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2659; Match(PUBLIC);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2660; Match(STATIC);
				}
				break;
			case EXTERN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2661; Match(EXTERN);
				}
				break;
			case UNSAFE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2662; operator_modifier_unsafe();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_declaratorContext : ParserRuleContext {
		public Unary_operator_declaratorContext unary_operator_declarator() {
			return GetRuleContext<Unary_operator_declaratorContext>(0);
		}
		public Binary_operator_declaratorContext binary_operator_declarator() {
			return GetRuleContext<Binary_operator_declaratorContext>(0);
		}
		public Conversion_operator_declaratorContext conversion_operator_declarator() {
			return GetRuleContext<Conversion_operator_declaratorContext>(0);
		}
		public Operator_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterOperator_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitOperator_declarator(this);
		}
	}

	[RuleVersion(0)]
	public Operator_declaratorContext operator_declarator() {
		Operator_declaratorContext _localctx = new Operator_declaratorContext(_ctx, State);
		EnterRule(_localctx, 482, RULE_operator_declarator);
		try {
			State = 2668;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,243,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2665; unary_operator_declarator();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2666; binary_operator_declarator();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2667; conversion_operator_declarator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_operator_declaratorContext : ParserRuleContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode OPERATOR() { return GetToken(CSharp4Parser.OPERATOR, 0); }
		public Overloadable_unary_operatorContext overloadable_unary_operator() {
			return GetRuleContext<Overloadable_unary_operatorContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Unary_operator_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_operator_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterUnary_operator_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitUnary_operator_declarator(this);
		}
	}

	[RuleVersion(0)]
	public Unary_operator_declaratorContext unary_operator_declarator() {
		Unary_operator_declaratorContext _localctx = new Unary_operator_declaratorContext(_ctx, State);
		EnterRule(_localctx, 484, RULE_unary_operator_declarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2670; type();
			State = 2671; Match(OPERATOR);
			State = 2672; overloadable_unary_operator();
			State = 2673; Match(OPEN_PARENS);
			State = 2674; type();
			State = 2675; identifier();
			State = 2676; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Overloadable_unary_operatorContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(CSharp4Parser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(CSharp4Parser.MINUS, 0); }
		public ITerminalNode BANG() { return GetToken(CSharp4Parser.BANG, 0); }
		public ITerminalNode TILDE() { return GetToken(CSharp4Parser.TILDE, 0); }
		public ITerminalNode OP_INC() { return GetToken(CSharp4Parser.OP_INC, 0); }
		public ITerminalNode OP_DEC() { return GetToken(CSharp4Parser.OP_DEC, 0); }
		public ITerminalNode TRUE() { return GetToken(CSharp4Parser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(CSharp4Parser.FALSE, 0); }
		public Overloadable_unary_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overloadable_unary_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterOverloadable_unary_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitOverloadable_unary_operator(this);
		}
	}

	[RuleVersion(0)]
	public Overloadable_unary_operatorContext overloadable_unary_operator() {
		Overloadable_unary_operatorContext _localctx = new Overloadable_unary_operatorContext(_ctx, State);
		EnterRule(_localctx, 486, RULE_overloadable_unary_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2678;
			_la = _input.La(1);
			if ( !(_la==FALSE || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (TRUE - 93)) | (1L << (PLUS - 93)) | (1L << (MINUS - 93)) | (1L << (BANG - 93)) | (1L << (TILDE - 93)) | (1L << (OP_INC - 93)) | (1L << (OP_DEC - 93)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Binary_operator_declaratorContext : ParserRuleContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode OPERATOR() { return GetToken(CSharp4Parser.OPERATOR, 0); }
		public Overloadable_binary_operatorContext overloadable_binary_operator() {
			return GetRuleContext<Overloadable_binary_operatorContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(CSharp4Parser.COMMA, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Binary_operator_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary_operator_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterBinary_operator_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitBinary_operator_declarator(this);
		}
	}

	[RuleVersion(0)]
	public Binary_operator_declaratorContext binary_operator_declarator() {
		Binary_operator_declaratorContext _localctx = new Binary_operator_declaratorContext(_ctx, State);
		EnterRule(_localctx, 488, RULE_binary_operator_declarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2680; type();
			State = 2681; Match(OPERATOR);
			State = 2682; overloadable_binary_operator();
			State = 2683; Match(OPEN_PARENS);
			State = 2684; type();
			State = 2685; identifier();
			State = 2686; Match(COMMA);
			State = 2687; type();
			State = 2688; identifier();
			State = 2689; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Overloadable_binary_operatorContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(CSharp4Parser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(CSharp4Parser.MINUS, 0); }
		public ITerminalNode STAR() { return GetToken(CSharp4Parser.STAR, 0); }
		public ITerminalNode DIV() { return GetToken(CSharp4Parser.DIV, 0); }
		public ITerminalNode PERCENT() { return GetToken(CSharp4Parser.PERCENT, 0); }
		public ITerminalNode AMP() { return GetToken(CSharp4Parser.AMP, 0); }
		public ITerminalNode BITWISE_OR() { return GetToken(CSharp4Parser.BITWISE_OR, 0); }
		public ITerminalNode CARET() { return GetToken(CSharp4Parser.CARET, 0); }
		public ITerminalNode OP_LEFT_SHIFT() { return GetToken(CSharp4Parser.OP_LEFT_SHIFT, 0); }
		public Right_shiftContext right_shift() {
			return GetRuleContext<Right_shiftContext>(0);
		}
		public ITerminalNode OP_EQ() { return GetToken(CSharp4Parser.OP_EQ, 0); }
		public ITerminalNode OP_NE() { return GetToken(CSharp4Parser.OP_NE, 0); }
		public ITerminalNode GT() { return GetToken(CSharp4Parser.GT, 0); }
		public ITerminalNode LT() { return GetToken(CSharp4Parser.LT, 0); }
		public ITerminalNode OP_GE() { return GetToken(CSharp4Parser.OP_GE, 0); }
		public ITerminalNode OP_LE() { return GetToken(CSharp4Parser.OP_LE, 0); }
		public Overloadable_binary_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overloadable_binary_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterOverloadable_binary_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitOverloadable_binary_operator(this);
		}
	}

	[RuleVersion(0)]
	public Overloadable_binary_operatorContext overloadable_binary_operator() {
		Overloadable_binary_operatorContext _localctx = new Overloadable_binary_operatorContext(_ctx, State);
		EnterRule(_localctx, 490, RULE_overloadable_binary_operator);
		try {
			State = 2707;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,244,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2691; Match(PLUS);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2692; Match(MINUS);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2693; Match(STAR);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2694; Match(DIV);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2695; Match(PERCENT);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2696; Match(AMP);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2697; Match(BITWISE_OR);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2698; Match(CARET);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2699; Match(OP_LEFT_SHIFT);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2700; right_shift();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2701; Match(OP_EQ);
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2702; Match(OP_NE);
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2703; Match(GT);
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2704; Match(LT);
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 2705; Match(OP_GE);
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 2706; Match(OP_LE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Overloadable_operatorContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(CSharp4Parser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(CSharp4Parser.MINUS, 0); }
		public ITerminalNode BANG() { return GetToken(CSharp4Parser.BANG, 0); }
		public ITerminalNode TILDE() { return GetToken(CSharp4Parser.TILDE, 0); }
		public ITerminalNode OP_INC() { return GetToken(CSharp4Parser.OP_INC, 0); }
		public ITerminalNode OP_DEC() { return GetToken(CSharp4Parser.OP_DEC, 0); }
		public ITerminalNode TRUE() { return GetToken(CSharp4Parser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(CSharp4Parser.FALSE, 0); }
		public ITerminalNode STAR() { return GetToken(CSharp4Parser.STAR, 0); }
		public ITerminalNode DIV() { return GetToken(CSharp4Parser.DIV, 0); }
		public ITerminalNode PERCENT() { return GetToken(CSharp4Parser.PERCENT, 0); }
		public ITerminalNode AMP() { return GetToken(CSharp4Parser.AMP, 0); }
		public ITerminalNode BITWISE_OR() { return GetToken(CSharp4Parser.BITWISE_OR, 0); }
		public ITerminalNode CARET() { return GetToken(CSharp4Parser.CARET, 0); }
		public ITerminalNode OP_LEFT_SHIFT() { return GetToken(CSharp4Parser.OP_LEFT_SHIFT, 0); }
		public Right_shiftContext right_shift() {
			return GetRuleContext<Right_shiftContext>(0);
		}
		public ITerminalNode OP_EQ() { return GetToken(CSharp4Parser.OP_EQ, 0); }
		public ITerminalNode OP_NE() { return GetToken(CSharp4Parser.OP_NE, 0); }
		public ITerminalNode GT() { return GetToken(CSharp4Parser.GT, 0); }
		public ITerminalNode LT() { return GetToken(CSharp4Parser.LT, 0); }
		public ITerminalNode OP_GE() { return GetToken(CSharp4Parser.OP_GE, 0); }
		public ITerminalNode OP_LE() { return GetToken(CSharp4Parser.OP_LE, 0); }
		public Overloadable_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overloadable_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterOverloadable_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitOverloadable_operator(this);
		}
	}

	[RuleVersion(0)]
	public Overloadable_operatorContext overloadable_operator() {
		Overloadable_operatorContext _localctx = new Overloadable_operatorContext(_ctx, State);
		EnterRule(_localctx, 492, RULE_overloadable_operator);
		try {
			State = 2731;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,245,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2709; Match(PLUS);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2710; Match(MINUS);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2711; Match(BANG);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2712; Match(TILDE);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2713; Match(OP_INC);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2714; Match(OP_DEC);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2715; Match(TRUE);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2716; Match(FALSE);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2717; Match(STAR);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2718; Match(DIV);
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2719; Match(PERCENT);
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2720; Match(AMP);
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2721; Match(BITWISE_OR);
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2722; Match(CARET);
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 2723; Match(OP_LEFT_SHIFT);
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 2724; right_shift();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 2725; Match(OP_EQ);
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 2726; Match(OP_NE);
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 2727; Match(GT);
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 2728; Match(LT);
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 2729; Match(OP_GE);
				}
				break;

			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 2730; Match(OP_LE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conversion_operator_declaratorContext : ParserRuleContext {
		public ITerminalNode IMPLICIT() { return GetToken(CSharp4Parser.IMPLICIT, 0); }
		public ITerminalNode OPERATOR() { return GetToken(CSharp4Parser.OPERATOR, 0); }
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public ITerminalNode EXPLICIT() { return GetToken(CSharp4Parser.EXPLICIT, 0); }
		public Conversion_operator_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversion_operator_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterConversion_operator_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitConversion_operator_declarator(this);
		}
	}

	[RuleVersion(0)]
	public Conversion_operator_declaratorContext conversion_operator_declarator() {
		Conversion_operator_declaratorContext _localctx = new Conversion_operator_declaratorContext(_ctx, State);
		EnterRule(_localctx, 494, RULE_conversion_operator_declarator);
		try {
			State = 2749;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IMPLICIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2733; Match(IMPLICIT);
				State = 2734; Match(OPERATOR);
				State = 2735; type();
				State = 2736; Match(OPEN_PARENS);
				State = 2737; type();
				State = 2738; identifier();
				State = 2739; Match(CLOSE_PARENS);
				}
				break;
			case EXPLICIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2741; Match(EXPLICIT);
				State = 2742; Match(OPERATOR);
				State = 2743; type();
				State = 2744; Match(OPEN_PARENS);
				State = 2745; type();
				State = 2746; identifier();
				State = 2747; Match(CLOSE_PARENS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_bodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Operator_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterOperator_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitOperator_body(this);
		}
	}

	[RuleVersion(0)]
	public Operator_bodyContext operator_body() {
		Operator_bodyContext _localctx = new Operator_bodyContext(_ctx, State);
		EnterRule(_localctx, 496, RULE_operator_body);
		try {
			State = 2753;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2751; block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2752; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_declarationContext : ParserRuleContext {
		public Constructor_declaratorContext constructor_declarator() {
			return GetRuleContext<Constructor_declaratorContext>(0);
		}
		public Constructor_bodyContext constructor_body() {
			return GetRuleContext<Constructor_bodyContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Constructor_modifiersContext constructor_modifiers() {
			return GetRuleContext<Constructor_modifiersContext>(0);
		}
		public Constructor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterConstructor_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitConstructor_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_declarationContext constructor_declaration() {
		Constructor_declarationContext _localctx = new Constructor_declarationContext(_ctx, State);
		EnterRule(_localctx, 498, RULE_constructor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2756;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2755; attributes();
				}
			}

			State = 2759;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 39)) & ~0x3f) == 0 && ((1L << (_la - 39)) & ((1L << (EXTERN - 39)) | (1L << (INTERNAL - 39)) | (1L << (PRIVATE - 39)) | (1L << (PROTECTED - 39)) | (1L << (PUBLIC - 39)) | (1L << (UNSAFE - 39)))) != 0)) {
				{
				State = 2758; constructor_modifiers();
				}
			}

			State = 2761; constructor_declarator();
			State = 2762; constructor_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_modifiersContext : ParserRuleContext {
		public Constructor_modifierContext[] constructor_modifier() {
			return GetRuleContexts<Constructor_modifierContext>();
		}
		public Constructor_modifierContext constructor_modifier(int i) {
			return GetRuleContext<Constructor_modifierContext>(i);
		}
		public Constructor_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_modifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterConstructor_modifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitConstructor_modifiers(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_modifiersContext constructor_modifiers() {
		Constructor_modifiersContext _localctx = new Constructor_modifiersContext(_ctx, State);
		EnterRule(_localctx, 500, RULE_constructor_modifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2765;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 2764; constructor_modifier();
				}
				}
				State = 2767;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( ((((_la - 39)) & ~0x3f) == 0 && ((1L << (_la - 39)) & ((1L << (EXTERN - 39)) | (1L << (INTERNAL - 39)) | (1L << (PRIVATE - 39)) | (1L << (PROTECTED - 39)) | (1L << (PUBLIC - 39)) | (1L << (UNSAFE - 39)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_modifierContext : ParserRuleContext {
		public ITerminalNode PUBLIC() { return GetToken(CSharp4Parser.PUBLIC, 0); }
		public ITerminalNode PROTECTED() { return GetToken(CSharp4Parser.PROTECTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(CSharp4Parser.INTERNAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(CSharp4Parser.PRIVATE, 0); }
		public ITerminalNode EXTERN() { return GetToken(CSharp4Parser.EXTERN, 0); }
		public Constructor_modifier_unsafeContext constructor_modifier_unsafe() {
			return GetRuleContext<Constructor_modifier_unsafeContext>(0);
		}
		public Constructor_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterConstructor_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitConstructor_modifier(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_modifierContext constructor_modifier() {
		Constructor_modifierContext _localctx = new Constructor_modifierContext(_ctx, State);
		EnterRule(_localctx, 502, RULE_constructor_modifier);
		try {
			State = 2775;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case PUBLIC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2769; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2770; Match(PROTECTED);
				}
				break;
			case INTERNAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2771; Match(INTERNAL);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2772; Match(PRIVATE);
				}
				break;
			case EXTERN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2773; Match(EXTERN);
				}
				break;
			case UNSAFE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2774; constructor_modifier_unsafe();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_declaratorContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public Constructor_initializerContext constructor_initializer() {
			return GetRuleContext<Constructor_initializerContext>(0);
		}
		public Constructor_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterConstructor_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitConstructor_declarator(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_declaratorContext constructor_declarator() {
		Constructor_declaratorContext _localctx = new Constructor_declaratorContext(_ctx, State);
		EnterRule(_localctx, 504, RULE_constructor_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2777; identifier();
			State = 2778; Match(OPEN_PARENS);
			State = 2780;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OUT - 65)) | (1L << (PARAMS - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (USHORT - 65)) | (1L << (VOID - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0)) {
				{
				State = 2779; formal_parameter_list();
				}
			}

			State = 2782; Match(CLOSE_PARENS);
			State = 2784;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COLON) {
				{
				State = 2783; constructor_initializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_initializerContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(CSharp4Parser.COLON, 0); }
		public ITerminalNode BASE() { return GetToken(CSharp4Parser.BASE, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public ITerminalNode THIS() { return GetToken(CSharp4Parser.THIS, 0); }
		public Constructor_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterConstructor_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitConstructor_initializer(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_initializerContext constructor_initializer() {
		Constructor_initializerContext _localctx = new Constructor_initializerContext(_ctx, State);
		EnterRule(_localctx, 506, RULE_constructor_initializer);
		int _la;
		try {
			State = 2800;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,256,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2786; Match(COLON);
				State = 2787; Match(BASE);
				State = 2788; Match(OPEN_PARENS);
				State = 2790;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NEW))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ORDERBY - 64)) | (1L << (OUT - 64)) | (1L << (PARTIAL - 64)) | (1L << (REF - 64)) | (1L << (REMOVE - 64)) | (1L << (SBYTE - 64)) | (1L << (SELECT - 64)) | (1L << (SET - 64)) | (1L << (SHORT - 64)) | (1L << (SIZEOF - 64)) | (1L << (STRING - 64)) | (1L << (THIS - 64)) | (1L << (TRUE - 64)) | (1L << (TYPEOF - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNCHECKED - 64)) | (1L << (USHORT - 64)) | (1L << (WHERE - 64)) | (1L << (YIELD - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (INTEGER_LITERAL - 64)) | (1L << (REAL_LITERAL - 64)) | (1L << (CHARACTER_LITERAL - 64)) | (1L << (STRING_LITERAL - 64)) | (1L << (OPEN_PARENS - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (STAR - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (AMP - 129)) | (1L << (BANG - 129)) | (1L << (TILDE - 129)) | (1L << (OP_INC - 129)) | (1L << (OP_DEC - 129)))) != 0)) {
					{
					State = 2789; argument_list();
					}
				}

				State = 2792; Match(CLOSE_PARENS);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2793; Match(COLON);
				State = 2794; Match(THIS);
				State = 2795; Match(OPEN_PARENS);
				State = 2797;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NEW))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ORDERBY - 64)) | (1L << (OUT - 64)) | (1L << (PARTIAL - 64)) | (1L << (REF - 64)) | (1L << (REMOVE - 64)) | (1L << (SBYTE - 64)) | (1L << (SELECT - 64)) | (1L << (SET - 64)) | (1L << (SHORT - 64)) | (1L << (SIZEOF - 64)) | (1L << (STRING - 64)) | (1L << (THIS - 64)) | (1L << (TRUE - 64)) | (1L << (TYPEOF - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNCHECKED - 64)) | (1L << (USHORT - 64)) | (1L << (WHERE - 64)) | (1L << (YIELD - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (INTEGER_LITERAL - 64)) | (1L << (REAL_LITERAL - 64)) | (1L << (CHARACTER_LITERAL - 64)) | (1L << (STRING_LITERAL - 64)) | (1L << (OPEN_PARENS - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (STAR - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (AMP - 129)) | (1L << (BANG - 129)) | (1L << (TILDE - 129)) | (1L << (OP_INC - 129)) | (1L << (OP_DEC - 129)))) != 0)) {
					{
					State = 2796; argument_list();
					}
				}

				State = 2799; Match(CLOSE_PARENS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_bodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Constructor_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterConstructor_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitConstructor_body(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_bodyContext constructor_body() {
		Constructor_bodyContext _localctx = new Constructor_bodyContext(_ctx, State);
		EnterRule(_localctx, 508, RULE_constructor_body);
		try {
			State = 2804;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2802; block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2803; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Static_constructor_declarationContext : ParserRuleContext {
		public Static_constructor_modifiersContext static_constructor_modifiers() {
			return GetRuleContext<Static_constructor_modifiersContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Static_constructor_bodyContext static_constructor_body() {
			return GetRuleContext<Static_constructor_bodyContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Static_constructor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_static_constructor_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterStatic_constructor_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitStatic_constructor_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Static_constructor_declarationContext static_constructor_declaration() {
		Static_constructor_declarationContext _localctx = new Static_constructor_declarationContext(_ctx, State);
		EnterRule(_localctx, 510, RULE_static_constructor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2807;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2806; attributes();
				}
			}

			State = 2809; static_constructor_modifiers();
			State = 2810; identifier();
			State = 2811; Match(OPEN_PARENS);
			State = 2812; Match(CLOSE_PARENS);
			State = 2813; static_constructor_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Static_constructor_modifiersContext : ParserRuleContext {
		public Static_constructor_modifiers_unsafeContext static_constructor_modifiers_unsafe() {
			return GetRuleContext<Static_constructor_modifiers_unsafeContext>(0);
		}
		public Static_constructor_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_static_constructor_modifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterStatic_constructor_modifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitStatic_constructor_modifiers(this);
		}
	}

	[RuleVersion(0)]
	public Static_constructor_modifiersContext static_constructor_modifiers() {
		Static_constructor_modifiersContext _localctx = new Static_constructor_modifiersContext(_ctx, State);
		EnterRule(_localctx, 512, RULE_static_constructor_modifiers);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2815; static_constructor_modifiers_unsafe();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Static_constructor_bodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Static_constructor_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_static_constructor_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterStatic_constructor_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitStatic_constructor_body(this);
		}
	}

	[RuleVersion(0)]
	public Static_constructor_bodyContext static_constructor_body() {
		Static_constructor_bodyContext _localctx = new Static_constructor_bodyContext(_ctx, State);
		EnterRule(_localctx, 514, RULE_static_constructor_body);
		try {
			State = 2819;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2817; block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2818; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Destructor_declarationContext : ParserRuleContext {
		public Destructor_declaration_unsafeContext destructor_declaration_unsafe() {
			return GetRuleContext<Destructor_declaration_unsafeContext>(0);
		}
		public Destructor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destructor_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterDestructor_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitDestructor_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Destructor_declarationContext destructor_declaration() {
		Destructor_declarationContext _localctx = new Destructor_declarationContext(_ctx, State);
		EnterRule(_localctx, 516, RULE_destructor_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2821; destructor_declaration_unsafe();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Destructor_bodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Destructor_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destructor_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterDestructor_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitDestructor_body(this);
		}
	}

	[RuleVersion(0)]
	public Destructor_bodyContext destructor_body() {
		Destructor_bodyContext _localctx = new Destructor_bodyContext(_ctx, State);
		EnterRule(_localctx, 518, RULE_destructor_body);
		try {
			State = 2825;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2823; block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2824; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(_ctx, State);
		EnterRule(_localctx, 520, RULE_body);
		try {
			State = 2829;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2827; block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2828; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_declarationContext : ParserRuleContext {
		public ITerminalNode STRUCT() { return GetToken(CSharp4Parser.STRUCT, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Struct_bodyContext struct_body() {
			return GetRuleContext<Struct_bodyContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Struct_modifiersContext struct_modifiers() {
			return GetRuleContext<Struct_modifiersContext>(0);
		}
		public Partial_contextual_keywordContext partial_contextual_keyword() {
			return GetRuleContext<Partial_contextual_keywordContext>(0);
		}
		public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		public Struct_interfacesContext struct_interfaces() {
			return GetRuleContext<Struct_interfacesContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Struct_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterStruct_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitStruct_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Struct_declarationContext struct_declaration() {
		Struct_declarationContext _localctx = new Struct_declarationContext(_ctx, State);
		EnterRule(_localctx, 522, RULE_struct_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2832;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2831; attributes();
				}
			}

			State = 2835;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (INTERNAL - 55)) | (1L << (NEW - 55)) | (1L << (PRIVATE - 55)) | (1L << (PROTECTED - 55)) | (1L << (PUBLIC - 55)) | (1L << (UNSAFE - 55)))) != 0)) {
				{
				State = 2834; struct_modifiers();
				}
			}

			State = 2838;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==PARTIAL) {
				{
				State = 2837; partial_contextual_keyword();
				}
			}

			State = 2840; Match(STRUCT);
			State = 2841; identifier();
			State = 2843;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 2842; type_parameter_list();
				}
			}

			State = 2846;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COLON) {
				{
				State = 2845; struct_interfaces();
				}
			}

			State = 2849;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WHERE) {
				{
				State = 2848; type_parameter_constraints_clauses();
				}
			}

			State = 2851; struct_body();
			State = 2853;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==SEMICOLON) {
				{
				State = 2852; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_modifiersContext : ParserRuleContext {
		public Struct_modifierContext[] struct_modifier() {
			return GetRuleContexts<Struct_modifierContext>();
		}
		public Struct_modifierContext struct_modifier(int i) {
			return GetRuleContext<Struct_modifierContext>(i);
		}
		public Struct_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_modifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterStruct_modifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitStruct_modifiers(this);
		}
	}

	[RuleVersion(0)]
	public Struct_modifiersContext struct_modifiers() {
		Struct_modifiersContext _localctx = new Struct_modifiersContext(_ctx, State);
		EnterRule(_localctx, 524, RULE_struct_modifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2855; struct_modifier();
			State = 2859;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (INTERNAL - 55)) | (1L << (NEW - 55)) | (1L << (PRIVATE - 55)) | (1L << (PROTECTED - 55)) | (1L << (PUBLIC - 55)) | (1L << (UNSAFE - 55)))) != 0)) {
				{
				{
				State = 2856; struct_modifier();
				}
				}
				State = 2861;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_modifierContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(CSharp4Parser.NEW, 0); }
		public ITerminalNode PUBLIC() { return GetToken(CSharp4Parser.PUBLIC, 0); }
		public ITerminalNode PROTECTED() { return GetToken(CSharp4Parser.PROTECTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(CSharp4Parser.INTERNAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(CSharp4Parser.PRIVATE, 0); }
		public Struct_modifier_unsafeContext struct_modifier_unsafe() {
			return GetRuleContext<Struct_modifier_unsafeContext>(0);
		}
		public Struct_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterStruct_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitStruct_modifier(this);
		}
	}

	[RuleVersion(0)]
	public Struct_modifierContext struct_modifier() {
		Struct_modifierContext _localctx = new Struct_modifierContext(_ctx, State);
		EnterRule(_localctx, 526, RULE_struct_modifier);
		try {
			State = 2868;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NEW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2862; Match(NEW);
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2863; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2864; Match(PROTECTED);
				}
				break;
			case INTERNAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2865; Match(INTERNAL);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2866; Match(PRIVATE);
				}
				break;
			case UNSAFE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2867; struct_modifier_unsafe();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_interfacesContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(CSharp4Parser.COLON, 0); }
		public Interface_type_listContext interface_type_list() {
			return GetRuleContext<Interface_type_listContext>(0);
		}
		public Struct_interfacesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_interfaces; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterStruct_interfaces(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitStruct_interfaces(this);
		}
	}

	[RuleVersion(0)]
	public Struct_interfacesContext struct_interfaces() {
		Struct_interfacesContext _localctx = new Struct_interfacesContext(_ctx, State);
		EnterRule(_localctx, 528, RULE_struct_interfaces);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2870; Match(COLON);
			State = 2871; interface_type_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_bodyContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharp4Parser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharp4Parser.CLOSE_BRACE, 0); }
		public Struct_member_declarationsContext struct_member_declarations() {
			return GetRuleContext<Struct_member_declarationsContext>(0);
		}
		public Struct_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterStruct_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitStruct_body(this);
		}
	}

	[RuleVersion(0)]
	public Struct_bodyContext struct_body() {
		Struct_bodyContext _localctx = new Struct_bodyContext(_ctx, State);
		EnterRule(_localctx, 530, RULE_struct_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2873; Match(OPEN_BRACE);
			State = 2875;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << CONST) | (1L << DECIMAL) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << ENUM) | (1L << EQUALS) | (1L << EVENT) | (1L << EXPLICIT) | (1L << EXTERN) | (1L << FIXED) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << IMPLICIT) | (1L << INT) | (1L << INTERFACE) | (1L << INTERNAL) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NEW))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OVERRIDE - 65)) | (1L << (PARTIAL - 65)) | (1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (READONLY - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SEALED - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STATIC - 65)) | (1L << (STRING - 65)) | (1L << (STRUCT - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNSAFE - 65)) | (1L << (USHORT - 65)) | (1L << (VIRTUAL - 65)) | (1L << (VOID - 65)) | (1L << (VOLATILE - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0)) {
				{
				State = 2874; struct_member_declarations();
				}
			}

			State = 2877; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_member_declarationsContext : ParserRuleContext {
		public Struct_member_declarationContext[] struct_member_declaration() {
			return GetRuleContexts<Struct_member_declarationContext>();
		}
		public Struct_member_declarationContext struct_member_declaration(int i) {
			return GetRuleContext<Struct_member_declarationContext>(i);
		}
		public Struct_member_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_member_declarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterStruct_member_declarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitStruct_member_declarations(this);
		}
	}

	[RuleVersion(0)]
	public Struct_member_declarationsContext struct_member_declarations() {
		Struct_member_declarationsContext _localctx = new Struct_member_declarationsContext(_ctx, State);
		EnterRule(_localctx, 532, RULE_struct_member_declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2879; struct_member_declaration();
			State = 2883;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << CONST) | (1L << DECIMAL) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << ENUM) | (1L << EQUALS) | (1L << EVENT) | (1L << EXPLICIT) | (1L << EXTERN) | (1L << FIXED) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << IMPLICIT) | (1L << INT) | (1L << INTERFACE) | (1L << INTERNAL) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NEW))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OVERRIDE - 65)) | (1L << (PARTIAL - 65)) | (1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (READONLY - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SEALED - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STATIC - 65)) | (1L << (STRING - 65)) | (1L << (STRUCT - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNSAFE - 65)) | (1L << (USHORT - 65)) | (1L << (VIRTUAL - 65)) | (1L << (VOID - 65)) | (1L << (VOLATILE - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0)) {
				{
				{
				State = 2880; struct_member_declaration();
				}
				}
				State = 2885;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_member_declarationContext : ParserRuleContext {
		public Common_member_declarationContext common_member_declaration() {
			return GetRuleContext<Common_member_declarationContext>(0);
		}
		public ITerminalNode FIXED() { return GetToken(CSharp4Parser.FIXED, 0); }
		public Buffer_element_typeContext buffer_element_type() {
			return GetRuleContext<Buffer_element_typeContext>(0);
		}
		public Fixed_size_buffer_declaratorsContext fixed_size_buffer_declarators() {
			return GetRuleContext<Fixed_size_buffer_declaratorsContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public All_member_modifiersContext all_member_modifiers() {
			return GetRuleContext<All_member_modifiersContext>(0);
		}
		public Struct_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_member_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterStruct_member_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitStruct_member_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Struct_member_declarationContext struct_member_declaration() {
		Struct_member_declarationContext _localctx = new Struct_member_declarationContext(_ctx, State);
		EnterRule(_localctx, 534, RULE_struct_member_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2887;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2886; attributes();
				}
			}

			State = 2890;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,274,_ctx) ) {
			case 1:
				{
				State = 2889; all_member_modifiers();
				}
				break;
			}
			State = 2898;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CLASS:
			case CONST:
			case DECIMAL:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case ENUM:
			case EQUALS:
			case EVENT:
			case EXPLICIT:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case IMPLICIT:
			case INT:
			case INTERFACE:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case STRING:
			case STRUCT:
			case UINT:
			case ULONG:
			case USHORT:
			case VOID:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				{
				State = 2892; common_member_declaration();
				}
				break;
			case FIXED:
				{
				State = 2893; Match(FIXED);
				State = 2894; buffer_element_type();
				State = 2895; fixed_size_buffer_declarators();
				State = 2896; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_typeContext : ParserRuleContext {
		public Base_typeContext base_type() {
			return GetRuleContext<Base_typeContext>(0);
		}
		public Rank_specifierContext[] rank_specifier() {
			return GetRuleContexts<Rank_specifierContext>();
		}
		public Rank_specifierContext rank_specifier(int i) {
			return GetRuleContext<Rank_specifierContext>(i);
		}
		public ITerminalNode[] STAR() { return GetTokens(CSharp4Parser.STAR); }
		public ITerminalNode STAR(int i) {
			return GetToken(CSharp4Parser.STAR, i);
		}
		public ITerminalNode[] INTERR() { return GetTokens(CSharp4Parser.INTERR); }
		public ITerminalNode INTERR(int i) {
			return GetToken(CSharp4Parser.INTERR, i);
		}
		public Array_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterArray_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitArray_type(this);
		}
	}

	[RuleVersion(0)]
	public Array_typeContext array_type() {
		Array_typeContext _localctx = new Array_typeContext(_ctx, State);
		EnterRule(_localctx, 536, RULE_array_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2900; base_type();
			State = 2908;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 2904;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==STAR || _la==INTERR) {
					{
					{
					State = 2901;
					_la = _input.La(1);
					if ( !(_la==STAR || _la==INTERR) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					}
					State = 2906;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2907; rank_specifier();
				}
				}
				State = 2910;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( ((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & ((1L << (OPEN_BRACKET - 116)) | (1L << (STAR - 116)) | (1L << (INTERR - 116)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Non_array_typeContext : ParserRuleContext {
		public Base_typeContext base_type() {
			return GetRuleContext<Base_typeContext>(0);
		}
		public Rank_specifierContext[] rank_specifier() {
			return GetRuleContexts<Rank_specifierContext>();
		}
		public Rank_specifierContext rank_specifier(int i) {
			return GetRuleContext<Rank_specifierContext>(i);
		}
		public ITerminalNode[] INTERR() { return GetTokens(CSharp4Parser.INTERR); }
		public ITerminalNode INTERR(int i) {
			return GetToken(CSharp4Parser.INTERR, i);
		}
		public ITerminalNode[] STAR() { return GetTokens(CSharp4Parser.STAR); }
		public ITerminalNode STAR(int i) {
			return GetToken(CSharp4Parser.STAR, i);
		}
		public Non_array_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_non_array_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterNon_array_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitNon_array_type(this);
		}
	}

	[RuleVersion(0)]
	public Non_array_typeContext non_array_type() {
		Non_array_typeContext _localctx = new Non_array_typeContext(_ctx, State);
		EnterRule(_localctx, 538, RULE_non_array_type);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2912; base_type();
			State = 2918;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,279,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 2916;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case OPEN_BRACKET:
						{
						State = 2913; rank_specifier();
						}
						break;
					case INTERR:
						{
						State = 2914; Match(INTERR);
						}
						break;
					case STAR:
						{
						State = 2915; Match(STAR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 2920;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,279,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rank_specifiersContext : ParserRuleContext {
		public Rank_specifierContext[] rank_specifier() {
			return GetRuleContexts<Rank_specifierContext>();
		}
		public Rank_specifierContext rank_specifier(int i) {
			return GetRuleContext<Rank_specifierContext>(i);
		}
		public Rank_specifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rank_specifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterRank_specifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitRank_specifiers(this);
		}
	}

	[RuleVersion(0)]
	public Rank_specifiersContext rank_specifiers() {
		Rank_specifiersContext _localctx = new Rank_specifiersContext(_ctx, State);
		EnterRule(_localctx, 540, RULE_rank_specifiers);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2922;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2921; rank_specifier();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2924;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,280,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rank_specifierContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACKET() { return GetToken(CSharp4Parser.OPEN_BRACKET, 0); }
		public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharp4Parser.CLOSE_BRACKET, 0); }
		public Dim_separatorsContext dim_separators() {
			return GetRuleContext<Dim_separatorsContext>(0);
		}
		public Rank_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rank_specifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterRank_specifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitRank_specifier(this);
		}
	}

	[RuleVersion(0)]
	public Rank_specifierContext rank_specifier() {
		Rank_specifierContext _localctx = new Rank_specifierContext(_ctx, State);
		EnterRule(_localctx, 542, RULE_rank_specifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2926; Match(OPEN_BRACKET);
			State = 2928;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 2927; dim_separators();
				}
			}

			State = 2930; Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dim_separatorsContext : ParserRuleContext {
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Dim_separatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dim_separators; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterDim_separators(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitDim_separators(this);
		}
	}

	[RuleVersion(0)]
	public Dim_separatorsContext dim_separators() {
		Dim_separatorsContext _localctx = new Dim_separatorsContext(_ctx, State);
		EnterRule(_localctx, 544, RULE_dim_separators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2932; Match(COMMA);
			State = 2936;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2933; Match(COMMA);
				}
				}
				State = 2938;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_initializerContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharp4Parser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharp4Parser.CLOSE_BRACE, 0); }
		public Variable_initializer_listContext variable_initializer_list() {
			return GetRuleContext<Variable_initializer_listContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(CSharp4Parser.COMMA, 0); }
		public Array_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterArray_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitArray_initializer(this);
		}
	}

	[RuleVersion(0)]
	public Array_initializerContext array_initializer() {
		Array_initializerContext _localctx = new Array_initializerContext(_ctx, State);
		EnterRule(_localctx, 546, RULE_array_initializer);
		int _la;
		try {
			State = 2948;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,284,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2939; Match(OPEN_BRACE);
				State = 2940; Match(CLOSE_BRACE);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2941; Match(OPEN_BRACE);
				State = 2942; variable_initializer_list();
				State = 2944;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 2943; Match(COMMA);
					}
				}

				State = 2946; Match(CLOSE_BRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_initializer_listContext : ParserRuleContext {
		public Variable_initializerContext[] variable_initializer() {
			return GetRuleContexts<Variable_initializerContext>();
		}
		public Variable_initializerContext variable_initializer(int i) {
			return GetRuleContext<Variable_initializerContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Variable_initializer_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_initializer_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterVariable_initializer_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitVariable_initializer_list(this);
		}
	}

	[RuleVersion(0)]
	public Variable_initializer_listContext variable_initializer_list() {
		Variable_initializer_listContext _localctx = new Variable_initializer_listContext(_ctx, State);
		EnterRule(_localctx, 548, RULE_variable_initializer_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2950; variable_initializer();
			State = 2955;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,285,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2951; Match(COMMA);
					State = 2952; variable_initializer();
					}
					} 
				}
				State = 2957;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,285,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_declarationContext : ParserRuleContext {
		public ITerminalNode INTERFACE() { return GetToken(CSharp4Parser.INTERFACE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Interface_bodyContext interface_body() {
			return GetRuleContext<Interface_bodyContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Interface_modifiersContext interface_modifiers() {
			return GetRuleContext<Interface_modifiersContext>(0);
		}
		public Partial_contextual_keywordContext partial_contextual_keyword() {
			return GetRuleContext<Partial_contextual_keywordContext>(0);
		}
		public Variant_type_parameter_listContext variant_type_parameter_list() {
			return GetRuleContext<Variant_type_parameter_listContext>(0);
		}
		public Interface_baseContext interface_base() {
			return GetRuleContext<Interface_baseContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Interface_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterInterface_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitInterface_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Interface_declarationContext interface_declaration() {
		Interface_declarationContext _localctx = new Interface_declarationContext(_ctx, State);
		EnterRule(_localctx, 550, RULE_interface_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2959;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2958; attributes();
				}
			}

			State = 2962;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (INTERNAL - 55)) | (1L << (NEW - 55)) | (1L << (PRIVATE - 55)) | (1L << (PROTECTED - 55)) | (1L << (PUBLIC - 55)) | (1L << (UNSAFE - 55)))) != 0)) {
				{
				State = 2961; interface_modifiers();
				}
			}

			State = 2965;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==PARTIAL) {
				{
				State = 2964; partial_contextual_keyword();
				}
			}

			State = 2967; Match(INTERFACE);
			State = 2968; identifier();
			State = 2970;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 2969; variant_type_parameter_list();
				}
			}

			State = 2973;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COLON) {
				{
				State = 2972; interface_base();
				}
			}

			State = 2976;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WHERE) {
				{
				State = 2975; type_parameter_constraints_clauses();
				}
			}

			State = 2978; interface_body();
			State = 2980;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==SEMICOLON) {
				{
				State = 2979; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_modifiersContext : ParserRuleContext {
		public Interface_modifierContext[] interface_modifier() {
			return GetRuleContexts<Interface_modifierContext>();
		}
		public Interface_modifierContext interface_modifier(int i) {
			return GetRuleContext<Interface_modifierContext>(i);
		}
		public Interface_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_modifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterInterface_modifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitInterface_modifiers(this);
		}
	}

	[RuleVersion(0)]
	public Interface_modifiersContext interface_modifiers() {
		Interface_modifiersContext _localctx = new Interface_modifiersContext(_ctx, State);
		EnterRule(_localctx, 552, RULE_interface_modifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2982; interface_modifier();
			State = 2986;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (INTERNAL - 55)) | (1L << (NEW - 55)) | (1L << (PRIVATE - 55)) | (1L << (PROTECTED - 55)) | (1L << (PUBLIC - 55)) | (1L << (UNSAFE - 55)))) != 0)) {
				{
				{
				State = 2983; interface_modifier();
				}
				}
				State = 2988;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_modifierContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(CSharp4Parser.NEW, 0); }
		public ITerminalNode PUBLIC() { return GetToken(CSharp4Parser.PUBLIC, 0); }
		public ITerminalNode PROTECTED() { return GetToken(CSharp4Parser.PROTECTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(CSharp4Parser.INTERNAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(CSharp4Parser.PRIVATE, 0); }
		public Interface_modifier_unsafeContext interface_modifier_unsafe() {
			return GetRuleContext<Interface_modifier_unsafeContext>(0);
		}
		public Interface_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterInterface_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitInterface_modifier(this);
		}
	}

	[RuleVersion(0)]
	public Interface_modifierContext interface_modifier() {
		Interface_modifierContext _localctx = new Interface_modifierContext(_ctx, State);
		EnterRule(_localctx, 554, RULE_interface_modifier);
		try {
			State = 2995;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NEW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2989; Match(NEW);
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2990; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2991; Match(PROTECTED);
				}
				break;
			case INTERNAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2992; Match(INTERNAL);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2993; Match(PRIVATE);
				}
				break;
			case UNSAFE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2994; interface_modifier_unsafe();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variant_type_parameter_listContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(CSharp4Parser.LT, 0); }
		public Variant_type_parametersContext variant_type_parameters() {
			return GetRuleContext<Variant_type_parametersContext>(0);
		}
		public ITerminalNode GT() { return GetToken(CSharp4Parser.GT, 0); }
		public Variant_type_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variant_type_parameter_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterVariant_type_parameter_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitVariant_type_parameter_list(this);
		}
	}

	[RuleVersion(0)]
	public Variant_type_parameter_listContext variant_type_parameter_list() {
		Variant_type_parameter_listContext _localctx = new Variant_type_parameter_listContext(_ctx, State);
		EnterRule(_localctx, 556, RULE_variant_type_parameter_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2997; Match(LT);
			State = 2998; variant_type_parameters();
			State = 2999; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variant_type_parametersContext : ParserRuleContext {
		public Type_parameterContext[] type_parameter() {
			return GetRuleContexts<Type_parameterContext>();
		}
		public Type_parameterContext type_parameter(int i) {
			return GetRuleContext<Type_parameterContext>(i);
		}
		public AttributesContext[] attributes() {
			return GetRuleContexts<AttributesContext>();
		}
		public AttributesContext attributes(int i) {
			return GetRuleContext<AttributesContext>(i);
		}
		public Variance_annotationContext[] variance_annotation() {
			return GetRuleContexts<Variance_annotationContext>();
		}
		public Variance_annotationContext variance_annotation(int i) {
			return GetRuleContext<Variance_annotationContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Variant_type_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variant_type_parameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterVariant_type_parameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitVariant_type_parameters(this);
		}
	}

	[RuleVersion(0)]
	public Variant_type_parametersContext variant_type_parameters() {
		Variant_type_parametersContext _localctx = new Variant_type_parametersContext(_ctx, State);
		EnterRule(_localctx, 558, RULE_variant_type_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3002;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 3001; attributes();
				}
			}

			State = 3005;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IN || _la==OUT) {
				{
				State = 3004; variance_annotation();
				}
			}

			State = 3007; type_parameter();
			State = 3018;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 3008; Match(COMMA);
				State = 3010;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==OPEN_BRACKET) {
					{
					State = 3009; attributes();
					}
				}

				State = 3013;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==IN || _la==OUT) {
					{
					State = 3012; variance_annotation();
					}
				}

				State = 3015; type_parameter();
				}
				}
				State = 3020;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variance_annotationContext : ParserRuleContext {
		public ITerminalNode IN() { return GetToken(CSharp4Parser.IN, 0); }
		public ITerminalNode OUT() { return GetToken(CSharp4Parser.OUT, 0); }
		public Variance_annotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variance_annotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterVariance_annotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitVariance_annotation(this);
		}
	}

	[RuleVersion(0)]
	public Variance_annotationContext variance_annotation() {
		Variance_annotationContext _localctx = new Variance_annotationContext(_ctx, State);
		EnterRule(_localctx, 560, RULE_variance_annotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3021;
			_la = _input.La(1);
			if ( !(_la==IN || _la==OUT) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_baseContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(CSharp4Parser.COLON, 0); }
		public Interface_type_listContext interface_type_list() {
			return GetRuleContext<Interface_type_listContext>(0);
		}
		public Interface_baseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_base; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterInterface_base(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitInterface_base(this);
		}
	}

	[RuleVersion(0)]
	public Interface_baseContext interface_base() {
		Interface_baseContext _localctx = new Interface_baseContext(_ctx, State);
		EnterRule(_localctx, 562, RULE_interface_base);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3023; Match(COLON);
			State = 3024; interface_type_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_bodyContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharp4Parser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharp4Parser.CLOSE_BRACE, 0); }
		public Interface_member_declarationsContext interface_member_declarations() {
			return GetRuleContext<Interface_member_declarationsContext>(0);
		}
		public Interface_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterInterface_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitInterface_body(this);
		}
	}

	[RuleVersion(0)]
	public Interface_bodyContext interface_body() {
		Interface_bodyContext _localctx = new Interface_bodyContext(_ctx, State);
		EnterRule(_localctx, 564, RULE_interface_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3026; Match(OPEN_BRACE);
			State = 3028;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << EVENT) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NEW))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STRING - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (USHORT - 65)) | (1L << (VOID - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0)) {
				{
				State = 3027; interface_member_declarations();
				}
			}

			State = 3030; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_member_declarationsContext : ParserRuleContext {
		public Interface_member_declarationContext[] interface_member_declaration() {
			return GetRuleContexts<Interface_member_declarationContext>();
		}
		public Interface_member_declarationContext interface_member_declaration(int i) {
			return GetRuleContext<Interface_member_declarationContext>(i);
		}
		public Interface_member_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_member_declarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterInterface_member_declarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitInterface_member_declarations(this);
		}
	}

	[RuleVersion(0)]
	public Interface_member_declarationsContext interface_member_declarations() {
		Interface_member_declarationsContext _localctx = new Interface_member_declarationsContext(_ctx, State);
		EnterRule(_localctx, 566, RULE_interface_member_declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3033;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 3032; interface_member_declaration();
				}
				}
				State = 3035;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << EVENT) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NEW))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STRING - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (USHORT - 65)) | (1L << (VOID - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_member_declarationContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(CSharp4Parser.VOID, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public ITerminalNode EVENT() { return GetToken(CSharp4Parser.EVENT, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(CSharp4Parser.NEW, 0); }
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharp4Parser.OPEN_BRACE, 0); }
		public Interface_accessorsContext interface_accessors() {
			return GetRuleContext<Interface_accessorsContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharp4Parser.CLOSE_BRACE, 0); }
		public ITerminalNode THIS() { return GetToken(CSharp4Parser.THIS, 0); }
		public ITerminalNode OPEN_BRACKET() { return GetToken(CSharp4Parser.OPEN_BRACKET, 0); }
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharp4Parser.CLOSE_BRACKET, 0); }
		public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public Interface_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_member_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterInterface_member_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitInterface_member_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Interface_member_declarationContext interface_member_declaration() {
		Interface_member_declarationContext _localctx = new Interface_member_declarationContext(_ctx, State);
		EnterRule(_localctx, 568, RULE_interface_member_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3038;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 3037; attributes();
				}
			}

			State = 3041;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==NEW) {
				{
				State = 3040; Match(NEW);
				}
			}

			State = 3093;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,311,_ctx) ) {
			case 1:
				{
				State = 3043; type();
				State = 3071;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,307,_ctx) ) {
				case 1:
					{
					State = 3044; identifier();
					State = 3046;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==LT) {
						{
						State = 3045; type_parameter_list();
						}
					}

					State = 3048; Match(OPEN_PARENS);
					State = 3050;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OUT - 65)) | (1L << (PARAMS - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (USHORT - 65)) | (1L << (VOID - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0)) {
						{
						State = 3049; formal_parameter_list();
						}
					}

					State = 3052; Match(CLOSE_PARENS);
					State = 3054;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WHERE) {
						{
						State = 3053; type_parameter_constraints_clauses();
						}
					}

					State = 3056; Match(SEMICOLON);
					}
					break;

				case 2:
					{
					State = 3058; identifier();
					State = 3059; Match(OPEN_BRACE);
					State = 3060; interface_accessors();
					State = 3061; Match(CLOSE_BRACE);
					}
					break;

				case 3:
					{
					State = 3063; Match(THIS);
					State = 3064; Match(OPEN_BRACKET);
					State = 3065; formal_parameter_list();
					State = 3066; Match(CLOSE_BRACKET);
					State = 3067; Match(OPEN_BRACE);
					State = 3068; interface_accessors();
					State = 3069; Match(CLOSE_BRACE);
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 3073; Match(VOID);
				State = 3074; identifier();
				State = 3076;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 3075; type_parameter_list();
					}
				}

				State = 3078; Match(OPEN_PARENS);
				State = 3080;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OUT - 65)) | (1L << (PARAMS - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (USHORT - 65)) | (1L << (VOID - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0)) {
					{
					State = 3079; formal_parameter_list();
					}
				}

				State = 3082; Match(CLOSE_PARENS);
				State = 3084;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WHERE) {
					{
					State = 3083; type_parameter_constraints_clauses();
					}
				}

				State = 3086; Match(SEMICOLON);
				}
				break;

			case 3:
				{
				State = 3088; Match(EVENT);
				State = 3089; type();
				State = 3090; identifier();
				State = 3091; Match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_method_declarationContext : ParserRuleContext {
		public Return_typeContext return_type() {
			return GetRuleContext<Return_typeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(CSharp4Parser.NEW, 0); }
		public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public Interface_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterInterface_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitInterface_method_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Interface_method_declarationContext interface_method_declaration() {
		Interface_method_declarationContext _localctx = new Interface_method_declarationContext(_ctx, State);
		EnterRule(_localctx, 570, RULE_interface_method_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3096;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 3095; attributes();
				}
			}

			State = 3099;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==NEW) {
				{
				State = 3098; Match(NEW);
				}
			}

			State = 3101; return_type();
			State = 3102; identifier();
			State = 3104;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 3103; type_parameter_list();
				}
			}

			State = 3106; Match(OPEN_PARENS);
			State = 3108;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OUT - 65)) | (1L << (PARAMS - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (USHORT - 65)) | (1L << (VOID - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0)) {
				{
				State = 3107; formal_parameter_list();
				}
			}

			State = 3110; Match(CLOSE_PARENS);
			State = 3112;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WHERE) {
				{
				State = 3111; type_parameter_constraints_clauses();
				}
			}

			State = 3114; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_property_declarationContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharp4Parser.OPEN_BRACE, 0); }
		public Interface_accessorsContext interface_accessors() {
			return GetRuleContext<Interface_accessorsContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharp4Parser.CLOSE_BRACE, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(CSharp4Parser.NEW, 0); }
		public Interface_property_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_property_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterInterface_property_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitInterface_property_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Interface_property_declarationContext interface_property_declaration() {
		Interface_property_declarationContext _localctx = new Interface_property_declarationContext(_ctx, State);
		EnterRule(_localctx, 572, RULE_interface_property_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3117;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 3116; attributes();
				}
			}

			State = 3120;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==NEW) {
				{
				State = 3119; Match(NEW);
				}
			}

			State = 3122; type();
			State = 3123; identifier();
			State = 3124; Match(OPEN_BRACE);
			State = 3125; interface_accessors();
			State = 3126; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_accessorsContext : ParserRuleContext {
		public Get_contextual_keywordContext get_contextual_keyword() {
			return GetRuleContext<Get_contextual_keywordContext>(0);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(CSharp4Parser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(CSharp4Parser.SEMICOLON, i);
		}
		public Set_contextual_keywordContext set_contextual_keyword() {
			return GetRuleContext<Set_contextual_keywordContext>(0);
		}
		public AttributesContext[] attributes() {
			return GetRuleContexts<AttributesContext>();
		}
		public AttributesContext attributes(int i) {
			return GetRuleContext<AttributesContext>(i);
		}
		public Interface_accessorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_accessors; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterInterface_accessors(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitInterface_accessors(this);
		}
	}

	[RuleVersion(0)]
	public Interface_accessorsContext interface_accessors() {
		Interface_accessorsContext _localctx = new Interface_accessorsContext(_ctx, State);
		EnterRule(_localctx, 574, RULE_interface_accessors);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3129;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 3128; attributes();
				}
			}

			State = 3151;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case GET:
				{
				State = 3131; get_contextual_keyword();
				State = 3132; Match(SEMICOLON);
				State = 3139;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==SET || _la==OPEN_BRACKET) {
					{
					State = 3134;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==OPEN_BRACKET) {
						{
						State = 3133; attributes();
						}
					}

					State = 3136; set_contextual_keyword();
					State = 3137; Match(SEMICOLON);
					}
				}

				}
				break;
			case SET:
				{
				State = 3141; set_contextual_keyword();
				State = 3142; Match(SEMICOLON);
				State = 3149;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==GET || _la==OPEN_BRACKET) {
					{
					State = 3144;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==OPEN_BRACKET) {
						{
						State = 3143; attributes();
						}
					}

					State = 3146; get_contextual_keyword();
					State = 3147; Match(SEMICOLON);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_event_declarationContext : ParserRuleContext {
		public ITerminalNode EVENT() { return GetToken(CSharp4Parser.EVENT, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(CSharp4Parser.NEW, 0); }
		public Interface_event_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_event_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterInterface_event_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitInterface_event_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Interface_event_declarationContext interface_event_declaration() {
		Interface_event_declarationContext _localctx = new Interface_event_declarationContext(_ctx, State);
		EnterRule(_localctx, 576, RULE_interface_event_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3154;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 3153; attributes();
				}
			}

			State = 3157;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==NEW) {
				{
				State = 3156; Match(NEW);
				}
			}

			State = 3159; Match(EVENT);
			State = 3160; type();
			State = 3161; identifier();
			State = 3162; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_indexer_declarationContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode THIS() { return GetToken(CSharp4Parser.THIS, 0); }
		public ITerminalNode OPEN_BRACKET() { return GetToken(CSharp4Parser.OPEN_BRACKET, 0); }
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharp4Parser.CLOSE_BRACKET, 0); }
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharp4Parser.OPEN_BRACE, 0); }
		public Interface_accessorsContext interface_accessors() {
			return GetRuleContext<Interface_accessorsContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharp4Parser.CLOSE_BRACE, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(CSharp4Parser.NEW, 0); }
		public Interface_indexer_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_indexer_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterInterface_indexer_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitInterface_indexer_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Interface_indexer_declarationContext interface_indexer_declaration() {
		Interface_indexer_declarationContext _localctx = new Interface_indexer_declarationContext(_ctx, State);
		EnterRule(_localctx, 578, RULE_interface_indexer_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3165;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 3164; attributes();
				}
			}

			State = 3168;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==NEW) {
				{
				State = 3167; Match(NEW);
				}
			}

			State = 3170; type();
			State = 3171; Match(THIS);
			State = 3172; Match(OPEN_BRACKET);
			State = 3173; formal_parameter_list();
			State = 3174; Match(CLOSE_BRACKET);
			State = 3175; Match(OPEN_BRACE);
			State = 3176; interface_accessors();
			State = 3177; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_declarationContext : ParserRuleContext {
		public ITerminalNode ENUM() { return GetToken(CSharp4Parser.ENUM, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Enum_bodyContext enum_body() {
			return GetRuleContext<Enum_bodyContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Enum_modifiersContext enum_modifiers() {
			return GetRuleContext<Enum_modifiersContext>(0);
		}
		public Enum_baseContext enum_base() {
			return GetRuleContext<Enum_baseContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Enum_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterEnum_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitEnum_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Enum_declarationContext enum_declaration() {
		Enum_declarationContext _localctx = new Enum_declarationContext(_ctx, State);
		EnterRule(_localctx, 580, RULE_enum_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3180;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 3179; attributes();
				}
			}

			State = 3183;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (INTERNAL - 55)) | (1L << (NEW - 55)) | (1L << (PRIVATE - 55)) | (1L << (PROTECTED - 55)) | (1L << (PUBLIC - 55)))) != 0)) {
				{
				State = 3182; enum_modifiers();
				}
			}

			State = 3185; Match(ENUM);
			State = 3186; identifier();
			State = 3188;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COLON) {
				{
				State = 3187; enum_base();
				}
			}

			State = 3190; enum_body();
			State = 3192;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==SEMICOLON) {
				{
				State = 3191; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_baseContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(CSharp4Parser.COLON, 0); }
		public Integral_typeContext integral_type() {
			return GetRuleContext<Integral_typeContext>(0);
		}
		public Enum_baseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_base; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterEnum_base(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitEnum_base(this);
		}
	}

	[RuleVersion(0)]
	public Enum_baseContext enum_base() {
		Enum_baseContext _localctx = new Enum_baseContext(_ctx, State);
		EnterRule(_localctx, 582, RULE_enum_base);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3194; Match(COLON);
			State = 3195; integral_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_bodyContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharp4Parser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharp4Parser.CLOSE_BRACE, 0); }
		public Enum_member_declarationsContext enum_member_declarations() {
			return GetRuleContext<Enum_member_declarationsContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(CSharp4Parser.COMMA, 0); }
		public Enum_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterEnum_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitEnum_body(this);
		}
	}

	[RuleVersion(0)]
	public Enum_bodyContext enum_body() {
		Enum_bodyContext _localctx = new Enum_bodyContext(_ctx, State);
		EnterRule(_localctx, 584, RULE_enum_body);
		int _la;
		try {
			State = 3206;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,334,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3197; Match(OPEN_BRACE);
				State = 3198; Match(CLOSE_BRACE);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3199; Match(OPEN_BRACE);
				State = 3200; enum_member_declarations();
				State = 3202;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 3201; Match(COMMA);
					}
				}

				State = 3204; Match(CLOSE_BRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_modifiersContext : ParserRuleContext {
		public Enum_modifierContext[] enum_modifier() {
			return GetRuleContexts<Enum_modifierContext>();
		}
		public Enum_modifierContext enum_modifier(int i) {
			return GetRuleContext<Enum_modifierContext>(i);
		}
		public Enum_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_modifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterEnum_modifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitEnum_modifiers(this);
		}
	}

	[RuleVersion(0)]
	public Enum_modifiersContext enum_modifiers() {
		Enum_modifiersContext _localctx = new Enum_modifiersContext(_ctx, State);
		EnterRule(_localctx, 586, RULE_enum_modifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3209;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 3208; enum_modifier();
				}
				}
				State = 3211;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( ((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (INTERNAL - 55)) | (1L << (NEW - 55)) | (1L << (PRIVATE - 55)) | (1L << (PROTECTED - 55)) | (1L << (PUBLIC - 55)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_modifierContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(CSharp4Parser.NEW, 0); }
		public ITerminalNode PUBLIC() { return GetToken(CSharp4Parser.PUBLIC, 0); }
		public ITerminalNode PROTECTED() { return GetToken(CSharp4Parser.PROTECTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(CSharp4Parser.INTERNAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(CSharp4Parser.PRIVATE, 0); }
		public Enum_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterEnum_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitEnum_modifier(this);
		}
	}

	[RuleVersion(0)]
	public Enum_modifierContext enum_modifier() {
		Enum_modifierContext _localctx = new Enum_modifierContext(_ctx, State);
		EnterRule(_localctx, 588, RULE_enum_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3213;
			_la = _input.La(1);
			if ( !(((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (INTERNAL - 55)) | (1L << (NEW - 55)) | (1L << (PRIVATE - 55)) | (1L << (PROTECTED - 55)) | (1L << (PUBLIC - 55)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_member_declarationsContext : ParserRuleContext {
		public Enum_member_declarationContext[] enum_member_declaration() {
			return GetRuleContexts<Enum_member_declarationContext>();
		}
		public Enum_member_declarationContext enum_member_declaration(int i) {
			return GetRuleContext<Enum_member_declarationContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Enum_member_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_member_declarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterEnum_member_declarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitEnum_member_declarations(this);
		}
	}

	[RuleVersion(0)]
	public Enum_member_declarationsContext enum_member_declarations() {
		Enum_member_declarationsContext _localctx = new Enum_member_declarationsContext(_ctx, State);
		EnterRule(_localctx, 590, RULE_enum_member_declarations);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3215; enum_member_declaration();
			State = 3220;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,336,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 3216; Match(COMMA);
					State = 3217; enum_member_declaration();
					}
					} 
				}
				State = 3222;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,336,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_member_declarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(CSharp4Parser.ASSIGNMENT, 0); }
		public Constant_expressionContext constant_expression() {
			return GetRuleContext<Constant_expressionContext>(0);
		}
		public Enum_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_member_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterEnum_member_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitEnum_member_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Enum_member_declarationContext enum_member_declaration() {
		Enum_member_declarationContext _localctx = new Enum_member_declarationContext(_ctx, State);
		EnterRule(_localctx, 592, RULE_enum_member_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3224;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 3223; attributes();
				}
			}

			State = 3226; identifier();
			State = 3229;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ASSIGNMENT) {
				{
				State = 3227; Match(ASSIGNMENT);
				State = 3228; constant_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delegate_declarationContext : ParserRuleContext {
		public ITerminalNode DELEGATE() { return GetToken(CSharp4Parser.DELEGATE, 0); }
		public Return_typeContext return_type() {
			return GetRuleContext<Return_typeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Delegate_modifiersContext delegate_modifiers() {
			return GetRuleContext<Delegate_modifiersContext>(0);
		}
		public Variant_type_parameter_listContext variant_type_parameter_list() {
			return GetRuleContext<Variant_type_parameter_listContext>(0);
		}
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public Delegate_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegate_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterDelegate_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitDelegate_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Delegate_declarationContext delegate_declaration() {
		Delegate_declarationContext _localctx = new Delegate_declarationContext(_ctx, State);
		EnterRule(_localctx, 594, RULE_delegate_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3232;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 3231; attributes();
				}
			}

			State = 3235;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (INTERNAL - 55)) | (1L << (NEW - 55)) | (1L << (PRIVATE - 55)) | (1L << (PROTECTED - 55)) | (1L << (PUBLIC - 55)) | (1L << (UNSAFE - 55)))) != 0)) {
				{
				State = 3234; delegate_modifiers();
				}
			}

			State = 3237; Match(DELEGATE);
			State = 3238; return_type();
			State = 3239; identifier();
			State = 3241;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 3240; variant_type_parameter_list();
				}
			}

			State = 3243; Match(OPEN_PARENS);
			State = 3245;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OUT - 65)) | (1L << (PARAMS - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (USHORT - 65)) | (1L << (VOID - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0)) {
				{
				State = 3244; formal_parameter_list();
				}
			}

			State = 3247; Match(CLOSE_PARENS);
			State = 3249;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WHERE) {
				{
				State = 3248; type_parameter_constraints_clauses();
				}
			}

			State = 3251; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delegate_modifiersContext : ParserRuleContext {
		public Delegate_modifierContext[] delegate_modifier() {
			return GetRuleContexts<Delegate_modifierContext>();
		}
		public Delegate_modifierContext delegate_modifier(int i) {
			return GetRuleContext<Delegate_modifierContext>(i);
		}
		public Delegate_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegate_modifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterDelegate_modifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitDelegate_modifiers(this);
		}
	}

	[RuleVersion(0)]
	public Delegate_modifiersContext delegate_modifiers() {
		Delegate_modifiersContext _localctx = new Delegate_modifiersContext(_ctx, State);
		EnterRule(_localctx, 596, RULE_delegate_modifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3253; delegate_modifier();
			State = 3257;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (INTERNAL - 55)) | (1L << (NEW - 55)) | (1L << (PRIVATE - 55)) | (1L << (PROTECTED - 55)) | (1L << (PUBLIC - 55)) | (1L << (UNSAFE - 55)))) != 0)) {
				{
				{
				State = 3254; delegate_modifier();
				}
				}
				State = 3259;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delegate_modifierContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(CSharp4Parser.NEW, 0); }
		public ITerminalNode PUBLIC() { return GetToken(CSharp4Parser.PUBLIC, 0); }
		public ITerminalNode PROTECTED() { return GetToken(CSharp4Parser.PROTECTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(CSharp4Parser.INTERNAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(CSharp4Parser.PRIVATE, 0); }
		public Delegate_modifier_unsafeContext delegate_modifier_unsafe() {
			return GetRuleContext<Delegate_modifier_unsafeContext>(0);
		}
		public Delegate_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegate_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterDelegate_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitDelegate_modifier(this);
		}
	}

	[RuleVersion(0)]
	public Delegate_modifierContext delegate_modifier() {
		Delegate_modifierContext _localctx = new Delegate_modifierContext(_ctx, State);
		EnterRule(_localctx, 598, RULE_delegate_modifier);
		try {
			State = 3266;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NEW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3260; Match(NEW);
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3261; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3262; Match(PROTECTED);
				}
				break;
			case INTERNAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3263; Match(INTERNAL);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3264; Match(PRIVATE);
				}
				break;
			case UNSAFE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3265; delegate_modifier_unsafe();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_attributesContext : ParserRuleContext {
		public Global_attribute_sectionsContext global_attribute_sections() {
			return GetRuleContext<Global_attribute_sectionsContext>(0);
		}
		public Global_attributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_attributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterGlobal_attributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitGlobal_attributes(this);
		}
	}

	[RuleVersion(0)]
	public Global_attributesContext global_attributes() {
		Global_attributesContext _localctx = new Global_attributesContext(_ctx, State);
		EnterRule(_localctx, 600, RULE_global_attributes);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3268; global_attribute_sections();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_attribute_sectionsContext : ParserRuleContext {
		public Global_attribute_sectionContext[] global_attribute_section() {
			return GetRuleContexts<Global_attribute_sectionContext>();
		}
		public Global_attribute_sectionContext global_attribute_section(int i) {
			return GetRuleContext<Global_attribute_sectionContext>(i);
		}
		public Global_attribute_sectionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_attribute_sections; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterGlobal_attribute_sections(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitGlobal_attribute_sections(this);
		}
	}

	[RuleVersion(0)]
	public Global_attribute_sectionsContext global_attribute_sections() {
		Global_attribute_sectionsContext _localctx = new Global_attribute_sectionsContext(_ctx, State);
		EnterRule(_localctx, 602, RULE_global_attribute_sections);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3271;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 3270; global_attribute_section();
				}
				}
				State = 3273;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==OPEN_BRACKET );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_attribute_sectionContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACKET() { return GetToken(CSharp4Parser.OPEN_BRACKET, 0); }
		public Global_attribute_target_specifierContext global_attribute_target_specifier() {
			return GetRuleContext<Global_attribute_target_specifierContext>(0);
		}
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharp4Parser.CLOSE_BRACKET, 0); }
		public ITerminalNode COMMA() { return GetToken(CSharp4Parser.COMMA, 0); }
		public Global_attribute_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_attribute_section; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterGlobal_attribute_section(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitGlobal_attribute_section(this);
		}
	}

	[RuleVersion(0)]
	public Global_attribute_sectionContext global_attribute_section() {
		Global_attribute_sectionContext _localctx = new Global_attribute_sectionContext(_ctx, State);
		EnterRule(_localctx, 604, RULE_global_attribute_section);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3275; Match(OPEN_BRACKET);
			State = 3276; global_attribute_target_specifier();
			State = 3277; attribute_list();
			State = 3279;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 3278; Match(COMMA);
				}
			}

			State = 3281; Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_attribute_target_specifierContext : ParserRuleContext {
		public Global_attribute_targetContext global_attribute_target() {
			return GetRuleContext<Global_attribute_targetContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(CSharp4Parser.COLON, 0); }
		public Global_attribute_target_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_attribute_target_specifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterGlobal_attribute_target_specifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitGlobal_attribute_target_specifier(this);
		}
	}

	[RuleVersion(0)]
	public Global_attribute_target_specifierContext global_attribute_target_specifier() {
		Global_attribute_target_specifierContext _localctx = new Global_attribute_target_specifierContext(_ctx, State);
		EnterRule(_localctx, 606, RULE_global_attribute_target_specifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3283; global_attribute_target();
			State = 3284; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_attribute_targetContext : ParserRuleContext {
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Global_attribute_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_attribute_target; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterGlobal_attribute_target(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitGlobal_attribute_target(this);
		}
	}

	[RuleVersion(0)]
	public Global_attribute_targetContext global_attribute_target() {
		Global_attribute_targetContext _localctx = new Global_attribute_targetContext(_ctx, State);
		EnterRule(_localctx, 608, RULE_global_attribute_target);
		try {
			State = 3288;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ABSTRACT:
			case AS:
			case BASE:
			case BOOL:
			case BREAK:
			case BYTE:
			case CASE:
			case CATCH:
			case CHAR:
			case CHECKED:
			case CLASS:
			case CONST:
			case CONTINUE:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DO:
			case DOUBLE:
			case ELSE:
			case ENUM:
			case EVENT:
			case EXPLICIT:
			case EXTERN:
			case FALSE:
			case FINALLY:
			case FIXED:
			case FLOAT:
			case FOR:
			case FOREACH:
			case GOTO:
			case IF:
			case IMPLICIT:
			case IN:
			case INT:
			case INTERFACE:
			case INTERNAL:
			case IS:
			case LOCK:
			case LONG:
			case NAMESPACE:
			case NEW:
			case NULL:
			case OBJECT:
			case OPERATOR:
			case OUT:
			case OVERRIDE:
			case PARAMS:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case READONLY:
			case REF:
			case RETURN:
			case SBYTE:
			case SEALED:
			case SHORT:
			case SIZEOF:
			case STACKALLOC:
			case STATIC:
			case STRING:
			case STRUCT:
			case SWITCH:
			case THIS:
			case THROW:
			case TRUE:
			case TRY:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNSAFE:
			case USHORT:
			case USING:
			case VIRTUAL:
			case VOID:
			case VOLATILE:
			case WHILE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3286; keyword();
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BY:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3287; identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributesContext : ParserRuleContext {
		public Attribute_sectionsContext attribute_sections() {
			return GetRuleContext<Attribute_sectionsContext>(0);
		}
		public AttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAttributes(this);
		}
	}

	[RuleVersion(0)]
	public AttributesContext attributes() {
		AttributesContext _localctx = new AttributesContext(_ctx, State);
		EnterRule(_localctx, 610, RULE_attributes);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3290; attribute_sections();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_sectionsContext : ParserRuleContext {
		public Attribute_sectionContext[] attribute_section() {
			return GetRuleContexts<Attribute_sectionContext>();
		}
		public Attribute_sectionContext attribute_section(int i) {
			return GetRuleContext<Attribute_sectionContext>(i);
		}
		public Attribute_sectionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_sections; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAttribute_sections(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAttribute_sections(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_sectionsContext attribute_sections() {
		Attribute_sectionsContext _localctx = new Attribute_sectionsContext(_ctx, State);
		EnterRule(_localctx, 612, RULE_attribute_sections);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3293;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 3292; attribute_section();
				}
				}
				State = 3295;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==OPEN_BRACKET );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_sectionContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACKET() { return GetToken(CSharp4Parser.OPEN_BRACKET, 0); }
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharp4Parser.CLOSE_BRACKET, 0); }
		public Attribute_target_specifierContext attribute_target_specifier() {
			return GetRuleContext<Attribute_target_specifierContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(CSharp4Parser.COMMA, 0); }
		public Attribute_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_section; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAttribute_section(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAttribute_section(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_sectionContext attribute_section() {
		Attribute_sectionContext _localctx = new Attribute_sectionContext(_ctx, State);
		EnterRule(_localctx, 614, RULE_attribute_section);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3297; Match(OPEN_BRACKET);
			State = 3299;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,350,_ctx) ) {
			case 1:
				{
				State = 3298; attribute_target_specifier();
				}
				break;
			}
			State = 3301; attribute_list();
			State = 3303;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 3302; Match(COMMA);
				}
			}

			State = 3305; Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_target_specifierContext : ParserRuleContext {
		public Attribute_targetContext attribute_target() {
			return GetRuleContext<Attribute_targetContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(CSharp4Parser.COLON, 0); }
		public Attribute_target_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_target_specifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAttribute_target_specifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAttribute_target_specifier(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_target_specifierContext attribute_target_specifier() {
		Attribute_target_specifierContext _localctx = new Attribute_target_specifierContext(_ctx, State);
		EnterRule(_localctx, 616, RULE_attribute_target_specifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3307; attribute_target();
			State = 3308; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_targetContext : ParserRuleContext {
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Attribute_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_target; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAttribute_target(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAttribute_target(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_targetContext attribute_target() {
		Attribute_targetContext _localctx = new Attribute_targetContext(_ctx, State);
		EnterRule(_localctx, 618, RULE_attribute_target);
		try {
			State = 3312;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ABSTRACT:
			case AS:
			case BASE:
			case BOOL:
			case BREAK:
			case BYTE:
			case CASE:
			case CATCH:
			case CHAR:
			case CHECKED:
			case CLASS:
			case CONST:
			case CONTINUE:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DO:
			case DOUBLE:
			case ELSE:
			case ENUM:
			case EVENT:
			case EXPLICIT:
			case EXTERN:
			case FALSE:
			case FINALLY:
			case FIXED:
			case FLOAT:
			case FOR:
			case FOREACH:
			case GOTO:
			case IF:
			case IMPLICIT:
			case IN:
			case INT:
			case INTERFACE:
			case INTERNAL:
			case IS:
			case LOCK:
			case LONG:
			case NAMESPACE:
			case NEW:
			case NULL:
			case OBJECT:
			case OPERATOR:
			case OUT:
			case OVERRIDE:
			case PARAMS:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case READONLY:
			case REF:
			case RETURN:
			case SBYTE:
			case SEALED:
			case SHORT:
			case SIZEOF:
			case STACKALLOC:
			case STATIC:
			case STRING:
			case STRUCT:
			case SWITCH:
			case THIS:
			case THROW:
			case TRUE:
			case TRY:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNSAFE:
			case USHORT:
			case USING:
			case VIRTUAL:
			case VOID:
			case VOLATILE:
			case WHILE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3310; keyword();
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BY:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3311; identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_listContext : ParserRuleContext {
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Attribute_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAttribute_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAttribute_list(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_listContext attribute_list() {
		Attribute_listContext _localctx = new Attribute_listContext(_ctx, State);
		EnterRule(_localctx, 620, RULE_attribute_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3314; attribute();
			State = 3319;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,353,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 3315; Match(COMMA);
					State = 3316; attribute();
					}
					} 
				}
				State = 3321;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,353,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public Attribute_nameContext attribute_name() {
			return GetRuleContext<Attribute_nameContext>(0);
		}
		public Attribute_argumentsContext attribute_arguments() {
			return GetRuleContext<Attribute_argumentsContext>(0);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(_ctx, State);
		EnterRule(_localctx, 622, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3322; attribute_name();
			State = 3324;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OPEN_PARENS) {
				{
				State = 3323; attribute_arguments();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_nameContext : ParserRuleContext {
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Attribute_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAttribute_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAttribute_name(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_nameContext attribute_name() {
		Attribute_nameContext _localctx = new Attribute_nameContext(_ctx, State);
		EnterRule(_localctx, 624, RULE_attribute_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3326; type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_argumentsContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Positional_argument_listContext positional_argument_list() {
			return GetRuleContext<Positional_argument_listContext>(0);
		}
		public Attribute_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAttribute_arguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAttribute_arguments(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_argumentsContext attribute_arguments() {
		Attribute_argumentsContext _localctx = new Attribute_argumentsContext(_ctx, State);
		EnterRule(_localctx, 626, RULE_attribute_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3328; Match(OPEN_PARENS);
			State = 3330;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (ADD - 10)) | (1L << (ALIAS - 10)) | (1L << (ARGLIST - 10)) | (1L << (ASCENDING - 10)) | (1L << (BASE - 10)) | (1L << (BOOL - 10)) | (1L << (BY - 10)) | (1L << (BYTE - 10)) | (1L << (CHAR - 10)) | (1L << (CHECKED - 10)) | (1L << (DECIMAL - 10)) | (1L << (DEFAULT - 10)) | (1L << (DELEGATE - 10)) | (1L << (DESCENDING - 10)) | (1L << (DOUBLE - 10)) | (1L << (DYNAMIC - 10)) | (1L << (EQUALS - 10)) | (1L << (FALSE - 10)) | (1L << (FLOAT - 10)) | (1L << (FROM - 10)) | (1L << (GET - 10)) | (1L << (GROUP - 10)) | (1L << (INT - 10)) | (1L << (INTO - 10)) | (1L << (JOIN - 10)) | (1L << (LET - 10)) | (1L << (LONG - 10)) | (1L << (NEW - 10)) | (1L << (NULL - 10)) | (1L << (OBJECT - 10)) | (1L << (ON - 10)) | (1L << (ORDERBY - 10)) | (1L << (PARTIAL - 10)))) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (REMOVE - 78)) | (1L << (SBYTE - 78)) | (1L << (SELECT - 78)) | (1L << (SET - 78)) | (1L << (SHORT - 78)) | (1L << (SIZEOF - 78)) | (1L << (STRING - 78)) | (1L << (THIS - 78)) | (1L << (TRUE - 78)) | (1L << (TYPEOF - 78)) | (1L << (UINT - 78)) | (1L << (ULONG - 78)) | (1L << (UNCHECKED - 78)) | (1L << (USHORT - 78)) | (1L << (WHERE - 78)) | (1L << (YIELD - 78)) | (1L << (IDENTIFIER - 78)) | (1L << (INTEGER_LITERAL - 78)) | (1L << (REAL_LITERAL - 78)) | (1L << (CHARACTER_LITERAL - 78)) | (1L << (STRING_LITERAL - 78)) | (1L << (OPEN_PARENS - 78)) | (1L << (PLUS - 78)) | (1L << (MINUS - 78)) | (1L << (STAR - 78)) | (1L << (AMP - 78)) | (1L << (BANG - 78)) | (1L << (TILDE - 78)) | (1L << (OP_INC - 78)) | (1L << (OP_DEC - 78)))) != 0)) {
				{
				State = 3329; positional_argument_list();
				}
			}

			State = 3332; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Positional_argument_listContext : ParserRuleContext {
		public Positional_argumentContext arg;
		public Positional_argumentContext arg2;
		public Positional_argumentContext[] positional_argument() {
			return GetRuleContexts<Positional_argumentContext>();
		}
		public Positional_argumentContext positional_argument(int i) {
			return GetRuleContext<Positional_argumentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Positional_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_positional_argument_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterPositional_argument_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitPositional_argument_list(this);
		}
	}

	[RuleVersion(0)]
	public Positional_argument_listContext positional_argument_list() {
		Positional_argument_listContext _localctx = new Positional_argument_listContext(_ctx, State);
		EnterRule(_localctx, 628, RULE_positional_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3334; _localctx.arg = positional_argument();
			State = 3339;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 3335; Match(COMMA);
				State = 3336; _localctx.arg2 = positional_argument();
				}
				}
				State = 3341;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Positional_argumentContext : ParserRuleContext {
		public Attribute_argument_expressionContext attribute_argument_expression() {
			return GetRuleContext<Attribute_argument_expressionContext>(0);
		}
		public Positional_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_positional_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterPositional_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitPositional_argument(this);
		}
	}

	[RuleVersion(0)]
	public Positional_argumentContext positional_argument() {
		Positional_argumentContext _localctx = new Positional_argumentContext(_ctx, State);
		EnterRule(_localctx, 630, RULE_positional_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3342; attribute_argument_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_argument_listContext : ParserRuleContext {
		public Named_argumentContext[] named_argument() {
			return GetRuleContexts<Named_argumentContext>();
		}
		public Named_argumentContext named_argument(int i) {
			return GetRuleContext<Named_argumentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Named_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_argument_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterNamed_argument_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitNamed_argument_list(this);
		}
	}

	[RuleVersion(0)]
	public Named_argument_listContext named_argument_list() {
		Named_argument_listContext _localctx = new Named_argument_listContext(_ctx, State);
		EnterRule(_localctx, 632, RULE_named_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3344; named_argument();
			State = 3349;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 3345; Match(COMMA);
				State = 3346; named_argument();
				}
				}
				State = 3351;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_argumentContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(CSharp4Parser.ASSIGNMENT, 0); }
		public Attribute_argument_expressionContext attribute_argument_expression() {
			return GetRuleContext<Attribute_argument_expressionContext>(0);
		}
		public Named_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterNamed_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitNamed_argument(this);
		}
	}

	[RuleVersion(0)]
	public Named_argumentContext named_argument() {
		Named_argumentContext _localctx = new Named_argumentContext(_ctx, State);
		EnterRule(_localctx, 634, RULE_named_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3352; identifier();
			State = 3353; Match(ASSIGNMENT);
			State = 3354; attribute_argument_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_argument_expressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Attribute_argument_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_argument_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAttribute_argument_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAttribute_argument_expression(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_argument_expressionContext attribute_argument_expression() {
		Attribute_argument_expressionContext _localctx = new Attribute_argument_expressionContext(_ctx, State);
		EnterRule(_localctx, 636, RULE_attribute_argument_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3356; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_modifier_unsafeContext : ParserRuleContext {
		public ITerminalNode UNSAFE() { return GetToken(CSharp4Parser.UNSAFE, 0); }
		public Class_modifier_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_modifier_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterClass_modifier_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitClass_modifier_unsafe(this);
		}
	}

	[RuleVersion(0)]
	public Class_modifier_unsafeContext class_modifier_unsafe() {
		Class_modifier_unsafeContext _localctx = new Class_modifier_unsafeContext(_ctx, State);
		EnterRule(_localctx, 638, RULE_class_modifier_unsafe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3358; Match(UNSAFE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_modifier_unsafeContext : ParserRuleContext {
		public ITerminalNode UNSAFE() { return GetToken(CSharp4Parser.UNSAFE, 0); }
		public Struct_modifier_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_modifier_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterStruct_modifier_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitStruct_modifier_unsafe(this);
		}
	}

	[RuleVersion(0)]
	public Struct_modifier_unsafeContext struct_modifier_unsafe() {
		Struct_modifier_unsafeContext _localctx = new Struct_modifier_unsafeContext(_ctx, State);
		EnterRule(_localctx, 640, RULE_struct_modifier_unsafe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3360; Match(UNSAFE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_modifier_unsafeContext : ParserRuleContext {
		public ITerminalNode UNSAFE() { return GetToken(CSharp4Parser.UNSAFE, 0); }
		public Interface_modifier_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_modifier_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterInterface_modifier_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitInterface_modifier_unsafe(this);
		}
	}

	[RuleVersion(0)]
	public Interface_modifier_unsafeContext interface_modifier_unsafe() {
		Interface_modifier_unsafeContext _localctx = new Interface_modifier_unsafeContext(_ctx, State);
		EnterRule(_localctx, 642, RULE_interface_modifier_unsafe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3362; Match(UNSAFE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delegate_modifier_unsafeContext : ParserRuleContext {
		public ITerminalNode UNSAFE() { return GetToken(CSharp4Parser.UNSAFE, 0); }
		public Delegate_modifier_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegate_modifier_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterDelegate_modifier_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitDelegate_modifier_unsafe(this);
		}
	}

	[RuleVersion(0)]
	public Delegate_modifier_unsafeContext delegate_modifier_unsafe() {
		Delegate_modifier_unsafeContext _localctx = new Delegate_modifier_unsafeContext(_ctx, State);
		EnterRule(_localctx, 644, RULE_delegate_modifier_unsafe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3364; Match(UNSAFE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_modifier_unsafeContext : ParserRuleContext {
		public ITerminalNode UNSAFE() { return GetToken(CSharp4Parser.UNSAFE, 0); }
		public Field_modifier_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_modifier_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterField_modifier_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitField_modifier_unsafe(this);
		}
	}

	[RuleVersion(0)]
	public Field_modifier_unsafeContext field_modifier_unsafe() {
		Field_modifier_unsafeContext _localctx = new Field_modifier_unsafeContext(_ctx, State);
		EnterRule(_localctx, 646, RULE_field_modifier_unsafe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3366; Match(UNSAFE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_modifier_unsafeContext : ParserRuleContext {
		public ITerminalNode UNSAFE() { return GetToken(CSharp4Parser.UNSAFE, 0); }
		public Method_modifier_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_modifier_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterMethod_modifier_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitMethod_modifier_unsafe(this);
		}
	}

	[RuleVersion(0)]
	public Method_modifier_unsafeContext method_modifier_unsafe() {
		Method_modifier_unsafeContext _localctx = new Method_modifier_unsafeContext(_ctx, State);
		EnterRule(_localctx, 648, RULE_method_modifier_unsafe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3368; Match(UNSAFE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_modifier_unsafeContext : ParserRuleContext {
		public ITerminalNode UNSAFE() { return GetToken(CSharp4Parser.UNSAFE, 0); }
		public Property_modifier_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_modifier_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterProperty_modifier_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitProperty_modifier_unsafe(this);
		}
	}

	[RuleVersion(0)]
	public Property_modifier_unsafeContext property_modifier_unsafe() {
		Property_modifier_unsafeContext _localctx = new Property_modifier_unsafeContext(_ctx, State);
		EnterRule(_localctx, 650, RULE_property_modifier_unsafe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3370; Match(UNSAFE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_modifier_unsafeContext : ParserRuleContext {
		public ITerminalNode UNSAFE() { return GetToken(CSharp4Parser.UNSAFE, 0); }
		public Event_modifier_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_modifier_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterEvent_modifier_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitEvent_modifier_unsafe(this);
		}
	}

	[RuleVersion(0)]
	public Event_modifier_unsafeContext event_modifier_unsafe() {
		Event_modifier_unsafeContext _localctx = new Event_modifier_unsafeContext(_ctx, State);
		EnterRule(_localctx, 652, RULE_event_modifier_unsafe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3372; Match(UNSAFE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indexer_modifier_unsafeContext : ParserRuleContext {
		public ITerminalNode UNSAFE() { return GetToken(CSharp4Parser.UNSAFE, 0); }
		public Indexer_modifier_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexer_modifier_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterIndexer_modifier_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitIndexer_modifier_unsafe(this);
		}
	}

	[RuleVersion(0)]
	public Indexer_modifier_unsafeContext indexer_modifier_unsafe() {
		Indexer_modifier_unsafeContext _localctx = new Indexer_modifier_unsafeContext(_ctx, State);
		EnterRule(_localctx, 654, RULE_indexer_modifier_unsafe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3374; Match(UNSAFE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_modifier_unsafeContext : ParserRuleContext {
		public ITerminalNode UNSAFE() { return GetToken(CSharp4Parser.UNSAFE, 0); }
		public Operator_modifier_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_modifier_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterOperator_modifier_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitOperator_modifier_unsafe(this);
		}
	}

	[RuleVersion(0)]
	public Operator_modifier_unsafeContext operator_modifier_unsafe() {
		Operator_modifier_unsafeContext _localctx = new Operator_modifier_unsafeContext(_ctx, State);
		EnterRule(_localctx, 656, RULE_operator_modifier_unsafe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3376; Match(UNSAFE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_modifier_unsafeContext : ParserRuleContext {
		public ITerminalNode UNSAFE() { return GetToken(CSharp4Parser.UNSAFE, 0); }
		public Constructor_modifier_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_modifier_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterConstructor_modifier_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitConstructor_modifier_unsafe(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_modifier_unsafeContext constructor_modifier_unsafe() {
		Constructor_modifier_unsafeContext _localctx = new Constructor_modifier_unsafeContext(_ctx, State);
		EnterRule(_localctx, 658, RULE_constructor_modifier_unsafe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3378; Match(UNSAFE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Destructor_declaration_unsafeContext : ParserRuleContext {
		public ITerminalNode TILDE() { return GetToken(CSharp4Parser.TILDE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Destructor_bodyContext destructor_body() {
			return GetRuleContext<Destructor_bodyContext>(0);
		}
		public ITerminalNode UNSAFE() { return GetToken(CSharp4Parser.UNSAFE, 0); }
		public ITerminalNode EXTERN() { return GetToken(CSharp4Parser.EXTERN, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Destructor_declaration_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destructor_declaration_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterDestructor_declaration_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitDestructor_declaration_unsafe(this);
		}
	}

	[RuleVersion(0)]
	public Destructor_declaration_unsafeContext destructor_declaration_unsafe() {
		Destructor_declaration_unsafeContext _localctx = new Destructor_declaration_unsafeContext(_ctx, State);
		EnterRule(_localctx, 660, RULE_destructor_declaration_unsafe);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3381;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 3380; attributes();
				}
			}

			State = 3391;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,361,_ctx) ) {
			case 1:
				{
				State = 3384;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EXTERN) {
					{
					State = 3383; Match(EXTERN);
					}
				}

				State = 3387;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==UNSAFE) {
					{
					State = 3386; Match(UNSAFE);
					}
				}

				}
				break;

			case 2:
				{
				State = 3389; Match(UNSAFE);
				State = 3390; Match(EXTERN);
				}
				break;
			}
			State = 3393; Match(TILDE);
			State = 3394; identifier();
			State = 3395; Match(OPEN_PARENS);
			State = 3396; Match(CLOSE_PARENS);
			State = 3397; destructor_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Static_constructor_modifiers_unsafeContext : ParserRuleContext {
		public ITerminalNode STATIC() { return GetToken(CSharp4Parser.STATIC, 0); }
		public ITerminalNode EXTERN() { return GetToken(CSharp4Parser.EXTERN, 0); }
		public ITerminalNode UNSAFE() { return GetToken(CSharp4Parser.UNSAFE, 0); }
		public Static_constructor_modifiers_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_static_constructor_modifiers_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterStatic_constructor_modifiers_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitStatic_constructor_modifiers_unsafe(this);
		}
	}

	[RuleVersion(0)]
	public Static_constructor_modifiers_unsafeContext static_constructor_modifiers_unsafe() {
		Static_constructor_modifiers_unsafeContext _localctx = new Static_constructor_modifiers_unsafeContext(_ctx, State);
		EnterRule(_localctx, 662, RULE_static_constructor_modifiers_unsafe);
		int _la;
		try {
			State = 3423;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,363,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3400;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EXTERN || _la==UNSAFE) {
					{
					State = 3399;
					_la = _input.La(1);
					if ( !(_la==EXTERN || _la==UNSAFE) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
				}

				State = 3402; Match(STATIC);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3403; Match(EXTERN);
				State = 3404; Match(UNSAFE);
				State = 3405; Match(STATIC);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3406; Match(UNSAFE);
				State = 3407; Match(EXTERN);
				State = 3408; Match(STATIC);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3409; Match(EXTERN);
				State = 3410; Match(STATIC);
				State = 3411; Match(UNSAFE);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3412; Match(UNSAFE);
				State = 3413; Match(STATIC);
				State = 3414; Match(EXTERN);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3415; Match(STATIC);
				State = 3416;
				_la = _input.La(1);
				if ( !(_la==EXTERN || _la==UNSAFE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3417; Match(STATIC);
				State = 3418; Match(EXTERN);
				State = 3419; Match(UNSAFE);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3420; Match(STATIC);
				State = 3421; Match(UNSAFE);
				State = 3422; Match(EXTERN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Embedded_statement_unsafeContext : ParserRuleContext {
		public Unsafe_statementContext unsafe_statement() {
			return GetRuleContext<Unsafe_statementContext>(0);
		}
		public Fixed_statementContext fixed_statement() {
			return GetRuleContext<Fixed_statementContext>(0);
		}
		public Embedded_statement_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_embedded_statement_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterEmbedded_statement_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitEmbedded_statement_unsafe(this);
		}
	}

	[RuleVersion(0)]
	public Embedded_statement_unsafeContext embedded_statement_unsafe() {
		Embedded_statement_unsafeContext _localctx = new Embedded_statement_unsafeContext(_ctx, State);
		EnterRule(_localctx, 664, RULE_embedded_statement_unsafe);
		try {
			State = 3427;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case UNSAFE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3425; unsafe_statement();
				}
				break;
			case FIXED:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3426; fixed_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unsafe_statementContext : ParserRuleContext {
		public ITerminalNode UNSAFE() { return GetToken(CSharp4Parser.UNSAFE, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Unsafe_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsafe_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterUnsafe_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitUnsafe_statement(this);
		}
	}

	[RuleVersion(0)]
	public Unsafe_statementContext unsafe_statement() {
		Unsafe_statementContext _localctx = new Unsafe_statementContext(_ctx, State);
		EnterRule(_localctx, 666, RULE_unsafe_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3429; Match(UNSAFE);
			State = 3430; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_unsafeContext : ParserRuleContext {
		public Pointer_typeContext pointer_type() {
			return GetRuleContext<Pointer_typeContext>(0);
		}
		public Type_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterType_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitType_unsafe(this);
		}
	}

	[RuleVersion(0)]
	public Type_unsafeContext type_unsafe() {
		Type_unsafeContext _localctx = new Type_unsafeContext(_ctx, State);
		EnterRule(_localctx, 668, RULE_type_unsafe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3432; pointer_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pointer_typeContext : ParserRuleContext {
		public Simple_typeContext simple_type() {
			return GetRuleContext<Simple_typeContext>(0);
		}
		public ITerminalNode STAR() { return GetToken(CSharp4Parser.STAR, 0); }
		public Rank_specifierContext[] rank_specifier() {
			return GetRuleContexts<Rank_specifierContext>();
		}
		public Rank_specifierContext rank_specifier(int i) {
			return GetRuleContext<Rank_specifierContext>(i);
		}
		public ITerminalNode[] INTERR() { return GetTokens(CSharp4Parser.INTERR); }
		public ITerminalNode INTERR(int i) {
			return GetToken(CSharp4Parser.INTERR, i);
		}
		public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(CSharp4Parser.VOID, 0); }
		public Pointer_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointer_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterPointer_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitPointer_type(this);
		}
	}

	[RuleVersion(0)]
	public Pointer_typeContext pointer_type() {
		Pointer_typeContext _localctx = new Pointer_typeContext(_ctx, State);
		EnterRule(_localctx, 670, RULE_pointer_type);
		int _la;
		try {
			State = 3456;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case BOOL:
			case BYTE:
			case CHAR:
			case DECIMAL:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SBYTE:
			case SHORT:
			case UINT:
			case ULONG:
			case USHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3434; simple_type();
				State = 3439;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==OPEN_BRACKET || _la==INTERR) {
					{
					State = 3437;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case OPEN_BRACKET:
						{
						State = 3435; rank_specifier();
						}
						break;
					case INTERR:
						{
						State = 3436; Match(INTERR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 3441;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 3442; Match(STAR);
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BY:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case STRING:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3444; class_type();
				State = 3449;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==OPEN_BRACKET || _la==INTERR) {
					{
					State = 3447;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case OPEN_BRACKET:
						{
						State = 3445; rank_specifier();
						}
						break;
					case INTERR:
						{
						State = 3446; Match(INTERR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 3451;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 3452; Match(STAR);
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3454; Match(VOID);
				State = 3455; Match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unmanaged_typeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Unmanaged_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unmanaged_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterUnmanaged_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitUnmanaged_type(this);
		}
	}

	[RuleVersion(0)]
	public Unmanaged_typeContext unmanaged_type() {
		Unmanaged_typeContext _localctx = new Unmanaged_typeContext(_ctx, State);
		EnterRule(_localctx, 672, RULE_unmanaged_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3458; type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_no_array_creation_expression_unsafeContext : ParserRuleContext {
		public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		public Primary_no_array_creation_expression_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_no_array_creation_expression_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterPrimary_no_array_creation_expression_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitPrimary_no_array_creation_expression_unsafe(this);
		}
	}

	[RuleVersion(0)]
	public Primary_no_array_creation_expression_unsafeContext primary_no_array_creation_expression_unsafe() {
		Primary_no_array_creation_expression_unsafeContext _localctx = new Primary_no_array_creation_expression_unsafeContext(_ctx, State);
		EnterRule(_localctx, 674, RULE_primary_no_array_creation_expression_unsafe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3460; primary_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_expression_unsafeContext : ParserRuleContext {
		public Pointer_indirection_expressionContext pointer_indirection_expression() {
			return GetRuleContext<Pointer_indirection_expressionContext>(0);
		}
		public Addressof_expressionContext addressof_expression() {
			return GetRuleContext<Addressof_expressionContext>(0);
		}
		public Unary_expression_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expression_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterUnary_expression_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitUnary_expression_unsafe(this);
		}
	}

	[RuleVersion(0)]
	public Unary_expression_unsafeContext unary_expression_unsafe() {
		Unary_expression_unsafeContext _localctx = new Unary_expression_unsafeContext(_ctx, State);
		EnterRule(_localctx, 676, RULE_unary_expression_unsafe);
		try {
			State = 3464;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case STAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3462; pointer_indirection_expression();
				}
				break;
			case AMP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3463; addressof_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pointer_indirection_expressionContext : ParserRuleContext {
		public ITerminalNode STAR() { return GetToken(CSharp4Parser.STAR, 0); }
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Pointer_indirection_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointer_indirection_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterPointer_indirection_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitPointer_indirection_expression(this);
		}
	}

	[RuleVersion(0)]
	public Pointer_indirection_expressionContext pointer_indirection_expression() {
		Pointer_indirection_expressionContext _localctx = new Pointer_indirection_expressionContext(_ctx, State);
		EnterRule(_localctx, 678, RULE_pointer_indirection_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3466; Match(STAR);
			State = 3467; unary_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Addressof_expressionContext : ParserRuleContext {
		public ITerminalNode AMP() { return GetToken(CSharp4Parser.AMP, 0); }
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Addressof_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addressof_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAddressof_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAddressof_expression(this);
		}
	}

	[RuleVersion(0)]
	public Addressof_expressionContext addressof_expression() {
		Addressof_expressionContext _localctx = new Addressof_expressionContext(_ctx, State);
		EnterRule(_localctx, 680, RULE_addressof_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3469; Match(AMP);
			State = 3470; unary_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sizeof_expressionContext : ParserRuleContext {
		public ITerminalNode SIZEOF() { return GetToken(CSharp4Parser.SIZEOF, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public Unmanaged_typeContext unmanaged_type() {
			return GetRuleContext<Unmanaged_typeContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Sizeof_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sizeof_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterSizeof_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitSizeof_expression(this);
		}
	}

	[RuleVersion(0)]
	public Sizeof_expressionContext sizeof_expression() {
		Sizeof_expressionContext _localctx = new Sizeof_expressionContext(_ctx, State);
		EnterRule(_localctx, 682, RULE_sizeof_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3472; Match(SIZEOF);
			State = 3473; Match(OPEN_PARENS);
			State = 3474; unmanaged_type();
			State = 3475; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_statementContext : ParserRuleContext {
		public ITerminalNode FIXED() { return GetToken(CSharp4Parser.FIXED, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public Pointer_typeContext pointer_type() {
			return GetRuleContext<Pointer_typeContext>(0);
		}
		public Fixed_pointer_declaratorsContext fixed_pointer_declarators() {
			return GetRuleContext<Fixed_pointer_declaratorsContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public Fixed_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterFixed_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitFixed_statement(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_statementContext fixed_statement() {
		Fixed_statementContext _localctx = new Fixed_statementContext(_ctx, State);
		EnterRule(_localctx, 684, RULE_fixed_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3477; Match(FIXED);
			State = 3478; Match(OPEN_PARENS);
			State = 3479; pointer_type();
			State = 3480; fixed_pointer_declarators();
			State = 3481; Match(CLOSE_PARENS);
			State = 3482; embedded_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_pointer_declaratorsContext : ParserRuleContext {
		public Fixed_pointer_declaratorContext[] fixed_pointer_declarator() {
			return GetRuleContexts<Fixed_pointer_declaratorContext>();
		}
		public Fixed_pointer_declaratorContext fixed_pointer_declarator(int i) {
			return GetRuleContext<Fixed_pointer_declaratorContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Fixed_pointer_declaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_pointer_declarators; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterFixed_pointer_declarators(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitFixed_pointer_declarators(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_pointer_declaratorsContext fixed_pointer_declarators() {
		Fixed_pointer_declaratorsContext _localctx = new Fixed_pointer_declaratorsContext(_ctx, State);
		EnterRule(_localctx, 686, RULE_fixed_pointer_declarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3484; fixed_pointer_declarator();
			State = 3489;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 3485; Match(COMMA);
				State = 3486; fixed_pointer_declarator();
				}
				}
				State = 3491;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_pointer_declaratorContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(CSharp4Parser.ASSIGNMENT, 0); }
		public Fixed_pointer_initializerContext fixed_pointer_initializer() {
			return GetRuleContext<Fixed_pointer_initializerContext>(0);
		}
		public Fixed_pointer_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_pointer_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterFixed_pointer_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitFixed_pointer_declarator(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_pointer_declaratorContext fixed_pointer_declarator() {
		Fixed_pointer_declaratorContext _localctx = new Fixed_pointer_declaratorContext(_ctx, State);
		EnterRule(_localctx, 688, RULE_fixed_pointer_declarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3492; identifier();
			State = 3493; Match(ASSIGNMENT);
			State = 3494; fixed_pointer_initializer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_pointer_initializerContext : ParserRuleContext {
		public ITerminalNode AMP() { return GetToken(CSharp4Parser.AMP, 0); }
		public Variable_referenceContext variable_reference() {
			return GetRuleContext<Variable_referenceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Fixed_pointer_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_pointer_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterFixed_pointer_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitFixed_pointer_initializer(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_pointer_initializerContext fixed_pointer_initializer() {
		Fixed_pointer_initializerContext _localctx = new Fixed_pointer_initializerContext(_ctx, State);
		EnterRule(_localctx, 690, RULE_fixed_pointer_initializer);
		try {
			State = 3499;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,372,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3496; Match(AMP);
				State = 3497; variable_reference();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3498; expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_member_declaration_unsafeContext : ParserRuleContext {
		public Fixed_size_buffer_declarationContext fixed_size_buffer_declaration() {
			return GetRuleContext<Fixed_size_buffer_declarationContext>(0);
		}
		public Struct_member_declaration_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_member_declaration_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterStruct_member_declaration_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitStruct_member_declaration_unsafe(this);
		}
	}

	[RuleVersion(0)]
	public Struct_member_declaration_unsafeContext struct_member_declaration_unsafe() {
		Struct_member_declaration_unsafeContext _localctx = new Struct_member_declaration_unsafeContext(_ctx, State);
		EnterRule(_localctx, 692, RULE_struct_member_declaration_unsafe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3501; fixed_size_buffer_declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_size_buffer_declarationContext : ParserRuleContext {
		public ITerminalNode FIXED() { return GetToken(CSharp4Parser.FIXED, 0); }
		public Buffer_element_typeContext buffer_element_type() {
			return GetRuleContext<Buffer_element_typeContext>(0);
		}
		public Fixed_size_buffer_declaratorsContext fixed_size_buffer_declarators() {
			return GetRuleContext<Fixed_size_buffer_declaratorsContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Fixed_size_buffer_modifiersContext fixed_size_buffer_modifiers() {
			return GetRuleContext<Fixed_size_buffer_modifiersContext>(0);
		}
		public Fixed_size_buffer_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_size_buffer_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterFixed_size_buffer_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitFixed_size_buffer_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_size_buffer_declarationContext fixed_size_buffer_declaration() {
		Fixed_size_buffer_declarationContext _localctx = new Fixed_size_buffer_declarationContext(_ctx, State);
		EnterRule(_localctx, 694, RULE_fixed_size_buffer_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3504;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 3503; attributes();
				}
			}

			State = 3507;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (INTERNAL - 55)) | (1L << (NEW - 55)) | (1L << (PRIVATE - 55)) | (1L << (PROTECTED - 55)) | (1L << (PUBLIC - 55)) | (1L << (UNSAFE - 55)))) != 0)) {
				{
				State = 3506; fixed_size_buffer_modifiers();
				}
			}

			State = 3509; Match(FIXED);
			State = 3510; buffer_element_type();
			State = 3511; fixed_size_buffer_declarators();
			State = 3512; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_size_buffer_modifiersContext : ParserRuleContext {
		public Fixed_size_buffer_modifierContext[] fixed_size_buffer_modifier() {
			return GetRuleContexts<Fixed_size_buffer_modifierContext>();
		}
		public Fixed_size_buffer_modifierContext fixed_size_buffer_modifier(int i) {
			return GetRuleContext<Fixed_size_buffer_modifierContext>(i);
		}
		public Fixed_size_buffer_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_size_buffer_modifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterFixed_size_buffer_modifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitFixed_size_buffer_modifiers(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_size_buffer_modifiersContext fixed_size_buffer_modifiers() {
		Fixed_size_buffer_modifiersContext _localctx = new Fixed_size_buffer_modifiersContext(_ctx, State);
		EnterRule(_localctx, 696, RULE_fixed_size_buffer_modifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3515;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 3514; fixed_size_buffer_modifier();
				}
				}
				State = 3517;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( ((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (INTERNAL - 55)) | (1L << (NEW - 55)) | (1L << (PRIVATE - 55)) | (1L << (PROTECTED - 55)) | (1L << (PUBLIC - 55)) | (1L << (UNSAFE - 55)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_size_buffer_modifierContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(CSharp4Parser.NEW, 0); }
		public ITerminalNode PUBLIC() { return GetToken(CSharp4Parser.PUBLIC, 0); }
		public ITerminalNode PROTECTED() { return GetToken(CSharp4Parser.PROTECTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(CSharp4Parser.INTERNAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(CSharp4Parser.PRIVATE, 0); }
		public ITerminalNode UNSAFE() { return GetToken(CSharp4Parser.UNSAFE, 0); }
		public Fixed_size_buffer_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_size_buffer_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterFixed_size_buffer_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitFixed_size_buffer_modifier(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_size_buffer_modifierContext fixed_size_buffer_modifier() {
		Fixed_size_buffer_modifierContext _localctx = new Fixed_size_buffer_modifierContext(_ctx, State);
		EnterRule(_localctx, 698, RULE_fixed_size_buffer_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3519;
			_la = _input.La(1);
			if ( !(((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (INTERNAL - 55)) | (1L << (NEW - 55)) | (1L << (PRIVATE - 55)) | (1L << (PROTECTED - 55)) | (1L << (PUBLIC - 55)) | (1L << (UNSAFE - 55)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Buffer_element_typeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Buffer_element_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_buffer_element_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterBuffer_element_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitBuffer_element_type(this);
		}
	}

	[RuleVersion(0)]
	public Buffer_element_typeContext buffer_element_type() {
		Buffer_element_typeContext _localctx = new Buffer_element_typeContext(_ctx, State);
		EnterRule(_localctx, 700, RULE_buffer_element_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3521; type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_size_buffer_declaratorsContext : ParserRuleContext {
		public Fixed_size_buffer_declaratorContext[] fixed_size_buffer_declarator() {
			return GetRuleContexts<Fixed_size_buffer_declaratorContext>();
		}
		public Fixed_size_buffer_declaratorContext fixed_size_buffer_declarator(int i) {
			return GetRuleContext<Fixed_size_buffer_declaratorContext>(i);
		}
		public Fixed_size_buffer_declaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_size_buffer_declarators; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterFixed_size_buffer_declarators(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitFixed_size_buffer_declarators(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_size_buffer_declaratorsContext fixed_size_buffer_declarators() {
		Fixed_size_buffer_declaratorsContext _localctx = new Fixed_size_buffer_declaratorsContext(_ctx, State);
		EnterRule(_localctx, 702, RULE_fixed_size_buffer_declarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3524;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 3523; fixed_size_buffer_declarator();
				}
				}
				State = 3526;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BY) | (1L << DESCENDING) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INTO) | (1L << JOIN) | (1L << LET))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (ON - 66)) | (1L << (ORDERBY - 66)) | (1L << (PARTIAL - 66)) | (1L << (REMOVE - 66)) | (1L << (SELECT - 66)) | (1L << (SET - 66)) | (1L << (WHERE - 66)) | (1L << (YIELD - 66)) | (1L << (IDENTIFIER - 66)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_size_buffer_declaratorContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_BRACKET() { return GetToken(CSharp4Parser.OPEN_BRACKET, 0); }
		public Constant_expressionContext constant_expression() {
			return GetRuleContext<Constant_expressionContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharp4Parser.CLOSE_BRACKET, 0); }
		public Fixed_size_buffer_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_size_buffer_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterFixed_size_buffer_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitFixed_size_buffer_declarator(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_size_buffer_declaratorContext fixed_size_buffer_declarator() {
		Fixed_size_buffer_declaratorContext _localctx = new Fixed_size_buffer_declaratorContext(_ctx, State);
		EnterRule(_localctx, 704, RULE_fixed_size_buffer_declarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3528; identifier();
			State = 3529; Match(OPEN_BRACKET);
			State = 3530; constant_expression();
			State = 3531; Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_variable_initializer_unsafeContext : ParserRuleContext {
		public Stackalloc_initializerContext stackalloc_initializer() {
			return GetRuleContext<Stackalloc_initializerContext>(0);
		}
		public Local_variable_initializer_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_variable_initializer_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterLocal_variable_initializer_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitLocal_variable_initializer_unsafe(this);
		}
	}

	[RuleVersion(0)]
	public Local_variable_initializer_unsafeContext local_variable_initializer_unsafe() {
		Local_variable_initializer_unsafeContext _localctx = new Local_variable_initializer_unsafeContext(_ctx, State);
		EnterRule(_localctx, 706, RULE_local_variable_initializer_unsafe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3533; stackalloc_initializer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stackalloc_initializerContext : ParserRuleContext {
		public ITerminalNode STACKALLOC() { return GetToken(CSharp4Parser.STACKALLOC, 0); }
		public Unmanaged_typeContext unmanaged_type() {
			return GetRuleContext<Unmanaged_typeContext>(0);
		}
		public ITerminalNode OPEN_BRACKET() { return GetToken(CSharp4Parser.OPEN_BRACKET, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharp4Parser.CLOSE_BRACKET, 0); }
		public Stackalloc_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stackalloc_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterStackalloc_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitStackalloc_initializer(this);
		}
	}

	[RuleVersion(0)]
	public Stackalloc_initializerContext stackalloc_initializer() {
		Stackalloc_initializerContext _localctx = new Stackalloc_initializerContext(_ctx, State);
		EnterRule(_localctx, 708, RULE_stackalloc_initializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3535; Match(STACKALLOC);
			State = 3536; unmanaged_type();
			State = 3537; Match(OPEN_BRACKET);
			State = 3538; expression();
			State = 3539; Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class From_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode FROM() { return GetToken(CSharp4Parser.FROM, 0); }
		public From_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterFrom_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitFrom_contextual_keyword(this);
		}
	}

	[RuleVersion(0)]
	public From_contextual_keywordContext from_contextual_keyword() {
		From_contextual_keywordContext _localctx = new From_contextual_keywordContext(_ctx, State);
		EnterRule(_localctx, 710, RULE_from_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3541; Match(FROM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Let_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode LET() { return GetToken(CSharp4Parser.LET, 0); }
		public Let_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_let_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterLet_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitLet_contextual_keyword(this);
		}
	}

	[RuleVersion(0)]
	public Let_contextual_keywordContext let_contextual_keyword() {
		Let_contextual_keywordContext _localctx = new Let_contextual_keywordContext(_ctx, State);
		EnterRule(_localctx, 712, RULE_let_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3543; Match(LET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode WHERE() { return GetToken(CSharp4Parser.WHERE, 0); }
		public Where_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterWhere_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitWhere_contextual_keyword(this);
		}
	}

	[RuleVersion(0)]
	public Where_contextual_keywordContext where_contextual_keyword() {
		Where_contextual_keywordContext _localctx = new Where_contextual_keywordContext(_ctx, State);
		EnterRule(_localctx, 714, RULE_where_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3545; Match(WHERE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode JOIN() { return GetToken(CSharp4Parser.JOIN, 0); }
		public Join_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterJoin_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitJoin_contextual_keyword(this);
		}
	}

	[RuleVersion(0)]
	public Join_contextual_keywordContext join_contextual_keyword() {
		Join_contextual_keywordContext _localctx = new Join_contextual_keywordContext(_ctx, State);
		EnterRule(_localctx, 716, RULE_join_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3547; Match(JOIN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class On_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(CSharp4Parser.ON, 0); }
		public On_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_on_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterOn_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitOn_contextual_keyword(this);
		}
	}

	[RuleVersion(0)]
	public On_contextual_keywordContext on_contextual_keyword() {
		On_contextual_keywordContext _localctx = new On_contextual_keywordContext(_ctx, State);
		EnterRule(_localctx, 718, RULE_on_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3549; Match(ON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Equals_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode EQUALS() { return GetToken(CSharp4Parser.EQUALS, 0); }
		public Equals_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equals_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterEquals_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitEquals_contextual_keyword(this);
		}
	}

	[RuleVersion(0)]
	public Equals_contextual_keywordContext equals_contextual_keyword() {
		Equals_contextual_keywordContext _localctx = new Equals_contextual_keywordContext(_ctx, State);
		EnterRule(_localctx, 720, RULE_equals_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3551; Match(EQUALS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Into_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode INTO() { return GetToken(CSharp4Parser.INTO, 0); }
		public Into_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_into_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterInto_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitInto_contextual_keyword(this);
		}
	}

	[RuleVersion(0)]
	public Into_contextual_keywordContext into_contextual_keyword() {
		Into_contextual_keywordContext _localctx = new Into_contextual_keywordContext(_ctx, State);
		EnterRule(_localctx, 722, RULE_into_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3553; Match(INTO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Orderby_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode ORDERBY() { return GetToken(CSharp4Parser.ORDERBY, 0); }
		public Orderby_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderby_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterOrderby_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitOrderby_contextual_keyword(this);
		}
	}

	[RuleVersion(0)]
	public Orderby_contextual_keywordContext orderby_contextual_keyword() {
		Orderby_contextual_keywordContext _localctx = new Orderby_contextual_keywordContext(_ctx, State);
		EnterRule(_localctx, 724, RULE_orderby_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3555; Match(ORDERBY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ascending_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode ASCENDING() { return GetToken(CSharp4Parser.ASCENDING, 0); }
		public Ascending_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ascending_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAscending_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAscending_contextual_keyword(this);
		}
	}

	[RuleVersion(0)]
	public Ascending_contextual_keywordContext ascending_contextual_keyword() {
		Ascending_contextual_keywordContext _localctx = new Ascending_contextual_keywordContext(_ctx, State);
		EnterRule(_localctx, 726, RULE_ascending_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3557; Match(ASCENDING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Descending_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode DESCENDING() { return GetToken(CSharp4Parser.DESCENDING, 0); }
		public Descending_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_descending_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterDescending_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitDescending_contextual_keyword(this);
		}
	}

	[RuleVersion(0)]
	public Descending_contextual_keywordContext descending_contextual_keyword() {
		Descending_contextual_keywordContext _localctx = new Descending_contextual_keywordContext(_ctx, State);
		EnterRule(_localctx, 728, RULE_descending_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3559; Match(DESCENDING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode SELECT() { return GetToken(CSharp4Parser.SELECT, 0); }
		public Select_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterSelect_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitSelect_contextual_keyword(this);
		}
	}

	[RuleVersion(0)]
	public Select_contextual_keywordContext select_contextual_keyword() {
		Select_contextual_keywordContext _localctx = new Select_contextual_keywordContext(_ctx, State);
		EnterRule(_localctx, 730, RULE_select_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3561; Match(SELECT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode GROUP() { return GetToken(CSharp4Parser.GROUP, 0); }
		public Group_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterGroup_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitGroup_contextual_keyword(this);
		}
	}

	[RuleVersion(0)]
	public Group_contextual_keywordContext group_contextual_keyword() {
		Group_contextual_keywordContext _localctx = new Group_contextual_keywordContext(_ctx, State);
		EnterRule(_localctx, 732, RULE_group_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3563; Match(GROUP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class By_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode BY() { return GetToken(CSharp4Parser.BY, 0); }
		public By_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_by_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterBy_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitBy_contextual_keyword(this);
		}
	}

	[RuleVersion(0)]
	public By_contextual_keywordContext by_contextual_keyword() {
		By_contextual_keywordContext _localctx = new By_contextual_keywordContext(_ctx, State);
		EnterRule(_localctx, 734, RULE_by_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3565; Match(BY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partial_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode PARTIAL() { return GetToken(CSharp4Parser.PARTIAL, 0); }
		public Partial_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partial_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterPartial_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitPartial_contextual_keyword(this);
		}
	}

	[RuleVersion(0)]
	public Partial_contextual_keywordContext partial_contextual_keyword() {
		Partial_contextual_keywordContext _localctx = new Partial_contextual_keywordContext(_ctx, State);
		EnterRule(_localctx, 736, RULE_partial_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3567; Match(PARTIAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alias_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode ALIAS() { return GetToken(CSharp4Parser.ALIAS, 0); }
		public Alias_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAlias_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAlias_contextual_keyword(this);
		}
	}

	[RuleVersion(0)]
	public Alias_contextual_keywordContext alias_contextual_keyword() {
		Alias_contextual_keywordContext _localctx = new Alias_contextual_keywordContext(_ctx, State);
		EnterRule(_localctx, 738, RULE_alias_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3569; Match(ALIAS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Yield_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode YIELD() { return GetToken(CSharp4Parser.YIELD, 0); }
		public Yield_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_yield_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterYield_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitYield_contextual_keyword(this);
		}
	}

	[RuleVersion(0)]
	public Yield_contextual_keywordContext yield_contextual_keyword() {
		Yield_contextual_keywordContext _localctx = new Yield_contextual_keywordContext(_ctx, State);
		EnterRule(_localctx, 740, RULE_yield_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3571; Match(YIELD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Get_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode GET() { return GetToken(CSharp4Parser.GET, 0); }
		public Get_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_get_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterGet_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitGet_contextual_keyword(this);
		}
	}

	[RuleVersion(0)]
	public Get_contextual_keywordContext get_contextual_keyword() {
		Get_contextual_keywordContext _localctx = new Get_contextual_keywordContext(_ctx, State);
		EnterRule(_localctx, 742, RULE_get_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3573; Match(GET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(CSharp4Parser.SET, 0); }
		public Set_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterSet_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitSet_contextual_keyword(this);
		}
	}

	[RuleVersion(0)]
	public Set_contextual_keywordContext set_contextual_keyword() {
		Set_contextual_keywordContext _localctx = new Set_contextual_keywordContext(_ctx, State);
		EnterRule(_localctx, 744, RULE_set_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3575; Match(SET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode ADD() { return GetToken(CSharp4Parser.ADD, 0); }
		public Add_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAdd_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAdd_contextual_keyword(this);
		}
	}

	[RuleVersion(0)]
	public Add_contextual_keywordContext add_contextual_keyword() {
		Add_contextual_keywordContext _localctx = new Add_contextual_keywordContext(_ctx, State);
		EnterRule(_localctx, 746, RULE_add_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3577; Match(ADD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Remove_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode REMOVE() { return GetToken(CSharp4Parser.REMOVE, 0); }
		public Remove_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remove_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterRemove_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitRemove_contextual_keyword(this);
		}
	}

	[RuleVersion(0)]
	public Remove_contextual_keywordContext remove_contextual_keyword() {
		Remove_contextual_keywordContext _localctx = new Remove_contextual_keywordContext(_ctx, State);
		EnterRule(_localctx, 748, RULE_remove_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3579; Match(REMOVE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dynamic_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode DYNAMIC() { return GetToken(CSharp4Parser.DYNAMIC, 0); }
		public Dynamic_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dynamic_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterDynamic_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitDynamic_contextual_keyword(this);
		}
	}

	[RuleVersion(0)]
	public Dynamic_contextual_keywordContext dynamic_contextual_keyword() {
		Dynamic_contextual_keywordContext _localctx = new Dynamic_contextual_keywordContext(_ctx, State);
		EnterRule(_localctx, 750, RULE_dynamic_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3581; Match(DYNAMIC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArglistContext : ParserRuleContext {
		public ITerminalNode ARGLIST() { return GetToken(CSharp4Parser.ARGLIST, 0); }
		public ArglistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arglist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterArglist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitArglist(this);
		}
	}

	[RuleVersion(0)]
	public ArglistContext arglist() {
		ArglistContext _localctx = new ArglistContext(_ctx, State);
		EnterRule(_localctx, 752, RULE_arglist);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3583; Match(ARGLIST);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Right_arrowContext : ParserRuleContext {
		public IToken first;
		public IToken second;
		public ITerminalNode ASSIGNMENT() { return GetToken(CSharp4Parser.ASSIGNMENT, 0); }
		public ITerminalNode GT() { return GetToken(CSharp4Parser.GT, 0); }
		public Right_arrowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_right_arrow; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterRight_arrow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitRight_arrow(this);
		}
	}

	[RuleVersion(0)]
	public Right_arrowContext right_arrow() {
		Right_arrowContext _localctx = new Right_arrowContext(_ctx, State);
		EnterRule(_localctx, 754, RULE_right_arrow);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3585; _localctx.first = Match(ASSIGNMENT);
			State = 3586; _localctx.second = Match(GT);
			State = 3587;
			if (!((_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0))) throw new FailedPredicateException(this, "$first.index + 1 == $second.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Right_shiftContext : ParserRuleContext {
		public IToken first;
		public IToken second;
		public ITerminalNode[] GT() { return GetTokens(CSharp4Parser.GT); }
		public ITerminalNode GT(int i) {
			return GetToken(CSharp4Parser.GT, i);
		}
		public Right_shiftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_right_shift; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterRight_shift(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitRight_shift(this);
		}
	}

	[RuleVersion(0)]
	public Right_shiftContext right_shift() {
		Right_shiftContext _localctx = new Right_shiftContext(_ctx, State);
		EnterRule(_localctx, 756, RULE_right_shift);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3589; _localctx.first = Match(GT);
			State = 3590; _localctx.second = Match(GT);
			State = 3591;
			if (!((_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0))) throw new FailedPredicateException(this, "$first.index + 1 == $second.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Right_shift_assignmentContext : ParserRuleContext {
		public IToken first;
		public IToken second;
		public ITerminalNode GT() { return GetToken(CSharp4Parser.GT, 0); }
		public ITerminalNode OP_GE() { return GetToken(CSharp4Parser.OP_GE, 0); }
		public Right_shift_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_right_shift_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterRight_shift_assignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitRight_shift_assignment(this);
		}
	}

	[RuleVersion(0)]
	public Right_shift_assignmentContext right_shift_assignment() {
		Right_shift_assignmentContext _localctx = new Right_shift_assignmentContext(_ctx, State);
		EnterRule(_localctx, 758, RULE_right_shift_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3593; _localctx.first = Match(GT);
			State = 3594; _localctx.second = Match(OP_GE);
			State = 3595;
			if (!((_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0))) throw new FailedPredicateException(this, "$first.index + 1 == $second.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public Boolean_literalContext boolean_literal() {
			return GetRuleContext<Boolean_literalContext>(0);
		}
		public ITerminalNode INTEGER_LITERAL() { return GetToken(CSharp4Parser.INTEGER_LITERAL, 0); }
		public ITerminalNode REAL_LITERAL() { return GetToken(CSharp4Parser.REAL_LITERAL, 0); }
		public ITerminalNode CHARACTER_LITERAL() { return GetToken(CSharp4Parser.CHARACTER_LITERAL, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(CSharp4Parser.STRING_LITERAL, 0); }
		public ITerminalNode NULL() { return GetToken(CSharp4Parser.NULL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(_ctx, State);
		EnterRule(_localctx, 760, RULE_literal);
		try {
			State = 3603;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case FALSE:
			case TRUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3597; boolean_literal();
				}
				break;
			case INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3598; Match(INTEGER_LITERAL);
				}
				break;
			case REAL_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3599; Match(REAL_LITERAL);
				}
				break;
			case CHARACTER_LITERAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3600; Match(CHARACTER_LITERAL);
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3601; Match(STRING_LITERAL);
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3602; Match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_literalContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(CSharp4Parser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(CSharp4Parser.FALSE, 0); }
		public Boolean_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterBoolean_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitBoolean_literal(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_literalContext boolean_literal() {
		Boolean_literalContext _localctx = new Boolean_literalContext(_ctx, State);
		EnterRule(_localctx, 762, RULE_boolean_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3605;
			_la = _input.La(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		public ITerminalNode ABSTRACT() { return GetToken(CSharp4Parser.ABSTRACT, 0); }
		public ITerminalNode AS() { return GetToken(CSharp4Parser.AS, 0); }
		public ITerminalNode BASE() { return GetToken(CSharp4Parser.BASE, 0); }
		public ITerminalNode BOOL() { return GetToken(CSharp4Parser.BOOL, 0); }
		public ITerminalNode BREAK() { return GetToken(CSharp4Parser.BREAK, 0); }
		public ITerminalNode BYTE() { return GetToken(CSharp4Parser.BYTE, 0); }
		public ITerminalNode CASE() { return GetToken(CSharp4Parser.CASE, 0); }
		public ITerminalNode CATCH() { return GetToken(CSharp4Parser.CATCH, 0); }
		public ITerminalNode CHAR() { return GetToken(CSharp4Parser.CHAR, 0); }
		public ITerminalNode CHECKED() { return GetToken(CSharp4Parser.CHECKED, 0); }
		public ITerminalNode CLASS() { return GetToken(CSharp4Parser.CLASS, 0); }
		public ITerminalNode CONST() { return GetToken(CSharp4Parser.CONST, 0); }
		public ITerminalNode CONTINUE() { return GetToken(CSharp4Parser.CONTINUE, 0); }
		public ITerminalNode DECIMAL() { return GetToken(CSharp4Parser.DECIMAL, 0); }
		public ITerminalNode DEFAULT() { return GetToken(CSharp4Parser.DEFAULT, 0); }
		public ITerminalNode DELEGATE() { return GetToken(CSharp4Parser.DELEGATE, 0); }
		public ITerminalNode DO() { return GetToken(CSharp4Parser.DO, 0); }
		public ITerminalNode DOUBLE() { return GetToken(CSharp4Parser.DOUBLE, 0); }
		public ITerminalNode ELSE() { return GetToken(CSharp4Parser.ELSE, 0); }
		public ITerminalNode ENUM() { return GetToken(CSharp4Parser.ENUM, 0); }
		public ITerminalNode EVENT() { return GetToken(CSharp4Parser.EVENT, 0); }
		public ITerminalNode EXPLICIT() { return GetToken(CSharp4Parser.EXPLICIT, 0); }
		public ITerminalNode EXTERN() { return GetToken(CSharp4Parser.EXTERN, 0); }
		public ITerminalNode FALSE() { return GetToken(CSharp4Parser.FALSE, 0); }
		public ITerminalNode FINALLY() { return GetToken(CSharp4Parser.FINALLY, 0); }
		public ITerminalNode FIXED() { return GetToken(CSharp4Parser.FIXED, 0); }
		public ITerminalNode FLOAT() { return GetToken(CSharp4Parser.FLOAT, 0); }
		public ITerminalNode FOR() { return GetToken(CSharp4Parser.FOR, 0); }
		public ITerminalNode FOREACH() { return GetToken(CSharp4Parser.FOREACH, 0); }
		public ITerminalNode GOTO() { return GetToken(CSharp4Parser.GOTO, 0); }
		public ITerminalNode IF() { return GetToken(CSharp4Parser.IF, 0); }
		public ITerminalNode IMPLICIT() { return GetToken(CSharp4Parser.IMPLICIT, 0); }
		public ITerminalNode IN() { return GetToken(CSharp4Parser.IN, 0); }
		public ITerminalNode INT() { return GetToken(CSharp4Parser.INT, 0); }
		public ITerminalNode INTERFACE() { return GetToken(CSharp4Parser.INTERFACE, 0); }
		public ITerminalNode INTERNAL() { return GetToken(CSharp4Parser.INTERNAL, 0); }
		public ITerminalNode IS() { return GetToken(CSharp4Parser.IS, 0); }
		public ITerminalNode LOCK() { return GetToken(CSharp4Parser.LOCK, 0); }
		public ITerminalNode LONG() { return GetToken(CSharp4Parser.LONG, 0); }
		public ITerminalNode NAMESPACE() { return GetToken(CSharp4Parser.NAMESPACE, 0); }
		public ITerminalNode NEW() { return GetToken(CSharp4Parser.NEW, 0); }
		public ITerminalNode NULL() { return GetToken(CSharp4Parser.NULL, 0); }
		public ITerminalNode OBJECT() { return GetToken(CSharp4Parser.OBJECT, 0); }
		public ITerminalNode OPERATOR() { return GetToken(CSharp4Parser.OPERATOR, 0); }
		public ITerminalNode OUT() { return GetToken(CSharp4Parser.OUT, 0); }
		public ITerminalNode OVERRIDE() { return GetToken(CSharp4Parser.OVERRIDE, 0); }
		public ITerminalNode PARAMS() { return GetToken(CSharp4Parser.PARAMS, 0); }
		public ITerminalNode PRIVATE() { return GetToken(CSharp4Parser.PRIVATE, 0); }
		public ITerminalNode PROTECTED() { return GetToken(CSharp4Parser.PROTECTED, 0); }
		public ITerminalNode PUBLIC() { return GetToken(CSharp4Parser.PUBLIC, 0); }
		public ITerminalNode READONLY() { return GetToken(CSharp4Parser.READONLY, 0); }
		public ITerminalNode REF() { return GetToken(CSharp4Parser.REF, 0); }
		public ITerminalNode RETURN() { return GetToken(CSharp4Parser.RETURN, 0); }
		public ITerminalNode SBYTE() { return GetToken(CSharp4Parser.SBYTE, 0); }
		public ITerminalNode SEALED() { return GetToken(CSharp4Parser.SEALED, 0); }
		public ITerminalNode SHORT() { return GetToken(CSharp4Parser.SHORT, 0); }
		public ITerminalNode SIZEOF() { return GetToken(CSharp4Parser.SIZEOF, 0); }
		public ITerminalNode STACKALLOC() { return GetToken(CSharp4Parser.STACKALLOC, 0); }
		public ITerminalNode STATIC() { return GetToken(CSharp4Parser.STATIC, 0); }
		public ITerminalNode STRING() { return GetToken(CSharp4Parser.STRING, 0); }
		public ITerminalNode STRUCT() { return GetToken(CSharp4Parser.STRUCT, 0); }
		public ITerminalNode SWITCH() { return GetToken(CSharp4Parser.SWITCH, 0); }
		public ITerminalNode THIS() { return GetToken(CSharp4Parser.THIS, 0); }
		public ITerminalNode THROW() { return GetToken(CSharp4Parser.THROW, 0); }
		public ITerminalNode TRUE() { return GetToken(CSharp4Parser.TRUE, 0); }
		public ITerminalNode TRY() { return GetToken(CSharp4Parser.TRY, 0); }
		public ITerminalNode TYPEOF() { return GetToken(CSharp4Parser.TYPEOF, 0); }
		public ITerminalNode UINT() { return GetToken(CSharp4Parser.UINT, 0); }
		public ITerminalNode ULONG() { return GetToken(CSharp4Parser.ULONG, 0); }
		public ITerminalNode UNCHECKED() { return GetToken(CSharp4Parser.UNCHECKED, 0); }
		public ITerminalNode UNSAFE() { return GetToken(CSharp4Parser.UNSAFE, 0); }
		public ITerminalNode USHORT() { return GetToken(CSharp4Parser.USHORT, 0); }
		public ITerminalNode USING() { return GetToken(CSharp4Parser.USING, 0); }
		public ITerminalNode VIRTUAL() { return GetToken(CSharp4Parser.VIRTUAL, 0); }
		public ITerminalNode VOID() { return GetToken(CSharp4Parser.VOID, 0); }
		public ITerminalNode VOLATILE() { return GetToken(CSharp4Parser.VOLATILE, 0); }
		public ITerminalNode WHILE() { return GetToken(CSharp4Parser.WHILE, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(_ctx, State);
		EnterRule(_localctx, 764, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3607;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << AS) | (1L << BASE) | (1L << BOOL) | (1L << BREAK) | (1L << BYTE) | (1L << CASE) | (1L << CATCH) | (1L << CHAR) | (1L << CHECKED) | (1L << CLASS) | (1L << CONST) | (1L << CONTINUE) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DO) | (1L << DOUBLE) | (1L << ELSE) | (1L << ENUM) | (1L << EVENT) | (1L << EXPLICIT) | (1L << EXTERN) | (1L << FALSE) | (1L << FINALLY) | (1L << FIXED) | (1L << FLOAT) | (1L << FOR) | (1L << FOREACH) | (1L << GOTO) | (1L << IF) | (1L << IMPLICIT) | (1L << IN) | (1L << INT) | (1L << INTERFACE) | (1L << INTERNAL) | (1L << IS) | (1L << LOCK) | (1L << LONG) | (1L << NAMESPACE) | (1L << NEW))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (OPERATOR - 64)) | (1L << (OUT - 64)) | (1L << (OVERRIDE - 64)) | (1L << (PARAMS - 64)) | (1L << (PRIVATE - 64)) | (1L << (PROTECTED - 64)) | (1L << (PUBLIC - 64)) | (1L << (READONLY - 64)) | (1L << (REF - 64)) | (1L << (RETURN - 64)) | (1L << (SBYTE - 64)) | (1L << (SEALED - 64)) | (1L << (SHORT - 64)) | (1L << (SIZEOF - 64)) | (1L << (STACKALLOC - 64)) | (1L << (STATIC - 64)) | (1L << (STRING - 64)) | (1L << (STRUCT - 64)) | (1L << (SWITCH - 64)) | (1L << (THIS - 64)) | (1L << (THROW - 64)) | (1L << (TRUE - 64)) | (1L << (TRY - 64)) | (1L << (TYPEOF - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNCHECKED - 64)) | (1L << (UNSAFE - 64)) | (1L << (USHORT - 64)) | (1L << (USING - 64)) | (1L << (VIRTUAL - 64)) | (1L << (VOID - 64)) | (1L << (VOLATILE - 64)) | (1L << (WHILE - 64)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_definitionContext : ParserRuleContext {
		public ITerminalNode CLASS() { return GetToken(CSharp4Parser.CLASS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Class_bodyContext class_body() {
			return GetRuleContext<Class_bodyContext>(0);
		}
		public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		public Class_baseContext class_base() {
			return GetRuleContext<Class_baseContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Class_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterClass_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitClass_definition(this);
		}
	}

	[RuleVersion(0)]
	public Class_definitionContext class_definition() {
		Class_definitionContext _localctx = new Class_definitionContext(_ctx, State);
		EnterRule(_localctx, 766, RULE_class_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3609; Match(CLASS);
			State = 3610; identifier();
			State = 3612;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 3611; type_parameter_list();
				}
			}

			State = 3615;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COLON) {
				{
				State = 3614; class_base();
				}
			}

			State = 3618;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WHERE) {
				{
				State = 3617; type_parameter_constraints_clauses();
				}
			}

			State = 3620; class_body();
			State = 3622;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==SEMICOLON) {
				{
				State = 3621; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_definitionContext : ParserRuleContext {
		public ITerminalNode STRUCT() { return GetToken(CSharp4Parser.STRUCT, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Struct_bodyContext struct_body() {
			return GetRuleContext<Struct_bodyContext>(0);
		}
		public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		public Struct_interfacesContext struct_interfaces() {
			return GetRuleContext<Struct_interfacesContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Struct_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterStruct_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitStruct_definition(this);
		}
	}

	[RuleVersion(0)]
	public Struct_definitionContext struct_definition() {
		Struct_definitionContext _localctx = new Struct_definitionContext(_ctx, State);
		EnterRule(_localctx, 768, RULE_struct_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3624; Match(STRUCT);
			State = 3625; identifier();
			State = 3627;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 3626; type_parameter_list();
				}
			}

			State = 3630;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COLON) {
				{
				State = 3629; struct_interfaces();
				}
			}

			State = 3633;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WHERE) {
				{
				State = 3632; type_parameter_constraints_clauses();
				}
			}

			State = 3635; struct_body();
			State = 3637;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==SEMICOLON) {
				{
				State = 3636; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_definitionContext : ParserRuleContext {
		public ITerminalNode INTERFACE() { return GetToken(CSharp4Parser.INTERFACE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Interface_bodyContext interface_body() {
			return GetRuleContext<Interface_bodyContext>(0);
		}
		public Variant_type_parameter_listContext variant_type_parameter_list() {
			return GetRuleContext<Variant_type_parameter_listContext>(0);
		}
		public Interface_baseContext interface_base() {
			return GetRuleContext<Interface_baseContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Interface_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterInterface_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitInterface_definition(this);
		}
	}

	[RuleVersion(0)]
	public Interface_definitionContext interface_definition() {
		Interface_definitionContext _localctx = new Interface_definitionContext(_ctx, State);
		EnterRule(_localctx, 770, RULE_interface_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3639; Match(INTERFACE);
			State = 3640; identifier();
			State = 3642;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 3641; variant_type_parameter_list();
				}
			}

			State = 3645;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COLON) {
				{
				State = 3644; interface_base();
				}
			}

			State = 3648;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WHERE) {
				{
				State = 3647; type_parameter_constraints_clauses();
				}
			}

			State = 3650; interface_body();
			State = 3652;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==SEMICOLON) {
				{
				State = 3651; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_definitionContext : ParserRuleContext {
		public ITerminalNode ENUM() { return GetToken(CSharp4Parser.ENUM, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Enum_bodyContext enum_body() {
			return GetRuleContext<Enum_bodyContext>(0);
		}
		public Enum_baseContext enum_base() {
			return GetRuleContext<Enum_baseContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Enum_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterEnum_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitEnum_definition(this);
		}
	}

	[RuleVersion(0)]
	public Enum_definitionContext enum_definition() {
		Enum_definitionContext _localctx = new Enum_definitionContext(_ctx, State);
		EnterRule(_localctx, 772, RULE_enum_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3654; Match(ENUM);
			State = 3655; identifier();
			State = 3657;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COLON) {
				{
				State = 3656; enum_base();
				}
			}

			State = 3659; enum_body();
			State = 3661;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==SEMICOLON) {
				{
				State = 3660; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delegate_definitionContext : ParserRuleContext {
		public ITerminalNode DELEGATE() { return GetToken(CSharp4Parser.DELEGATE, 0); }
		public Return_typeContext return_type() {
			return GetRuleContext<Return_typeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Variant_type_parameter_listContext variant_type_parameter_list() {
			return GetRuleContext<Variant_type_parameter_listContext>(0);
		}
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public Delegate_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegate_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterDelegate_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitDelegate_definition(this);
		}
	}

	[RuleVersion(0)]
	public Delegate_definitionContext delegate_definition() {
		Delegate_definitionContext _localctx = new Delegate_definitionContext(_ctx, State);
		EnterRule(_localctx, 774, RULE_delegate_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3663; Match(DELEGATE);
			State = 3664; return_type();
			State = 3665; identifier();
			State = 3667;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 3666; variant_type_parameter_list();
				}
			}

			State = 3669; Match(OPEN_PARENS);
			State = 3671;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OUT - 65)) | (1L << (PARAMS - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (USHORT - 65)) | (1L << (VOID - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0)) {
				{
				State = 3670; formal_parameter_list();
				}
			}

			State = 3673; Match(CLOSE_PARENS);
			State = 3675;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WHERE) {
				{
				State = 3674; type_parameter_constraints_clauses();
				}
			}

			State = 3677; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_declaration2Context : ParserRuleContext {
		public ITerminalNode EVENT() { return GetToken(CSharp4Parser.EVENT, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Variable_declaratorsContext variable_declarators() {
			return GetRuleContext<Variable_declaratorsContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Member_nameContext member_name() {
			return GetRuleContext<Member_nameContext>(0);
		}
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharp4Parser.OPEN_BRACE, 0); }
		public Event_accessor_declarationsContext event_accessor_declarations() {
			return GetRuleContext<Event_accessor_declarationsContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharp4Parser.CLOSE_BRACE, 0); }
		public Event_declaration2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_declaration2; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterEvent_declaration2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitEvent_declaration2(this);
		}
	}

	[RuleVersion(0)]
	public Event_declaration2Context event_declaration2() {
		Event_declaration2Context _localctx = new Event_declaration2Context(_ctx, State);
		EnterRule(_localctx, 776, RULE_event_declaration2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3679; Match(EVENT);
			State = 3680; type();
			State = 3689;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,395,_ctx) ) {
			case 1:
				{
				State = 3681; variable_declarators();
				State = 3682; Match(SEMICOLON);
				}
				break;

			case 2:
				{
				State = 3684; member_name();
				State = 3685; Match(OPEN_BRACE);
				State = 3686; event_accessor_declarations();
				State = 3687; Match(CLOSE_BRACE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_declaration2Context : ParserRuleContext {
		public Variable_declaratorsContext variable_declarators() {
			return GetRuleContext<Variable_declaratorsContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Field_declaration2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_declaration2; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterField_declaration2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitField_declaration2(this);
		}
	}

	[RuleVersion(0)]
	public Field_declaration2Context field_declaration2() {
		Field_declaration2Context _localctx = new Field_declaration2Context(_ctx, State);
		EnterRule(_localctx, 778, RULE_field_declaration2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3691; variable_declarators();
			State = 3692; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_declaration2Context : ParserRuleContext {
		public Member_nameContext member_name() {
			return GetRuleContext<Member_nameContext>(0);
		}
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharp4Parser.OPEN_BRACE, 0); }
		public Accessor_declarationsContext accessor_declarations() {
			return GetRuleContext<Accessor_declarationsContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharp4Parser.CLOSE_BRACE, 0); }
		public Property_declaration2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_declaration2; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterProperty_declaration2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitProperty_declaration2(this);
		}
	}

	[RuleVersion(0)]
	public Property_declaration2Context property_declaration2() {
		Property_declaration2Context _localctx = new Property_declaration2Context(_ctx, State);
		EnterRule(_localctx, 780, RULE_property_declaration2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3694; member_name();
			State = 3695; Match(OPEN_BRACE);
			State = 3696; accessor_declarations();
			State = 3697; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_declaration2Context : ParserRuleContext {
		public ITerminalNode CONST() { return GetToken(CSharp4Parser.CONST, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Constant_declaratorsContext constant_declarators() {
			return GetRuleContext<Constant_declaratorsContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Constant_declaration2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_declaration2; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterConstant_declaration2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitConstant_declaration2(this);
		}
	}

	[RuleVersion(0)]
	public Constant_declaration2Context constant_declaration2() {
		Constant_declaration2Context _localctx = new Constant_declaration2Context(_ctx, State);
		EnterRule(_localctx, 782, RULE_constant_declaration2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3699; Match(CONST);
			State = 3700; type();
			State = 3701; constant_declarators();
			State = 3702; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indexer_declaration2Context : ParserRuleContext {
		public ITerminalNode THIS() { return GetToken(CSharp4Parser.THIS, 0); }
		public ITerminalNode OPEN_BRACKET() { return GetToken(CSharp4Parser.OPEN_BRACKET, 0); }
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharp4Parser.CLOSE_BRACKET, 0); }
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharp4Parser.OPEN_BRACE, 0); }
		public Accessor_declarationsContext accessor_declarations() {
			return GetRuleContext<Accessor_declarationsContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharp4Parser.CLOSE_BRACE, 0); }
		public Indexer_declaration2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexer_declaration2; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterIndexer_declaration2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitIndexer_declaration2(this);
		}
	}

	[RuleVersion(0)]
	public Indexer_declaration2Context indexer_declaration2() {
		Indexer_declaration2Context _localctx = new Indexer_declaration2Context(_ctx, State);
		EnterRule(_localctx, 784, RULE_indexer_declaration2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3704; Match(THIS);
			State = 3705; Match(OPEN_BRACKET);
			State = 3706; formal_parameter_list();
			State = 3707; Match(CLOSE_BRACKET);
			State = 3708; Match(OPEN_BRACE);
			State = 3709; accessor_declarations();
			State = 3710; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Destructor_definitionContext : ParserRuleContext {
		public ITerminalNode TILDE() { return GetToken(CSharp4Parser.TILDE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Destructor_bodyContext destructor_body() {
			return GetRuleContext<Destructor_bodyContext>(0);
		}
		public Destructor_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destructor_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterDestructor_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitDestructor_definition(this);
		}
	}

	[RuleVersion(0)]
	public Destructor_definitionContext destructor_definition() {
		Destructor_definitionContext _localctx = new Destructor_definitionContext(_ctx, State);
		EnterRule(_localctx, 786, RULE_destructor_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3712; Match(TILDE);
			State = 3713; identifier();
			State = 3714; Match(OPEN_PARENS);
			State = 3715; Match(CLOSE_PARENS);
			State = 3716; destructor_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_declaration2Context : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public Constructor_initializerContext constructor_initializer() {
			return GetRuleContext<Constructor_initializerContext>(0);
		}
		public Constructor_declaration2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_declaration2; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterConstructor_declaration2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitConstructor_declaration2(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_declaration2Context constructor_declaration2() {
		Constructor_declaration2Context _localctx = new Constructor_declaration2Context(_ctx, State);
		EnterRule(_localctx, 788, RULE_constructor_declaration2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3718; identifier();
			State = 3719; Match(OPEN_PARENS);
			State = 3721;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OUT - 65)) | (1L << (PARAMS - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (USHORT - 65)) | (1L << (VOID - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0)) {
				{
				State = 3720; formal_parameter_list();
				}
			}

			State = 3723; Match(CLOSE_PARENS);
			State = 3725;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COLON) {
				{
				State = 3724; constructor_initializer();
				}
			}

			State = 3727; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_declaration2Context : ParserRuleContext {
		public Method_member_nameContext method_member_name() {
			return GetRuleContext<Method_member_nameContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Method_bodyContext method_body() {
			return GetRuleContext<Method_bodyContext>(0);
		}
		public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public Method_declaration2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_declaration2; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterMethod_declaration2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitMethod_declaration2(this);
		}
	}

	[RuleVersion(0)]
	public Method_declaration2Context method_declaration2() {
		Method_declaration2Context _localctx = new Method_declaration2Context(_ctx, State);
		EnterRule(_localctx, 790, RULE_method_declaration2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3729; method_member_name();
			State = 3731;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 3730; type_parameter_list();
				}
			}

			State = 3733; Match(OPEN_PARENS);
			State = 3735;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OUT - 65)) | (1L << (PARAMS - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (USHORT - 65)) | (1L << (VOID - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0)) {
				{
				State = 3734; formal_parameter_list();
				}
			}

			State = 3737; Match(CLOSE_PARENS);
			State = 3739;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WHERE) {
				{
				State = 3738; type_parameter_constraints_clauses();
				}
			}

			State = 3741; method_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_member_nameContext : ParserRuleContext {
		public Method_member_name2Context method_member_name2() {
			return GetRuleContext<Method_member_name2Context>(0);
		}
		public Method_member_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_member_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterMethod_member_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitMethod_member_name(this);
		}
	}

	[RuleVersion(0)]
	public Method_member_nameContext method_member_name() {
		Method_member_nameContext _localctx = new Method_member_nameContext(_ctx, State);
		EnterRule(_localctx, 792, RULE_method_member_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3743; method_member_name2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_member_name2Context : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode DOUBLE_COLON() { return GetToken(CSharp4Parser.DOUBLE_COLON, 0); }
		public Type_argument_list_optContext[] type_argument_list_opt() {
			return GetRuleContexts<Type_argument_list_optContext>();
		}
		public Type_argument_list_optContext type_argument_list_opt(int i) {
			return GetRuleContext<Type_argument_list_optContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(CSharp4Parser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(CSharp4Parser.DOT, i);
		}
		public Method_member_name2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_member_name2; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterMethod_member_name2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitMethod_member_name2(this);
		}
	}

	[RuleVersion(0)]
	public Method_member_name2Context method_member_name2() {
		Method_member_name2Context _localctx = new Method_member_name2Context(_ctx, State);
		EnterRule(_localctx, 794, RULE_method_member_name2);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3750;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,401,_ctx) ) {
			case 1:
				{
				State = 3745; identifier();
				}
				break;

			case 2:
				{
				State = 3746; identifier();
				State = 3747; Match(DOUBLE_COLON);
				State = 3748; identifier();
				}
				break;
			}
			State = 3758;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,402,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 3752; type_argument_list_opt();
					State = 3753; Match(DOT);
					State = 3754; identifier();
					}
					} 
				}
				State = 3760;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,402,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_declaration2Context : ParserRuleContext {
		public ITerminalNode OPERATOR() { return GetToken(CSharp4Parser.OPERATOR, 0); }
		public Overloadable_operatorContext overloadable_operator() {
			return GetRuleContext<Overloadable_operatorContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Operator_bodyContext operator_body() {
			return GetRuleContext<Operator_bodyContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(CSharp4Parser.COMMA, 0); }
		public Operator_declaration2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_declaration2; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterOperator_declaration2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitOperator_declaration2(this);
		}
	}

	[RuleVersion(0)]
	public Operator_declaration2Context operator_declaration2() {
		Operator_declaration2Context _localctx = new Operator_declaration2Context(_ctx, State);
		EnterRule(_localctx, 796, RULE_operator_declaration2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3761; Match(OPERATOR);
			State = 3762; overloadable_operator();
			State = 3763; Match(OPEN_PARENS);
			State = 3764; type();
			State = 3765; identifier();
			State = 3770;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 3766; Match(COMMA);
				State = 3767; type();
				State = 3768; identifier();
				}
			}

			State = 3772; Match(CLOSE_PARENS);
			State = 3773; operator_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_method_declaration2Context : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public Interface_method_declaration2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_method_declaration2; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterInterface_method_declaration2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitInterface_method_declaration2(this);
		}
	}

	[RuleVersion(0)]
	public Interface_method_declaration2Context interface_method_declaration2() {
		Interface_method_declaration2Context _localctx = new Interface_method_declaration2Context(_ctx, State);
		EnterRule(_localctx, 798, RULE_interface_method_declaration2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3775; identifier();
			State = 3777;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 3776; type_parameter_list();
				}
			}

			State = 3779; Match(OPEN_PARENS);
			State = 3781;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OUT - 65)) | (1L << (PARAMS - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (USHORT - 65)) | (1L << (VOID - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0)) {
				{
				State = 3780; formal_parameter_list();
				}
			}

			State = 3783; Match(CLOSE_PARENS);
			State = 3785;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WHERE) {
				{
				State = 3784; type_parameter_constraints_clauses();
				}
			}

			State = 3787; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_property_declaration2Context : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharp4Parser.OPEN_BRACE, 0); }
		public Interface_accessorsContext interface_accessors() {
			return GetRuleContext<Interface_accessorsContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharp4Parser.CLOSE_BRACE, 0); }
		public Interface_property_declaration2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_property_declaration2; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterInterface_property_declaration2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitInterface_property_declaration2(this);
		}
	}

	[RuleVersion(0)]
	public Interface_property_declaration2Context interface_property_declaration2() {
		Interface_property_declaration2Context _localctx = new Interface_property_declaration2Context(_ctx, State);
		EnterRule(_localctx, 800, RULE_interface_property_declaration2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3789; identifier();
			State = 3790; Match(OPEN_BRACE);
			State = 3791; interface_accessors();
			State = 3792; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_event_declaration2Context : ParserRuleContext {
		public ITerminalNode EVENT() { return GetToken(CSharp4Parser.EVENT, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Interface_event_declaration2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_event_declaration2; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterInterface_event_declaration2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitInterface_event_declaration2(this);
		}
	}

	[RuleVersion(0)]
	public Interface_event_declaration2Context interface_event_declaration2() {
		Interface_event_declaration2Context _localctx = new Interface_event_declaration2Context(_ctx, State);
		EnterRule(_localctx, 802, RULE_interface_event_declaration2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3794; Match(EVENT);
			State = 3795; type();
			State = 3796; identifier();
			State = 3797; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_indexer_declaration2Context : ParserRuleContext {
		public ITerminalNode THIS() { return GetToken(CSharp4Parser.THIS, 0); }
		public ITerminalNode OPEN_BRACKET() { return GetToken(CSharp4Parser.OPEN_BRACKET, 0); }
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharp4Parser.CLOSE_BRACKET, 0); }
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharp4Parser.OPEN_BRACE, 0); }
		public Interface_accessorsContext interface_accessors() {
			return GetRuleContext<Interface_accessorsContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharp4Parser.CLOSE_BRACE, 0); }
		public Interface_indexer_declaration2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_indexer_declaration2; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterInterface_indexer_declaration2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitInterface_indexer_declaration2(this);
		}
	}

	[RuleVersion(0)]
	public Interface_indexer_declaration2Context interface_indexer_declaration2() {
		Interface_indexer_declaration2Context _localctx = new Interface_indexer_declaration2Context(_ctx, State);
		EnterRule(_localctx, 804, RULE_interface_indexer_declaration2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3799; Match(THIS);
			State = 3800; Match(OPEN_BRACKET);
			State = 3801; formal_parameter_list();
			State = 3802; Match(CLOSE_BRACKET);
			State = 3803; Match(OPEN_BRACE);
			State = 3804; interface_accessors();
			State = 3805; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_access2Context : ParserRuleContext {
		public ITerminalNode DOT() { return GetToken(CSharp4Parser.DOT, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Type_argument_list_optContext type_argument_list_opt() {
			return GetRuleContext<Type_argument_list_optContext>(0);
		}
		public Member_access2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_access2; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterMember_access2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitMember_access2(this);
		}
	}

	[RuleVersion(0)]
	public Member_access2Context member_access2() {
		Member_access2Context _localctx = new Member_access2Context(_ctx, State);
		EnterRule(_localctx, 806, RULE_member_access2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3807; Match(DOT);
			State = 3808; identifier();
			State = 3809; type_argument_list_opt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_invocation2Context : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Method_invocation2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_invocation2; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterMethod_invocation2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitMethod_invocation2(this);
		}
	}

	[RuleVersion(0)]
	public Method_invocation2Context method_invocation2() {
		Method_invocation2Context _localctx = new Method_invocation2Context(_ctx, State);
		EnterRule(_localctx, 808, RULE_method_invocation2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3811; Match(OPEN_PARENS);
			State = 3813;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NEW))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ORDERBY - 64)) | (1L << (OUT - 64)) | (1L << (PARTIAL - 64)) | (1L << (REF - 64)) | (1L << (REMOVE - 64)) | (1L << (SBYTE - 64)) | (1L << (SELECT - 64)) | (1L << (SET - 64)) | (1L << (SHORT - 64)) | (1L << (SIZEOF - 64)) | (1L << (STRING - 64)) | (1L << (THIS - 64)) | (1L << (TRUE - 64)) | (1L << (TYPEOF - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNCHECKED - 64)) | (1L << (USHORT - 64)) | (1L << (WHERE - 64)) | (1L << (YIELD - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (INTEGER_LITERAL - 64)) | (1L << (REAL_LITERAL - 64)) | (1L << (CHARACTER_LITERAL - 64)) | (1L << (STRING_LITERAL - 64)) | (1L << (OPEN_PARENS - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (STAR - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (AMP - 129)) | (1L << (BANG - 129)) | (1L << (TILDE - 129)) | (1L << (OP_INC - 129)) | (1L << (OP_DEC - 129)))) != 0)) {
				{
				State = 3812; argument_list();
				}
			}

			State = 3815; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_creation_expression2Context : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Object_or_collection_initializerContext object_or_collection_initializer() {
			return GetRuleContext<Object_or_collection_initializerContext>(0);
		}
		public Object_creation_expression2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_creation_expression2; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterObject_creation_expression2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitObject_creation_expression2(this);
		}
	}

	[RuleVersion(0)]
	public Object_creation_expression2Context object_creation_expression2() {
		Object_creation_expression2Context _localctx = new Object_creation_expression2Context(_ctx, State);
		EnterRule(_localctx, 810, RULE_object_creation_expression2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3817; Match(OPEN_PARENS);
			State = 3819;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NEW))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ORDERBY - 64)) | (1L << (OUT - 64)) | (1L << (PARTIAL - 64)) | (1L << (REF - 64)) | (1L << (REMOVE - 64)) | (1L << (SBYTE - 64)) | (1L << (SELECT - 64)) | (1L << (SET - 64)) | (1L << (SHORT - 64)) | (1L << (SIZEOF - 64)) | (1L << (STRING - 64)) | (1L << (THIS - 64)) | (1L << (TRUE - 64)) | (1L << (TYPEOF - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNCHECKED - 64)) | (1L << (USHORT - 64)) | (1L << (WHERE - 64)) | (1L << (YIELD - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (INTEGER_LITERAL - 64)) | (1L << (REAL_LITERAL - 64)) | (1L << (CHARACTER_LITERAL - 64)) | (1L << (STRING_LITERAL - 64)) | (1L << (OPEN_PARENS - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (STAR - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (AMP - 129)) | (1L << (BANG - 129)) | (1L << (TILDE - 129)) | (1L << (OP_INC - 129)) | (1L << (OP_DEC - 129)))) != 0)) {
				{
				State = 3818; argument_list();
				}
			}

			State = 3821; Match(CLOSE_PARENS);
			State = 3823;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OPEN_BRACE) {
				{
				State = 3822; object_or_collection_initializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 377: return right_arrow_sempred((Right_arrowContext)_localctx, predIndex);

		case 378: return right_shift_sempred((Right_shiftContext)_localctx, predIndex);

		case 379: return right_shift_assignment_sempred((Right_shift_assignmentContext)_localctx, predIndex);
		}
		return true;
	}
	private bool right_arrow_sempred(Right_arrowContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return (_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0);
		}
		return true;
	}
	private bool right_shift_sempred(Right_shiftContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return (_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0);
		}
		return true;
	}
	private bool right_shift_assignment_sempred(Right_shift_assignmentContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return (_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\xA5\xEF4\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87"+
		"\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x4\x8D"+
		"\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x4\x90\t\x90\x4\x91\t\x91\x4\x92\t\x92"+
		"\x4\x93\t\x93\x4\x94\t\x94\x4\x95\t\x95\x4\x96\t\x96\x4\x97\t\x97\x4\x98"+
		"\t\x98\x4\x99\t\x99\x4\x9A\t\x9A\x4\x9B\t\x9B\x4\x9C\t\x9C\x4\x9D\t\x9D"+
		"\x4\x9E\t\x9E\x4\x9F\t\x9F\x4\xA0\t\xA0\x4\xA1\t\xA1\x4\xA2\t\xA2\x4\xA3"+
		"\t\xA3\x4\xA4\t\xA4\x4\xA5\t\xA5\x4\xA6\t\xA6\x4\xA7\t\xA7\x4\xA8\t\xA8"+
		"\x4\xA9\t\xA9\x4\xAA\t\xAA\x4\xAB\t\xAB\x4\xAC\t\xAC\x4\xAD\t\xAD\x4\xAE"+
		"\t\xAE\x4\xAF\t\xAF\x4\xB0\t\xB0\x4\xB1\t\xB1\x4\xB2\t\xB2\x4\xB3\t\xB3"+
		"\x4\xB4\t\xB4\x4\xB5\t\xB5\x4\xB6\t\xB6\x4\xB7\t\xB7\x4\xB8\t\xB8\x4\xB9"+
		"\t\xB9\x4\xBA\t\xBA\x4\xBB\t\xBB\x4\xBC\t\xBC\x4\xBD\t\xBD\x4\xBE\t\xBE"+
		"\x4\xBF\t\xBF\x4\xC0\t\xC0\x4\xC1\t\xC1\x4\xC2\t\xC2\x4\xC3\t\xC3\x4\xC4"+
		"\t\xC4\x4\xC5\t\xC5\x4\xC6\t\xC6\x4\xC7\t\xC7\x4\xC8\t\xC8\x4\xC9\t\xC9"+
		"\x4\xCA\t\xCA\x4\xCB\t\xCB\x4\xCC\t\xCC\x4\xCD\t\xCD\x4\xCE\t\xCE\x4\xCF"+
		"\t\xCF\x4\xD0\t\xD0\x4\xD1\t\xD1\x4\xD2\t\xD2\x4\xD3\t\xD3\x4\xD4\t\xD4"+
		"\x4\xD5\t\xD5\x4\xD6\t\xD6\x4\xD7\t\xD7\x4\xD8\t\xD8\x4\xD9\t\xD9\x4\xDA"+
		"\t\xDA\x4\xDB\t\xDB\x4\xDC\t\xDC\x4\xDD\t\xDD\x4\xDE\t\xDE\x4\xDF\t\xDF"+
		"\x4\xE0\t\xE0\x4\xE1\t\xE1\x4\xE2\t\xE2\x4\xE3\t\xE3\x4\xE4\t\xE4\x4\xE5"+
		"\t\xE5\x4\xE6\t\xE6\x4\xE7\t\xE7\x4\xE8\t\xE8\x4\xE9\t\xE9\x4\xEA\t\xEA"+
		"\x4\xEB\t\xEB\x4\xEC\t\xEC\x4\xED\t\xED\x4\xEE\t\xEE\x4\xEF\t\xEF\x4\xF0"+
		"\t\xF0\x4\xF1\t\xF1\x4\xF2\t\xF2\x4\xF3\t\xF3\x4\xF4\t\xF4\x4\xF5\t\xF5"+
		"\x4\xF6\t\xF6\x4\xF7\t\xF7\x4\xF8\t\xF8\x4\xF9\t\xF9\x4\xFA\t\xFA\x4\xFB"+
		"\t\xFB\x4\xFC\t\xFC\x4\xFD\t\xFD\x4\xFE\t\xFE\x4\xFF\t\xFF\x4\x100\t\x100"+
		"\x4\x101\t\x101\x4\x102\t\x102\x4\x103\t\x103\x4\x104\t\x104\x4\x105\t"+
		"\x105\x4\x106\t\x106\x4\x107\t\x107\x4\x108\t\x108\x4\x109\t\x109\x4\x10A"+
		"\t\x10A\x4\x10B\t\x10B\x4\x10C\t\x10C\x4\x10D\t\x10D\x4\x10E\t\x10E\x4"+
		"\x10F\t\x10F\x4\x110\t\x110\x4\x111\t\x111\x4\x112\t\x112\x4\x113\t\x113"+
		"\x4\x114\t\x114\x4\x115\t\x115\x4\x116\t\x116\x4\x117\t\x117\x4\x118\t"+
		"\x118\x4\x119\t\x119\x4\x11A\t\x11A\x4\x11B\t\x11B\x4\x11C\t\x11C\x4\x11D"+
		"\t\x11D\x4\x11E\t\x11E\x4\x11F\t\x11F\x4\x120\t\x120\x4\x121\t\x121\x4"+
		"\x122\t\x122\x4\x123\t\x123\x4\x124\t\x124\x4\x125\t\x125\x4\x126\t\x126"+
		"\x4\x127\t\x127\x4\x128\t\x128\x4\x129\t\x129\x4\x12A\t\x12A\x4\x12B\t"+
		"\x12B\x4\x12C\t\x12C\x4\x12D\t\x12D\x4\x12E\t\x12E\x4\x12F\t\x12F\x4\x130"+
		"\t\x130\x4\x131\t\x131\x4\x132\t\x132\x4\x133\t\x133\x4\x134\t\x134\x4"+
		"\x135\t\x135\x4\x136\t\x136\x4\x137\t\x137\x4\x138\t\x138\x4\x139\t\x139"+
		"\x4\x13A\t\x13A\x4\x13B\t\x13B\x4\x13C\t\x13C\x4\x13D\t\x13D\x4\x13E\t"+
		"\x13E\x4\x13F\t\x13F\x4\x140\t\x140\x4\x141\t\x141\x4\x142\t\x142\x4\x143"+
		"\t\x143\x4\x144\t\x144\x4\x145\t\x145\x4\x146\t\x146\x4\x147\t\x147\x4"+
		"\x148\t\x148\x4\x149\t\x149\x4\x14A\t\x14A\x4\x14B\t\x14B\x4\x14C\t\x14C"+
		"\x4\x14D\t\x14D\x4\x14E\t\x14E\x4\x14F\t\x14F\x4\x150\t\x150\x4\x151\t"+
		"\x151\x4\x152\t\x152\x4\x153\t\x153\x4\x154\t\x154\x4\x155\t\x155\x4\x156"+
		"\t\x156\x4\x157\t\x157\x4\x158\t\x158\x4\x159\t\x159\x4\x15A\t\x15A\x4"+
		"\x15B\t\x15B\x4\x15C\t\x15C\x4\x15D\t\x15D\x4\x15E\t\x15E\x4\x15F\t\x15F"+
		"\x4\x160\t\x160\x4\x161\t\x161\x4\x162\t\x162\x4\x163\t\x163\x4\x164\t"+
		"\x164\x4\x165\t\x165\x4\x166\t\x166\x4\x167\t\x167\x4\x168\t\x168\x4\x169"+
		"\t\x169\x4\x16A\t\x16A\x4\x16B\t\x16B\x4\x16C\t\x16C\x4\x16D\t\x16D\x4"+
		"\x16E\t\x16E\x4\x16F\t\x16F\x4\x170\t\x170\x4\x171\t\x171\x4\x172\t\x172"+
		"\x4\x173\t\x173\x4\x174\t\x174\x4\x175\t\x175\x4\x176\t\x176\x4\x177\t"+
		"\x177\x4\x178\t\x178\x4\x179\t\x179\x4\x17A\t\x17A\x4\x17B\t\x17B\x4\x17C"+
		"\t\x17C\x4\x17D\t\x17D\x4\x17E\t\x17E\x4\x17F\t\x17F\x4\x180\t\x180\x4"+
		"\x181\t\x181\x4\x182\t\x182\x4\x183\t\x183\x4\x184\t\x184\x4\x185\t\x185"+
		"\x4\x186\t\x186\x4\x187\t\x187\x4\x188\t\x188\x4\x189\t\x189\x4\x18A\t"+
		"\x18A\x4\x18B\t\x18B\x4\x18C\t\x18C\x4\x18D\t\x18D\x4\x18E\t\x18E\x4\x18F"+
		"\t\x18F\x4\x190\t\x190\x4\x191\t\x191\x4\x192\t\x192\x4\x193\t\x193\x4"+
		"\x194\t\x194\x4\x195\t\x195\x4\x196\t\x196\x4\x197\t\x197\x3\x2\x3\x2"+
		"\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5\x339\n\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\a\x5\x33F\n\x5\f\x5\xE\x5\x342\v\x5\x3\x6\x3\x6\x5"+
		"\x6\x346\n\x6\x3\a\x3\a\x3\a\x3\a\a\a\x34C\n\a\f\a\xE\a\x34F\v\a\x3\b"+
		"\x3\b\x3\b\x3\b\x5\b\x355\n\b\x3\t\x3\t\x5\t\x359\n\t\x3\n\x3\n\x3\n\x5"+
		"\n\x35E\n\n\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\a\xE"+
		"\x36A\n\xE\f\xE\xE\xE\x36D\v\xE\x3\xF\x3\xF\a\xF\x371\n\xF\f\xF\xE\xF"+
		"\x374\v\xF\x3\xF\a\xF\x377\n\xF\f\xF\xE\xF\x37A\v\xF\x3\xF\a\xF\x37D\n"+
		"\xF\f\xF\xE\xF\x380\v\xF\x3\xF\x3\xF\x3\xF\x3\xF\a\xF\x386\n\xF\f\xF\xE"+
		"\xF\x389\v\xF\x3\xF\a\xF\x38C\n\xF\f\xF\xE\xF\x38F\v\xF\x3\xF\x3\xF\x3"+
		"\xF\a\xF\x394\n\xF\f\xF\xE\xF\x397\v\xF\x3\xF\a\xF\x39A\n\xF\f\xF\xE\xF"+
		"\x39D\v\xF\x3\xF\a\xF\x3A0\n\xF\f\xF\xE\xF\x3A3\v\xF\x3\xF\x5\xF\x3A6"+
		"\n\xF\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\x3AC\n\x10\x3\x11\x3\x11\x3\x12"+
		"\x3\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\a\x14\x3B9\n"+
		"\x14\f\x14\xE\x14\x3BC\v\x14\x3\x15\x3\x15\x3\x16\x3\x16\x3\x17\x3\x17"+
		"\x3\x18\x3\x18\x3\x18\a\x18\x3C7\n\x18\f\x18\xE\x18\x3CA\v\x18\x3\x19"+
		"\x5\x19\x3CD\n\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x5\x1B\x3D9\n\x1B\x3\x1C\x3\x1C\a\x1C\x3DD\n\x1C\f"+
		"\x1C\xE\x1C\x3E0\v\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C"+
		"\x3E8\n\x1C\x3\x1C\a\x1C\x3EB\n\x1C\f\x1C\xE\x1C\x3EE\v\x1C\a\x1C\x3F0"+
		"\n\x1C\f\x1C\xE\x1C\x3F3\v\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D"+
		"\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D"+
		"\x404\n\x1D\x3\x1D\x5\x1D\x407\n\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x40C"+
		"\n\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x412\n\x1D\x3\x1D\x3\x1D\x3"+
		"\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x41A\n\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E"+
		"\x3\x1F\x3\x1F\x3\x1F\x3 \x3 \x3 \x3 \x3!\x3!\x3\"\x3\"\x3#\x3#\x3#\a"+
		"#\x42E\n#\f#\xE#\x431\v#\x3$\x3$\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3"+
		"%\x5%\x43F\n%\x3&\x3&\x3&\x3&\x5&\x445\n&\x3&\x3&\x5&\x449\n&\x3&\x5&"+
		"\x44C\n&\x3\'\x3\'\x5\'\x450\n\'\x3(\x3(\x3(\x3(\x3(\x5(\x457\n(\x3(\x3"+
		"(\x5(\x45B\n(\x3)\x3)\x3)\a)\x460\n)\f)\xE)\x463\v)\x3*\x3*\x3*\x3*\x3"+
		"+\x3+\x5+\x46B\n+\x3,\x3,\x3,\x5,\x470\n,\x3,\x3,\x3-\x3-\x3-\a-\x477"+
		"\n-\f-\xE-\x47A\v-\x3.\x3.\x3.\x3.\x3.\x5.\x481\n.\x3/\x3/\x3/\x3/\x3"+
		"/\x3/\x3/\x3/\x3/\x5/\x48C\n/\x3/\x5/\x48F\n/\x3/\x3/\x3/\x5/\x494\n/"+
		"\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x31\x3\x31\x3\x31\x3\x32"+
		"\x3\x32\x3\x32\x3\x32\x3\x32\x5\x32\x4A4\n\x32\x3\x32\x3\x32\x5\x32\x4A8"+
		"\n\x32\x3\x33\x3\x33\x3\x33\a\x33\x4AD\n\x33\f\x33\xE\x33\x4B0\v\x33\x3"+
		"\x34\x3\x34\x3\x34\x3\x34\x3\x34\x5\x34\x4B7\n\x34\x3\x35\x3\x35\x3\x35"+
		"\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x5\x35\x4C3\n\x35\x3"+
		"\x36\x3\x36\x5\x36\x4C7\n\x36\x3\x36\x3\x36\x3\x36\x5\x36\x4CC\n\x36\x5"+
		"\x36\x4CE\n\x36\x3\x36\x3\x36\x3\x36\x5\x36\x4D3\n\x36\a\x36\x4D5\n\x36"+
		"\f\x36\xE\x36\x4D8\v\x36\x3\x37\x3\x37\x5\x37\x4DC\n\x37\x3\x37\x3\x37"+
		"\x3\x38\x3\x38\a\x38\x4E2\n\x38\f\x38\xE\x38\x4E5\v\x38\x3\x39\x3\x39"+
		"\x3\x39\x3\x39\x3\x39\x3:\x3:\x3:\x3:\x3:\x3;\x3;\x3;\x3;\x3;\x3<\x3<"+
		"\x3<\x3<\x3<\x3<\x3<\x3<\x3<\x3<\x3<\x3<\x3<\x5<\x503\n<\x3=\x3=\x3=\x3"+
		"=\x3=\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>"+
		"\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3"+
		">\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>"+
		"\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3"+
		">\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x5>\x557\n>\x3?\x3?\x3?\x3@\x3@\x3@"+
		"\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42"+
		"\x3\x42\x3\x42\a\x42\x56B\n\x42\f\x42\xE\x42\x56E\v\x42\x3\x43\x3\x43"+
		"\x3\x43\x3\x43\x3\x43\a\x43\x575\n\x43\f\x43\xE\x43\x578\v\x43\x3\x44"+
		"\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\a\x44\x580\n\x44\f\x44\xE\x44\x583"+
		"\v\x44\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45"+
		"\x3\x45\x3\x45\x3\x45\x3\x45\a\x45\x592\n\x45\f\x45\xE\x45\x595\v\x45"+
		"\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\a\x46\x59C\n\x46\f\x46\xE\x46\x59F"+
		"\v\x46\x3\x46\x3\x46\x3\x46\x3G\x3G\x3H\x3H\x5H\x5A8\nH\x3I\x3I\x3J\x3"+
		"J\x3J\x3J\x3J\aJ\x5B1\nJ\fJ\xEJ\x5B4\vJ\x3K\x3K\x3K\aK\x5B9\nK\fK\xEK"+
		"\x5BC\vK\x3L\x3L\x3L\aL\x5C1\nL\fL\xEL\x5C4\vL\x3M\x3M\x3M\aM\x5C9\nM"+
		"\fM\xEM\x5CC\vM\x3N\x3N\x3N\aN\x5D1\nN\fN\xEN\x5D4\vN\x3O\x3O\x3O\aO\x5D9"+
		"\nO\fO\xEO\x5DC\vO\x3P\x3P\x3P\x5P\x5E1\nP\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x5"+
		"Q\x5E9\nQ\x3R\x3R\x3R\x3R\x3S\x3S\x5S\x5F1\nS\x3S\x3S\x3T\x3T\x3T\x3T"+
		"\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x5T\x600\nT\x3U\x3U\x5U\x604\nU\x3U\x3U\x3"+
		"V\x3V\x3V\aV\x60B\nV\fV\xEV\x60E\vV\x3W\x5W\x611\nW\x3W\x3W\x3W\x3X\x3"+
		"X\x3Y\x3Y\x5Y\x61A\nY\x3Y\x3Y\x5Y\x61E\nY\x3Z\x3Z\x3Z\aZ\x623\nZ\fZ\xE"+
		"Z\x626\vZ\x3[\x3[\x3\\\x3\\\x5\\\x62C\n\\\x3]\x3]\x3]\x3^\x3^\x5^\x633"+
		"\n^\x3^\x3^\x3^\x3^\x3_\x5_\x63A\n_\x3_\x3_\x5_\x63E\n_\x3`\x3`\a`\x642"+
		"\n`\f`\xE`\x645\v`\x3\x61\x3\x61\x3\x61\x3\x61\x3\x61\x5\x61\x64C\n\x61"+
		"\x3\x62\x3\x62\x3\x62\x3\x62\x3\x62\x3\x63\x3\x63\x3\x63\x3\x64\x3\x64"+
		"\x5\x64\x658\n\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3"+
		"\x64\x3\x65\x3\x65\x5\x65\x664\n\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65"+
		"\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x66\x3\x66\x5\x66\x672\n\x66\x3"+
		"\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x5"+
		"\x66\x67E\n\x66\x3g\x3g\x3g\x3h\x3h\x3h\ah\x686\nh\fh\xEh\x689\vh\x3i"+
		"\x3i\x5i\x68D\ni\x3j\x3j\x5j\x691\nj\x3k\x3k\x5k\x695\nk\x3l\x3l\x3l\x3"+
		"m\x3m\x3m\x3m\x3m\x3n\x3n\x3n\x3n\x3o\x3o\x3o\x3o\x3p\x3p\x3p\x3p\x3p"+
		"\x3p\x3p\x3p\x3p\x3p\x3p\x5p\x6B2\np\x3q\x3q\x5q\x6B6\nq\x3r\x3r\x3r\x5"+
		"r\x6BB\nr\x3s\x3s\x3t\x3t\x3u\x3u\x3u\x5u\x6C4\nu\x3v\x3v\x5v\x6C8\nv"+
		"\x3w\x3w\x3w\x3w\x3w\x3w\x3w\x3w\x3w\x3w\x3w\x3w\x5w\x6D6\nw\x3x\x3x\x5"+
		"x\x6DA\nx\x3x\x3x\x3y\x6y\x6DF\ny\ry\xEy\x6E0\x3z\x3z\x3{\x3{\x3{\x3{"+
		"\x3|\x3|\x3|\x3|\x3|\x3|\x5|\x6EF\n|\x3}\x3}\x3}\x3~\x3~\x3\x7F\x3\x7F"+
		"\x3\x7F\a\x7F\x6F9\n\x7F\f\x7F\xE\x7F\x6FC\v\x7F\x3\x80\x3\x80\x3\x80"+
		"\x5\x80\x701\n\x80\x3\x81\x3\x81\x3\x81\x5\x81\x706\n\x81\x3\x82\x3\x82"+
		"\x3\x82\x3\x82\x3\x83\x3\x83\x3\x83\x3\x84\x3\x84\x3\x85\x3\x85\x5\x85"+
		"\x713\n\x85\x3\x86\x3\x86\x5\x86\x717\n\x86\x3\x87\x3\x87\x3\x87\x3\x87"+
		"\x3\x87\x3\x87\x3\x87\x5\x87\x720\n\x87\x3\x88\x3\x88\x3\x88\x3\x88\x3"+
		"\x88\x3\x88\x3\x89\x3\x89\x5\x89\x72A\n\x89\x3\x89\x3\x89\x3\x8A\x3\x8A"+
		"\a\x8A\x730\n\x8A\f\x8A\xE\x8A\x733\v\x8A\x3\x8B\x3\x8B\x3\x8B\x3\x8C"+
		"\x3\x8C\a\x8C\x73A\n\x8C\f\x8C\xE\x8C\x73D\v\x8C\x3\x8D\x3\x8D\x3\x8D"+
		"\x3\x8D\x3\x8D\x3\x8D\x5\x8D\x745\n\x8D\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x5"+
		"\x8E\x74B\n\x8E\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x90\x3\x90"+
		"\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90\x3\x91\x3\x91\x3\x91\x5\x91"+
		"\x75E\n\x91\x3\x91\x3\x91\x5\x91\x762\n\x91\x3\x91\x3\x91\x5\x91\x766"+
		"\n\x91\x3\x91\x3\x91\x3\x91\x3\x92\x3\x92\x5\x92\x76D\n\x92\x3\x93\x3"+
		"\x93\x3\x94\x3\x94\x3\x95\x3\x95\x3\x95\a\x95\x776\n\x95\f\x95\xE\x95"+
		"\x779\v\x95\x3\x96\x3\x96\x3\x96\x3\x96\x3\x96\x3\x96\x3\x96\x3\x96\x3"+
		"\x96\x3\x97\x3\x97\x3\x97\x3\x97\x3\x97\x5\x97\x789\n\x97\x3\x98\x3\x98"+
		"\x3\x98\x3\x99\x3\x99\x3\x99\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A"+
		"\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x5\x9A\x79D\n\x9A\x3\x9B\x3"+
		"\x9B\x5\x9B\x7A1\n\x9B\x3\x9B\x3\x9B\x3\x9C\x3\x9C\x5\x9C\x7A7\n\x9C\x3"+
		"\x9C\x3\x9C\x3\x9D\x3\x9D\x3\x9D\x5\x9D\x7AE\n\x9D\x3\x9D\x5\x9D\x7B1"+
		"\n\x9D\x3\x9E\x3\x9E\x5\x9E\x7B5\n\x9E\x3\x9E\x5\x9E\x7B8\n\x9E\x3\x9F"+
		"\x3\x9F\a\x9F\x7BC\n\x9F\f\x9F\xE\x9F\x7BF\v\x9F\x3\xA0\x3\xA0\x3\xA0"+
		"\x3\xA0\x5\xA0\x7C5\n\xA0\x3\xA0\x3\xA0\x3\xA0\x3\xA1\x3\xA1\x3\xA1\x3"+
		"\xA2\x3\xA2\x3\xA2\x3\xA3\x3\xA3\x3\xA3\x3\xA4\x3\xA4\x3\xA4\x3\xA5\x3"+
		"\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA6\x3\xA6\x3\xA6\x3\xA6\x3\xA6\x3"+
		"\xA6\x3\xA7\x3\xA7\x5\xA7\x7E4\n\xA7\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8"+
		"\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x5\xA8\x7EF\n\xA8\x3\xA9\x5\xA9\x7F2\n\xA9"+
		"\x3\xA9\x5\xA9\x7F5\n\xA9\x3\xA9\x5\xA9\x7F8\n\xA9\x3\xA9\a\xA9\x7FB\n"+
		"\xA9\f\xA9\xE\xA9\x7FE\v\xA9\x3\xA9\x5\xA9\x801\n\xA9\x3\xA9\x3\xA9\x3"+
		"\xAA\x3\xAA\x3\xAA\x3\xAA\x5\xAA\x809\n\xAA\x3\xAB\x3\xAB\x3\xAB\a\xAB"+
		"\x80E\n\xAB\f\xAB\xE\xAB\x811\v\xAB\x3\xAC\x3\xAC\x5\xAC\x815\n\xAC\x3"+
		"\xAC\x5\xAC\x818\n\xAC\x3\xAC\x5\xAC\x81B\n\xAC\x3\xAC\x3\xAC\x3\xAD\x6"+
		"\xAD\x820\n\xAD\r\xAD\xE\xAD\x821\x3\xAE\x3\xAE\x3\xAE\x3\xAE\x3\xAE\x3"+
		"\xAF\x6\xAF\x82A\n\xAF\r\xAF\xE\xAF\x82B\x3\xB0\x3\xB0\x5\xB0\x830\n\xB0"+
		"\x3\xB1\x3\xB1\x3\xB1\x3\xB1\x3\xB1\x3\xB1\x3\xB2\x3\xB2\x3\xB2\x3\xB2"+
		"\x3\xB3\x6\xB3\x83D\n\xB3\r\xB3\xE\xB3\x83E\x3\xB4\x3\xB4\x5\xB4\x843"+
		"\n\xB4\x3\xB5\x5\xB5\x846\n\xB5\x3\xB5\x5\xB5\x849\n\xB5\x3\xB5\x3\xB5"+
		"\x3\xB5\x3\xB5\x3\xB5\x5\xB5\x850\n\xB5\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x3"+
		"\xB6\x3\xB7\x5\xB7\x858\n\xB7\x3\xB7\x5\xB7\x85B\n\xB7\x3\xB7\x5\xB7\x85E"+
		"\n\xB7\x3\xB7\x3\xB7\x3\xB7\x5\xB7\x863\n\xB7\x3\xB7\x5\xB7\x866\n\xB7"+
		"\x3\xB7\x5\xB7\x869\n\xB7\x3\xB7\x3\xB7\x5\xB7\x86D\n\xB7\x3\xB8\x3\xB8"+
		"\a\xB8\x871\n\xB8\f\xB8\xE\xB8\x874\v\xB8\x3\xB9\x3\xB9\x3\xB9\x3\xB9"+
		"\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x5\xB9\x87F\n\xB9\x3\xBA\x3\xBA\x3"+
		"\xBA\x3\xBA\x3\xBB\x5\xBB\x886\n\xBB\x3\xBB\x3\xBB\x3\xBB\x5\xBB\x88B"+
		"\n\xBB\x3\xBB\a\xBB\x88E\n\xBB\f\xBB\xE\xBB\x891\v\xBB\x3\xBC\x3\xBC\x3"+
		"\xBD\x3\xBD\x3\xBD\x3\xBD\a\xBD\x899\n\xBD\f\xBD\xE\xBD\x89C\v\xBD\x3"+
		"\xBE\x3\xBE\x3\xBE\a\xBE\x8A1\n\xBE\f\xBE\xE\xBE\x8A4\v\xBE\x3\xBF\x3"+
		"\xBF\a\xBF\x8A8\n\xBF\f\xBF\xE\xBF\x8AB\v\xBF\x3\xC0\x3\xC0\x3\xC0\x3"+
		"\xC0\x3\xC0\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x5\xC1\x8B6\n\xC1\x3\xC1\x3\xC1"+
		"\x5\xC1\x8BA\n\xC1\x5\xC1\x8BC\n\xC1\x3\xC2\x3\xC2\x3\xC2\x5\xC2\x8C1"+
		"\n\xC2\x3\xC3\x3\xC3\x3\xC3\a\xC3\x8C6\n\xC3\f\xC3\xE\xC3\x8C9\v\xC3\x3"+
		"\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC5\x3\xC5\x5\xC5\x8D1\n\xC5\x3\xC5\x3\xC5"+
		"\x3\xC6\x6\xC6\x8D6\n\xC6\r\xC6\xE\xC6\x8D7\x3\xC7\x5\xC7\x8DB\n\xC7\x3"+
		"\xC7\x5\xC7\x8DE\n\xC7\x3\xC7\x3\xC7\x3\xC7\x3\xC7\x3\xC7\x3\xC7\x3\xC7"+
		"\x5\xC7\x8E7\n\xC7\x3\xC7\x5\xC7\x8EA\n\xC7\x3\xC8\x6\xC8\x8ED\n\xC8\r"+
		"\xC8\xE\xC8\x8EE\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x3\xC9"+
		"\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x5\xC9\x900\n\xC9\x3"+
		"\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3"+
		"\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x5\xCA\x911\n\xCA\x3\xCB\x3\xCB\x3\xCB"+
		"\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x5\xCB\x91D\n\xCB\x3"+
		"\xCC\x3\xCC\x3\xCC\a\xCC\x922\n\xCC\f\xCC\xE\xCC\x925\v\xCC\x3\xCD\x3"+
		"\xCD\x3\xCD\x3\xCD\x3\xCE\x3\xCE\x3\xCE\a\xCE\x92E\n\xCE\f\xCE\xE\xCE"+
		"\x931\v\xCE\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x5\xCF\x938\n\xCF\x3\xD0"+
		"\x3\xD0\x5\xD0\x93C\n\xD0\x3\xD1\x3\xD1\x3\xD1\x3\xD2\x5\xD2\x942\n\xD2"+
		"\x3\xD2\x5\xD2\x945\n\xD2\x3\xD2\x5\xD2\x948\n\xD2\x3\xD2\x3\xD2\x3\xD2"+
		"\x5\xD2\x94D\n\xD2\x3\xD2\x3\xD2\x5\xD2\x951\n\xD2\x3\xD2\x3\xD2\x5\xD2"+
		"\x955\n\xD2\x3\xD3\x6\xD3\x958\n\xD3\r\xD3\xE\xD3\x959\x3\xD4\x3\xD4\x3"+
		"\xD4\x3\xD4\x3\xD4\x3\xD4\x3\xD4\x3\xD4\x3\xD4\x3\xD4\x3\xD4\x3\xD4\x5"+
		"\xD4\x968\n\xD4\x3\xD5\x3\xD5\x5\xD5\x96C\n\xD5\x3\xD6\x3\xD6\x3\xD7\x3"+
		"\xD7\x5\xD7\x972\n\xD7\x3\xD8\x3\xD8\x3\xD8\x3\xD8\x5\xD8\x978\n\xD8\x5"+
		"\xD8\x97A\n\xD8\x3\xD9\x3\xD9\x3\xD9\a\xD9\x97F\n\xD9\f\xD9\xE\xD9\x982"+
		"\v\xD9\x3\xDA\x5\xDA\x985\n\xDA\x3\xDA\x5\xDA\x988\n\xDA\x3\xDA\x3\xDA"+
		"\x3\xDA\x5\xDA\x98D\n\xDA\x3\xDA\x5\xDA\x990\n\xDA\x3\xDB\x3\xDB\x3\xDB"+
		"\x3\xDC\x3\xDC\x3\xDD\x5\xDD\x998\n\xDD\x3\xDD\x3\xDD\x3\xDD\x3\xDD\x3"+
		"\xDE\x5\xDE\x99F\n\xDE\x3\xDE\x5\xDE\x9A2\n\xDE\x3\xDE\x3\xDE\x3\xDE\x3"+
		"\xDE\x3\xDE\x3\xDE\x3\xDF\x6\xDF\x9AB\n\xDF\r\xDF\xE\xDF\x9AC\x3\xE0\x3"+
		"\xE0\x3\xE0\x3\xE0\x3\xE0\x3\xE0\x3\xE0\x3\xE0\x3\xE0\x3\xE0\x3\xE0\x3"+
		"\xE0\x5\xE0\x9BB\n\xE0\x3\xE1\x5\xE1\x9BE\n\xE1\x3\xE1\x5\xE1\x9C1\n\xE1"+
		"\x3\xE1\x3\xE1\x3\xE1\x5\xE1\x9C6\n\xE1\x3\xE1\x3\xE1\x3\xE1\x5\xE1\x9CB"+
		"\n\xE1\x5\xE1\x9CD\n\xE1\x3\xE2\x5\xE2\x9D0\n\xE2\x3\xE2\x5\xE2\x9D3\n"+
		"\xE2\x3\xE2\x3\xE2\x3\xE2\x3\xE3\x5\xE3\x9D9\n\xE3\x3\xE3\x5\xE3\x9DC"+
		"\n\xE3\x3\xE3\x3\xE3\x3\xE3\x3\xE4\x3\xE4\x3\xE4\x3\xE4\x3\xE4\x3\xE4"+
		"\x3\xE4\x5\xE4\x9E8\n\xE4\x3\xE5\x3\xE5\x5\xE5\x9EC\n\xE5\x3\xE6\x5\xE6"+
		"\x9EF\n\xE6\x3\xE6\x5\xE6\x9F2\n\xE6\x3\xE6\x3\xE6\x3\xE6\x3\xE6\x3\xE6"+
		"\x3\xE6\x3\xE6\x3\xE6\x3\xE6\x3\xE6\x5\xE6\x9FE\n\xE6\x3\xE7\x3\xE7\a"+
		"\xE7\xA02\n\xE7\f\xE7\xE\xE7\xA05\v\xE7\x3\xE8\x3\xE8\x3\xE8\x3\xE8\x3"+
		"\xE8\x3\xE8\x3\xE8\x3\xE8\x3\xE8\x3\xE8\x3\xE8\x3\xE8\x5\xE8\xA13\n\xE8"+
		"\x3\xE9\x5\xE9\xA16\n\xE9\x3\xE9\x3\xE9\x3\xE9\x3\xE9\x3\xE9\x3\xE9\x3"+
		"\xE9\x3\xE9\x5\xE9\xA20\n\xE9\x3\xEA\x5\xEA\xA23\n\xEA\x3\xEA\x3\xEA\x3"+
		"\xEA\x3\xEB\x5\xEB\xA29\n\xEB\x3\xEB\x3\xEB\x3\xEB\x3\xEC\x5\xEC\xA2F"+
		"\n\xEC\x3\xEC\x5\xEC\xA32\n\xEC\x3\xEC\x3\xEC\x3\xEC\x3\xEC\x3\xEC\x3"+
		"\xED\x3\xED\a\xED\xA3B\n\xED\f\xED\xE\xED\xA3E\v\xED\x3\xEE\x3\xEE\x3"+
		"\xEE\x3\xEE\x3\xEE\x3\xEE\x3\xEE\x3\xEE\x3\xEE\x3\xEE\x3\xEE\x5\xEE\xA4B"+
		"\n\xEE\x3\xEF\x3\xEF\x3\xEF\x3\xEF\x5\xEF\xA51\n\xEF\x3\xEF\x3\xEF\x3"+
		"\xEF\x3\xEF\x3\xEF\x3\xF0\x5\xF0\xA59\n\xF0\x3\xF0\x3\xF0\x3\xF0\x3\xF0"+
		"\x3\xF1\x3\xF1\a\xF1\xA61\n\xF1\f\xF1\xE\xF1\xA64\v\xF1\x3\xF2\x3\xF2"+
		"\x3\xF2\x3\xF2\x5\xF2\xA6A\n\xF2\x3\xF3\x3\xF3\x3\xF3\x5\xF3\xA6F\n\xF3"+
		"\x3\xF4\x3\xF4\x3\xF4\x3\xF4\x3\xF4\x3\xF4\x3\xF4\x3\xF4\x3\xF5\x3\xF5"+
		"\x3\xF6\x3\xF6\x3\xF6\x3\xF6\x3\xF6\x3\xF6\x3\xF6\x3\xF6\x3\xF6\x3\xF6"+
		"\x3\xF6\x3\xF7\x3\xF7\x3\xF7\x3\xF7\x3\xF7\x3\xF7\x3\xF7\x3\xF7\x3\xF7"+
		"\x3\xF7\x3\xF7\x3\xF7\x3\xF7\x3\xF7\x3\xF7\x3\xF7\x5\xF7\xA96\n\xF7\x3"+
		"\xF8\x3\xF8\x3\xF8\x3\xF8\x3\xF8\x3\xF8\x3\xF8\x3\xF8\x3\xF8\x3\xF8\x3"+
		"\xF8\x3\xF8\x3\xF8\x3\xF8\x3\xF8\x3\xF8\x3\xF8\x3\xF8\x3\xF8\x3\xF8\x3"+
		"\xF8\x3\xF8\x5\xF8\xAAE\n\xF8\x3\xF9\x3\xF9\x3\xF9\x3\xF9\x3\xF9\x3\xF9"+
		"\x3\xF9\x3\xF9\x3\xF9\x3\xF9\x3\xF9\x3\xF9\x3\xF9\x3\xF9\x3\xF9\x3\xF9"+
		"\x5\xF9\xAC0\n\xF9\x3\xFA\x3\xFA\x5\xFA\xAC4\n\xFA\x3\xFB\x5\xFB\xAC7"+
		"\n\xFB\x3\xFB\x5\xFB\xACA\n\xFB\x3\xFB\x3\xFB\x3\xFB\x3\xFC\x6\xFC\xAD0"+
		"\n\xFC\r\xFC\xE\xFC\xAD1\x3\xFD\x3\xFD\x3\xFD\x3\xFD\x3\xFD\x3\xFD\x5"+
		"\xFD\xADA\n\xFD\x3\xFE\x3\xFE\x3\xFE\x5\xFE\xADF\n\xFE\x3\xFE\x3\xFE\x5"+
		"\xFE\xAE3\n\xFE\x3\xFF\x3\xFF\x3\xFF\x3\xFF\x5\xFF\xAE9\n\xFF\x3\xFF\x3"+
		"\xFF\x3\xFF\x3\xFF\x3\xFF\x5\xFF\xAF0\n\xFF\x3\xFF\x5\xFF\xAF3\n\xFF\x3"+
		"\x100\x3\x100\x5\x100\xAF7\n\x100\x3\x101\x5\x101\xAFA\n\x101\x3\x101"+
		"\x3\x101\x3\x101\x3\x101\x3\x101\x3\x101\x3\x102\x3\x102\x3\x103\x3\x103"+
		"\x5\x103\xB06\n\x103\x3\x104\x3\x104\x3\x105\x3\x105\x5\x105\xB0C\n\x105"+
		"\x3\x106\x3\x106\x5\x106\xB10\n\x106\x3\x107\x5\x107\xB13\n\x107\x3\x107"+
		"\x5\x107\xB16\n\x107\x3\x107\x5\x107\xB19\n\x107\x3\x107\x3\x107\x3\x107"+
		"\x5\x107\xB1E\n\x107\x3\x107\x5\x107\xB21\n\x107\x3\x107\x5\x107\xB24"+
		"\n\x107\x3\x107\x3\x107\x5\x107\xB28\n\x107\x3\x108\x3\x108\a\x108\xB2C"+
		"\n\x108\f\x108\xE\x108\xB2F\v\x108\x3\x109\x3\x109\x3\x109\x3\x109\x3"+
		"\x109\x3\x109\x5\x109\xB37\n\x109\x3\x10A\x3\x10A\x3\x10A\x3\x10B\x3\x10B"+
		"\x5\x10B\xB3E\n\x10B\x3\x10B\x3\x10B\x3\x10C\x3\x10C\a\x10C\xB44\n\x10C"+
		"\f\x10C\xE\x10C\xB47\v\x10C\x3\x10D\x5\x10D\xB4A\n\x10D\x3\x10D\x5\x10D"+
		"\xB4D\n\x10D\x3\x10D\x3\x10D\x3\x10D\x3\x10D\x3\x10D\x3\x10D\x5\x10D\xB55"+
		"\n\x10D\x3\x10E\x3\x10E\a\x10E\xB59\n\x10E\f\x10E\xE\x10E\xB5C\v\x10E"+
		"\x3\x10E\x6\x10E\xB5F\n\x10E\r\x10E\xE\x10E\xB60\x3\x10F\x3\x10F\x3\x10F"+
		"\x3\x10F\a\x10F\xB67\n\x10F\f\x10F\xE\x10F\xB6A\v\x10F\x3\x110\x6\x110"+
		"\xB6D\n\x110\r\x110\xE\x110\xB6E\x3\x111\x3\x111\x5\x111\xB73\n\x111\x3"+
		"\x111\x3\x111\x3\x112\x3\x112\a\x112\xB79\n\x112\f\x112\xE\x112\xB7C\v"+
		"\x112\x3\x113\x3\x113\x3\x113\x3\x113\x3\x113\x5\x113\xB83\n\x113\x3\x113"+
		"\x3\x113\x5\x113\xB87\n\x113\x3\x114\x3\x114\x3\x114\a\x114\xB8C\n\x114"+
		"\f\x114\xE\x114\xB8F\v\x114\x3\x115\x5\x115\xB92\n\x115\x3\x115\x5\x115"+
		"\xB95\n\x115\x3\x115\x5\x115\xB98\n\x115\x3\x115\x3\x115\x3\x115\x5\x115"+
		"\xB9D\n\x115\x3\x115\x5\x115\xBA0\n\x115\x3\x115\x5\x115\xBA3\n\x115\x3"+
		"\x115\x3\x115\x5\x115\xBA7\n\x115\x3\x116\x3\x116\a\x116\xBAB\n\x116\f"+
		"\x116\xE\x116\xBAE\v\x116\x3\x117\x3\x117\x3\x117\x3\x117\x3\x117\x3\x117"+
		"\x5\x117\xBB6\n\x117\x3\x118\x3\x118\x3\x118\x3\x118\x3\x119\x5\x119\xBBD"+
		"\n\x119\x3\x119\x5\x119\xBC0\n\x119\x3\x119\x3\x119\x3\x119\x5\x119\xBC5"+
		"\n\x119\x3\x119\x5\x119\xBC8\n\x119\x3\x119\a\x119\xBCB\n\x119\f\x119"+
		"\xE\x119\xBCE\v\x119\x3\x11A\x3\x11A\x3\x11B\x3\x11B\x3\x11B\x3\x11C\x3"+
		"\x11C\x5\x11C\xBD7\n\x11C\x3\x11C\x3\x11C\x3\x11D\x6\x11D\xBDC\n\x11D"+
		"\r\x11D\xE\x11D\xBDD\x3\x11E\x5\x11E\xBE1\n\x11E\x3\x11E\x5\x11E\xBE4"+
		"\n\x11E\x3\x11E\x3\x11E\x3\x11E\x5\x11E\xBE9\n\x11E\x3\x11E\x3\x11E\x5"+
		"\x11E\xBED\n\x11E\x3\x11E\x3\x11E\x5\x11E\xBF1\n\x11E\x3\x11E\x3\x11E"+
		"\x3\x11E\x3\x11E\x3\x11E\x3\x11E\x3\x11E\x3\x11E\x3\x11E\x3\x11E\x3\x11E"+
		"\x3\x11E\x3\x11E\x3\x11E\x3\x11E\x5\x11E\xC02\n\x11E\x3\x11E\x3\x11E\x3"+
		"\x11E\x5\x11E\xC07\n\x11E\x3\x11E\x3\x11E\x5\x11E\xC0B\n\x11E\x3\x11E"+
		"\x3\x11E\x5\x11E\xC0F\n\x11E\x3\x11E\x3\x11E\x3\x11E\x3\x11E\x3\x11E\x3"+
		"\x11E\x3\x11E\x5\x11E\xC18\n\x11E\x3\x11F\x5\x11F\xC1B\n\x11F\x3\x11F"+
		"\x5\x11F\xC1E\n\x11F\x3\x11F\x3\x11F\x3\x11F\x5\x11F\xC23\n\x11F\x3\x11F"+
		"\x3\x11F\x5\x11F\xC27\n\x11F\x3\x11F\x3\x11F\x5\x11F\xC2B\n\x11F\x3\x11F"+
		"\x3\x11F\x3\x120\x5\x120\xC30\n\x120\x3\x120\x5\x120\xC33\n\x120\x3\x120"+
		"\x3\x120\x3\x120\x3\x120\x3\x120\x3\x120\x3\x121\x5\x121\xC3C\n\x121\x3"+
		"\x121\x3\x121\x3\x121\x5\x121\xC41\n\x121\x3\x121\x3\x121\x3\x121\x5\x121"+
		"\xC46\n\x121\x3\x121\x3\x121\x3\x121\x5\x121\xC4B\n\x121\x3\x121\x3\x121"+
		"\x3\x121\x5\x121\xC50\n\x121\x5\x121\xC52\n\x121\x3\x122\x5\x122\xC55"+
		"\n\x122\x3\x122\x5\x122\xC58\n\x122\x3\x122\x3\x122\x3\x122\x3\x122\x3"+
		"\x122\x3\x123\x5\x123\xC60\n\x123\x3\x123\x5\x123\xC63\n\x123\x3\x123"+
		"\x3\x123\x3\x123\x3\x123\x3\x123\x3\x123\x3\x123\x3\x123\x3\x123\x3\x124"+
		"\x5\x124\xC6F\n\x124\x3\x124\x5\x124\xC72\n\x124\x3\x124\x3\x124\x3\x124"+
		"\x5\x124\xC77\n\x124\x3\x124\x3\x124\x5\x124\xC7B\n\x124\x3\x125\x3\x125"+
		"\x3\x125\x3\x126\x3\x126\x3\x126\x3\x126\x3\x126\x5\x126\xC85\n\x126\x3"+
		"\x126\x3\x126\x5\x126\xC89\n\x126\x3\x127\x6\x127\xC8C\n\x127\r\x127\xE"+
		"\x127\xC8D\x3\x128\x3\x128\x3\x129\x3\x129\x3\x129\a\x129\xC95\n\x129"+
		"\f\x129\xE\x129\xC98\v\x129\x3\x12A\x5\x12A\xC9B\n\x12A\x3\x12A\x3\x12A"+
		"\x3\x12A\x5\x12A\xCA0\n\x12A\x3\x12B\x5\x12B\xCA3\n\x12B\x3\x12B\x5\x12B"+
		"\xCA6\n\x12B\x3\x12B\x3\x12B\x3\x12B\x3\x12B\x5\x12B\xCAC\n\x12B\x3\x12B"+
		"\x3\x12B\x5\x12B\xCB0\n\x12B\x3\x12B\x3\x12B\x5\x12B\xCB4\n\x12B\x3\x12B"+
		"\x3\x12B\x3\x12C\x3\x12C\a\x12C\xCBA\n\x12C\f\x12C\xE\x12C\xCBD\v\x12C"+
		"\x3\x12D\x3\x12D\x3\x12D\x3\x12D\x3\x12D\x3\x12D\x5\x12D\xCC5\n\x12D\x3"+
		"\x12E\x3\x12E\x3\x12F\x6\x12F\xCCA\n\x12F\r\x12F\xE\x12F\xCCB\x3\x130"+
		"\x3\x130\x3\x130\x3\x130\x5\x130\xCD2\n\x130\x3\x130\x3\x130\x3\x131\x3"+
		"\x131\x3\x131\x3\x132\x3\x132\x5\x132\xCDB\n\x132\x3\x133\x3\x133\x3\x134"+
		"\x6\x134\xCE0\n\x134\r\x134\xE\x134\xCE1\x3\x135\x3\x135\x5\x135\xCE6"+
		"\n\x135\x3\x135\x3\x135\x5\x135\xCEA\n\x135\x3\x135\x3\x135\x3\x136\x3"+
		"\x136\x3\x136\x3\x137\x3\x137\x5\x137\xCF3\n\x137\x3\x138\x3\x138\x3\x138"+
		"\a\x138\xCF8\n\x138\f\x138\xE\x138\xCFB\v\x138\x3\x139\x3\x139\x5\x139"+
		"\xCFF\n\x139\x3\x13A\x3\x13A\x3\x13B\x3\x13B\x5\x13B\xD05\n\x13B\x3\x13B"+
		"\x3\x13B\x3\x13C\x3\x13C\x3\x13C\a\x13C\xD0C\n\x13C\f\x13C\xE\x13C\xD0F"+
		"\v\x13C\x3\x13D\x3\x13D\x3\x13E\x3\x13E\x3\x13E\a\x13E\xD16\n\x13E\f\x13E"+
		"\xE\x13E\xD19\v\x13E\x3\x13F\x3\x13F\x3\x13F\x3\x13F\x3\x140\x3\x140\x3"+
		"\x141\x3\x141\x3\x142\x3\x142\x3\x143\x3\x143\x3\x144\x3\x144\x3\x145"+
		"\x3\x145\x3\x146\x3\x146\x3\x147\x3\x147\x3\x148\x3\x148\x3\x149\x3\x149"+
		"\x3\x14A\x3\x14A\x3\x14B\x3\x14B\x3\x14C\x5\x14C\xD38\n\x14C\x3\x14C\x5"+
		"\x14C\xD3B\n\x14C\x3\x14C\x5\x14C\xD3E\n\x14C\x3\x14C\x3\x14C\x5\x14C"+
		"\xD42\n\x14C\x3\x14C\x3\x14C\x3\x14C\x3\x14C\x3\x14C\x3\x14C\x3\x14D\x5"+
		"\x14D\xD4B\n\x14D\x3\x14D\x3\x14D\x3\x14D\x3\x14D\x3\x14D\x3\x14D\x3\x14D"+
		"\x3\x14D\x3\x14D\x3\x14D\x3\x14D\x3\x14D\x3\x14D\x3\x14D\x3\x14D\x3\x14D"+
		"\x3\x14D\x3\x14D\x3\x14D\x3\x14D\x3\x14D\x5\x14D\xD62\n\x14D\x3\x14E\x3"+
		"\x14E\x5\x14E\xD66\n\x14E\x3\x14F\x3\x14F\x3\x14F\x3\x150\x3\x150\x3\x151"+
		"\x3\x151\x3\x151\a\x151\xD70\n\x151\f\x151\xE\x151\xD73\v\x151\x3\x151"+
		"\x3\x151\x3\x151\x3\x151\x3\x151\a\x151\xD7A\n\x151\f\x151\xE\x151\xD7D"+
		"\v\x151\x3\x151\x3\x151\x3\x151\x3\x151\x5\x151\xD83\n\x151\x3\x152\x3"+
		"\x152\x3\x153\x3\x153\x3\x154\x3\x154\x5\x154\xD8B\n\x154\x3\x155\x3\x155"+
		"\x3\x155\x3\x156\x3\x156\x3\x156\x3\x157\x3\x157\x3\x157\x3\x157\x3\x157"+
		"\x3\x158\x3\x158\x3\x158\x3\x158\x3\x158\x3\x158\x3\x158\x3\x159\x3\x159"+
		"\x3\x159\a\x159\xDA2\n\x159\f\x159\xE\x159\xDA5\v\x159\x3\x15A\x3\x15A"+
		"\x3\x15A\x3\x15A\x3\x15B\x3\x15B\x3\x15B\x5\x15B\xDAE\n\x15B\x3\x15C\x3"+
		"\x15C\x3\x15D\x5\x15D\xDB3\n\x15D\x3\x15D\x5\x15D\xDB6\n\x15D\x3\x15D"+
		"\x3\x15D\x3\x15D\x3\x15D\x3\x15D\x3\x15E\x6\x15E\xDBE\n\x15E\r\x15E\xE"+
		"\x15E\xDBF\x3\x15F\x3\x15F\x3\x160\x3\x160\x3\x161\x6\x161\xDC7\n\x161"+
		"\r\x161\xE\x161\xDC8\x3\x162\x3\x162\x3\x162\x3\x162\x3\x162\x3\x163\x3"+
		"\x163\x3\x164\x3\x164\x3\x164\x3\x164\x3\x164\x3\x164\x3\x165\x3\x165"+
		"\x3\x166\x3\x166\x3\x167\x3\x167\x3\x168\x3\x168\x3\x169\x3\x169\x3\x16A"+
		"\x3\x16A\x3\x16B\x3\x16B\x3\x16C\x3\x16C\x3\x16D\x3\x16D\x3\x16E\x3\x16E"+
		"\x3\x16F\x3\x16F\x3\x170\x3\x170\x3\x171\x3\x171\x3\x172\x3\x172\x3\x173"+
		"\x3\x173\x3\x174\x3\x174\x3\x175\x3\x175\x3\x176\x3\x176\x3\x177\x3\x177"+
		"\x3\x178\x3\x178\x3\x179\x3\x179\x3\x17A\x3\x17A\x3\x17B\x3\x17B\x3\x17B"+
		"\x3\x17B\x3\x17C\x3\x17C\x3\x17C\x3\x17C\x3\x17D\x3\x17D\x3\x17D\x3\x17D"+
		"\x3\x17E\x3\x17E\x3\x17E\x3\x17E\x3\x17E\x3\x17E\x5\x17E\xE16\n\x17E\x3"+
		"\x17F\x3\x17F\x3\x180\x3\x180\x3\x181\x3\x181\x3\x181\x5\x181\xE1F\n\x181"+
		"\x3\x181\x5\x181\xE22\n\x181\x3\x181\x5\x181\xE25\n\x181\x3\x181\x3\x181"+
		"\x5\x181\xE29\n\x181\x3\x182\x3\x182\x3\x182\x5\x182\xE2E\n\x182\x3\x182"+
		"\x5\x182\xE31\n\x182\x3\x182\x5\x182\xE34\n\x182\x3\x182\x3\x182\x5\x182"+
		"\xE38\n\x182\x3\x183\x3\x183\x3\x183\x5\x183\xE3D\n\x183\x3\x183\x5\x183"+
		"\xE40\n\x183\x3\x183\x5\x183\xE43\n\x183\x3\x183\x3\x183\x5\x183\xE47"+
		"\n\x183\x3\x184\x3\x184\x3\x184\x5\x184\xE4C\n\x184\x3\x184\x3\x184\x5"+
		"\x184\xE50\n\x184\x3\x185\x3\x185\x3\x185\x3\x185\x5\x185\xE56\n\x185"+
		"\x3\x185\x3\x185\x5\x185\xE5A\n\x185\x3\x185\x3\x185\x5\x185\xE5E\n\x185"+
		"\x3\x185\x3\x185\x3\x186\x3\x186\x3\x186\x3\x186\x3\x186\x3\x186\x3\x186"+
		"\x3\x186\x3\x186\x3\x186\x5\x186\xE6C\n\x186\x3\x187\x3\x187\x3\x187\x3"+
		"\x188\x3\x188\x3\x188\x3\x188\x3\x188\x3\x189\x3\x189\x3\x189\x3\x189"+
		"\x3\x189\x3\x18A\x3\x18A\x3\x18A\x3\x18A\x3\x18A\x3\x18A\x3\x18A\x3\x18A"+
		"\x3\x18B\x3\x18B\x3\x18B\x3\x18B\x3\x18B\x3\x18B\x3\x18C\x3\x18C\x3\x18C"+
		"\x5\x18C\xE8C\n\x18C\x3\x18C\x3\x18C\x5\x18C\xE90\n\x18C\x3\x18C\x3\x18C"+
		"\x3\x18D\x3\x18D\x5\x18D\xE96\n\x18D\x3\x18D\x3\x18D\x5\x18D\xE9A\n\x18D"+
		"\x3\x18D\x3\x18D\x5\x18D\xE9E\n\x18D\x3\x18D\x3\x18D\x3\x18E\x3\x18E\x3"+
		"\x18F\x3\x18F\x3\x18F\x3\x18F\x3\x18F\x5\x18F\xEA9\n\x18F\x3\x18F\x3\x18F"+
		"\x3\x18F\x3\x18F\a\x18F\xEAF\n\x18F\f\x18F\xE\x18F\xEB2\v\x18F\x3\x190"+
		"\x3\x190\x3\x190\x3\x190\x3\x190\x3\x190\x3\x190\x3\x190\x3\x190\x5\x190"+
		"\xEBD\n\x190\x3\x190\x3\x190\x3\x190\x3\x191\x3\x191\x5\x191\xEC4\n\x191"+
		"\x3\x191\x3\x191\x5\x191\xEC8\n\x191\x3\x191\x3\x191\x5\x191\xECC\n\x191"+
		"\x3\x191\x3\x191\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x193\x3\x193"+
		"\x3\x193\x3\x193\x3\x193\x3\x194\x3\x194\x3\x194\x3\x194\x3\x194\x3\x194"+
		"\x3\x194\x3\x194\x3\x195\x3\x195\x3\x195\x3\x195\x3\x196\x3\x196\x5\x196"+
		"\xEE8\n\x196\x3\x196\x3\x196\x3\x197\x3\x197\x5\x197\xEEE\n\x197\x3\x197"+
		"\x3\x197\x5\x197\xEF2\n\x197\x3\x197\x2\x2\x2\x198\x2\x2\x4\x2\x6\x2\b"+
		"\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E"+
		"\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2"+
		":\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2"+
		"X\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2j\x2l\x2n\x2p\x2r\x2t\x2"+
		"v\x2x\x2z\x2|\x2~\x2\x80\x2\x82\x2\x84\x2\x86\x2\x88\x2\x8A\x2\x8C\x2"+
		"\x8E\x2\x90\x2\x92\x2\x94\x2\x96\x2\x98\x2\x9A\x2\x9C\x2\x9E\x2\xA0\x2"+
		"\xA2\x2\xA4\x2\xA6\x2\xA8\x2\xAA\x2\xAC\x2\xAE\x2\xB0\x2\xB2\x2\xB4\x2"+
		"\xB6\x2\xB8\x2\xBA\x2\xBC\x2\xBE\x2\xC0\x2\xC2\x2\xC4\x2\xC6\x2\xC8\x2"+
		"\xCA\x2\xCC\x2\xCE\x2\xD0\x2\xD2\x2\xD4\x2\xD6\x2\xD8\x2\xDA\x2\xDC\x2"+
		"\xDE\x2\xE0\x2\xE2\x2\xE4\x2\xE6\x2\xE8\x2\xEA\x2\xEC\x2\xEE\x2\xF0\x2"+
		"\xF2\x2\xF4\x2\xF6\x2\xF8\x2\xFA\x2\xFC\x2\xFE\x2\x100\x2\x102\x2\x104"+
		"\x2\x106\x2\x108\x2\x10A\x2\x10C\x2\x10E\x2\x110\x2\x112\x2\x114\x2\x116"+
		"\x2\x118\x2\x11A\x2\x11C\x2\x11E\x2\x120\x2\x122\x2\x124\x2\x126\x2\x128"+
		"\x2\x12A\x2\x12C\x2\x12E\x2\x130\x2\x132\x2\x134\x2\x136\x2\x138\x2\x13A"+
		"\x2\x13C\x2\x13E\x2\x140\x2\x142\x2\x144\x2\x146\x2\x148\x2\x14A\x2\x14C"+
		"\x2\x14E\x2\x150\x2\x152\x2\x154\x2\x156\x2\x158\x2\x15A\x2\x15C\x2\x15E"+
		"\x2\x160\x2\x162\x2\x164\x2\x166\x2\x168\x2\x16A\x2\x16C\x2\x16E\x2\x170"+
		"\x2\x172\x2\x174\x2\x176\x2\x178\x2\x17A\x2\x17C\x2\x17E\x2\x180\x2\x182"+
		"\x2\x184\x2\x186\x2\x188\x2\x18A\x2\x18C\x2\x18E\x2\x190\x2\x192\x2\x194"+
		"\x2\x196\x2\x198\x2\x19A\x2\x19C\x2\x19E\x2\x1A0\x2\x1A2\x2\x1A4\x2\x1A6"+
		"\x2\x1A8\x2\x1AA\x2\x1AC\x2\x1AE\x2\x1B0\x2\x1B2\x2\x1B4\x2\x1B6\x2\x1B8"+
		"\x2\x1BA\x2\x1BC\x2\x1BE\x2\x1C0\x2\x1C2\x2\x1C4\x2\x1C6\x2\x1C8\x2\x1CA"+
		"\x2\x1CC\x2\x1CE\x2\x1D0\x2\x1D2\x2\x1D4\x2\x1D6\x2\x1D8\x2\x1DA\x2\x1DC"+
		"\x2\x1DE\x2\x1E0\x2\x1E2\x2\x1E4\x2\x1E6\x2\x1E8\x2\x1EA\x2\x1EC\x2\x1EE"+
		"\x2\x1F0\x2\x1F2\x2\x1F4\x2\x1F6\x2\x1F8\x2\x1FA\x2\x1FC\x2\x1FE\x2\x200"+
		"\x2\x202\x2\x204\x2\x206\x2\x208\x2\x20A\x2\x20C\x2\x20E\x2\x210\x2\x212"+
		"\x2\x214\x2\x216\x2\x218\x2\x21A\x2\x21C\x2\x21E\x2\x220\x2\x222\x2\x224"+
		"\x2\x226\x2\x228\x2\x22A\x2\x22C\x2\x22E\x2\x230\x2\x232\x2\x234\x2\x236"+
		"\x2\x238\x2\x23A\x2\x23C\x2\x23E\x2\x240\x2\x242\x2\x244\x2\x246\x2\x248"+
		"\x2\x24A\x2\x24C\x2\x24E\x2\x250\x2\x252\x2\x254\x2\x256\x2\x258\x2\x25A"+
		"\x2\x25C\x2\x25E\x2\x260\x2\x262\x2\x264\x2\x266\x2\x268\x2\x26A\x2\x26C"+
		"\x2\x26E\x2\x270\x2\x272\x2\x274\x2\x276\x2\x278\x2\x27A\x2\x27C\x2\x27E"+
		"\x2\x280\x2\x282\x2\x284\x2\x286\x2\x288\x2\x28A\x2\x28C\x2\x28E\x2\x290"+
		"\x2\x292\x2\x294\x2\x296\x2\x298\x2\x29A\x2\x29C\x2\x29E\x2\x2A0\x2\x2A2"+
		"\x2\x2A4\x2\x2A6\x2\x2A8\x2\x2AA\x2\x2AC\x2\x2AE\x2\x2B0\x2\x2B2\x2\x2B4"+
		"\x2\x2B6\x2\x2B8\x2\x2BA\x2\x2BC\x2\x2BE\x2\x2C0\x2\x2C2\x2\x2C4\x2\x2C6"+
		"\x2\x2C8\x2\x2CA\x2\x2CC\x2\x2CE\x2\x2D0\x2\x2D2\x2\x2D4\x2\x2D6\x2\x2D8"+
		"\x2\x2DA\x2\x2DC\x2\x2DE\x2\x2E0\x2\x2E2\x2\x2E4\x2\x2E6\x2\x2E8\x2\x2EA"+
		"\x2\x2EC\x2\x2EE\x2\x2F0\x2\x2F2\x2\x2F4\x2\x2F6\x2\x2F8\x2\x2FA\x2\x2FC"+
		"\x2\x2FE\x2\x300\x2\x302\x2\x304\x2\x306\x2\x308\x2\x30A\x2\x30C\x2\x30E"+
		"\x2\x310\x2\x312\x2\x314\x2\x316\x2\x318\x2\x31A\x2\x31C\x2\x31E\x2\x320"+
		"\x2\x322\x2\x324\x2\x326\x2\x328\x2\x32A\x2\x32C\x2\x2\x12\x13\x2\f\xE"+
		"\x10\x10\x14\x14  ##&&\x30\x31\x33\x33::<=\x44\x44\x46\x46JJPPTUkkmn\n"+
		"\x2\x15\x15\x18\x18\x37\x37??RRVV\x62\x63\x66\x66\x4\x2\"\"--\x4\x2\x80"+
		"\x80\x8B\x8B\x10\x2\x12\x12\x15\x15\x18\x18\x1D\x1D\"\"--\x37\x37??\x43"+
		"\x43RRVVZZ\x62\x63\x66\x66\x5\x2w}\x8A\x8B\x93\x94\x5\x2yy\x8B\x8B\x90"+
		"\x91\x4\x2GGOO\x5\x2GGOO]]\a\x2**__~\x7F\x86\x87\x8E\x8F\x4\x2\x36\x36"+
		"GG\x5\x2\x39\x39\x41\x41KM\x4\x2))\x65\x65\x6\x2\x39\x39\x41\x41KM\x65"+
		"\x65\x4\x2**__\x13\x2\v\v\xF\xF\x11\x13\x15\x1F!\"$%\'/\x32\x32\x34\x39"+
		";;>\x43\x45\x45GIKOQSVjll\x101C\x2\x32E\x3\x2\x2\x2\x4\x330\x3\x2\x2\x2"+
		"\x6\x332\x3\x2\x2\x2\b\x338\x3\x2\x2\x2\n\x345\x3\x2\x2\x2\f\x347\x3\x2"+
		"\x2\x2\xE\x354\x3\x2\x2\x2\x10\x358\x3\x2\x2\x2\x12\x35D\x3\x2\x2\x2\x14"+
		"\x35F\x3\x2\x2\x2\x16\x361\x3\x2\x2\x2\x18\x363\x3\x2\x2\x2\x1A\x366\x3"+
		"\x2\x2\x2\x1C\x3A5\x3\x2\x2\x2\x1E\x3AB\x3\x2\x2\x2 \x3AD\x3\x2\x2\x2"+
		"\"\x3AF\x3\x2\x2\x2$\x3B1\x3\x2\x2\x2&\x3B5\x3\x2\x2\x2(\x3BD\x3\x2\x2"+
		"\x2*\x3BF\x3\x2\x2\x2,\x3C1\x3\x2\x2\x2.\x3C3\x3\x2\x2\x2\x30\x3CC\x3"+
		"\x2\x2\x2\x32\x3D0\x3\x2\x2\x2\x34\x3D8\x3\x2\x2\x2\x36\x3DA\x3\x2\x2"+
		"\x2\x38\x419\x3\x2\x2\x2:\x41B\x3\x2\x2\x2<\x41F\x3\x2\x2\x2>\x422\x3"+
		"\x2\x2\x2@\x426\x3\x2\x2\x2\x42\x428\x3\x2\x2\x2\x44\x42A\x3\x2\x2\x2"+
		"\x46\x432\x3\x2\x2\x2H\x43E\x3\x2\x2\x2J\x440\x3\x2\x2\x2L\x44F\x3\x2"+
		"\x2\x2N\x45A\x3\x2\x2\x2P\x45C\x3\x2\x2\x2R\x464\x3\x2\x2\x2T\x46A\x3"+
		"\x2\x2\x2V\x46C\x3\x2\x2\x2X\x473\x3\x2\x2\x2Z\x480\x3\x2\x2\x2\\\x482"+
		"\x3\x2\x2\x2^\x495\x3\x2\x2\x2`\x49B\x3\x2\x2\x2\x62\x4A7\x3\x2\x2\x2"+
		"\x64\x4A9\x3\x2\x2\x2\x66\x4B6\x3\x2\x2\x2h\x4B8\x3\x2\x2\x2j\x4C4\x3"+
		"\x2\x2\x2l\x4D9\x3\x2\x2\x2n\x4DF\x3\x2\x2\x2p\x4E6\x3\x2\x2\x2r\x4EB"+
		"\x3\x2\x2\x2t\x4F0\x3\x2\x2\x2v\x502\x3\x2\x2\x2x\x504\x3\x2\x2\x2z\x556"+
		"\x3\x2\x2\x2|\x558\x3\x2\x2\x2~\x55B\x3\x2\x2\x2\x80\x55E\x3\x2\x2\x2"+
		"\x82\x563\x3\x2\x2\x2\x84\x56F\x3\x2\x2\x2\x86\x579\x3\x2\x2\x2\x88\x584"+
		"\x3\x2\x2\x2\x8A\x596\x3\x2\x2\x2\x8C\x5A3\x3\x2\x2\x2\x8E\x5A5\x3\x2"+
		"\x2\x2\x90\x5A9\x3\x2\x2\x2\x92\x5AB\x3\x2\x2\x2\x94\x5B5\x3\x2\x2\x2"+
		"\x96\x5BD\x3\x2\x2\x2\x98\x5C5\x3\x2\x2\x2\x9A\x5CD\x3\x2\x2\x2\x9C\x5D5"+
		"\x3\x2\x2\x2\x9E\x5DD\x3\x2\x2\x2\xA0\x5E2\x3\x2\x2\x2\xA2\x5EA\x3\x2"+
		"\x2\x2\xA4\x5EE\x3\x2\x2\x2\xA6\x5FF\x3\x2\x2\x2\xA8\x601\x3\x2\x2\x2"+
		"\xAA\x607\x3\x2\x2\x2\xAC\x610\x3\x2\x2\x2\xAE\x615\x3\x2\x2\x2\xB0\x61D"+
		"\x3\x2\x2\x2\xB2\x61F\x3\x2\x2\x2\xB4\x627\x3\x2\x2\x2\xB6\x62B\x3\x2"+
		"\x2\x2\xB8\x62D\x3\x2\x2\x2\xBA\x630\x3\x2\x2\x2\xBC\x639\x3\x2\x2\x2"+
		"\xBE\x63F\x3\x2\x2\x2\xC0\x64B\x3\x2\x2\x2\xC2\x64D\x3\x2\x2\x2\xC4\x652"+
		"\x3\x2\x2\x2\xC6\x655\x3\x2\x2\x2\xC8\x661\x3\x2\x2\x2\xCA\x66F\x3\x2"+
		"\x2\x2\xCC\x67F\x3\x2\x2\x2\xCE\x682\x3\x2\x2\x2\xD0\x68A\x3\x2\x2\x2"+
		"\xD2\x690\x3\x2\x2\x2\xD4\x694\x3\x2\x2\x2\xD6\x696\x3\x2\x2\x2\xD8\x699"+
		"\x3\x2\x2\x2\xDA\x69E\x3\x2\x2\x2\xDC\x6A2\x3\x2\x2\x2\xDE\x6B1\x3\x2"+
		"\x2\x2\xE0\x6B5\x3\x2\x2\x2\xE2\x6BA\x3\x2\x2\x2\xE4\x6BC\x3\x2\x2\x2"+
		"\xE6\x6BE\x3\x2\x2\x2\xE8\x6C3\x3\x2\x2\x2\xEA\x6C7\x3\x2\x2\x2\xEC\x6D5"+
		"\x3\x2\x2\x2\xEE\x6D7\x3\x2\x2\x2\xF0\x6DE\x3\x2\x2\x2\xF2\x6E2\x3\x2"+
		"\x2\x2\xF4\x6E4\x3\x2\x2\x2\xF6\x6EE\x3\x2\x2\x2\xF8\x6F0\x3\x2\x2\x2"+
		"\xFA\x6F3\x3\x2\x2\x2\xFC\x6F5\x3\x2\x2\x2\xFE\x6FD\x3\x2\x2\x2\x100\x705"+
		"\x3\x2\x2\x2\x102\x707\x3\x2\x2\x2\x104\x70B\x3\x2\x2\x2\x106\x70E\x3"+
		"\x2\x2\x2\x108\x712\x3\x2\x2\x2\x10A\x716\x3\x2\x2\x2\x10C\x718\x3\x2"+
		"\x2\x2\x10E\x721\x3\x2\x2\x2\x110\x727\x3\x2\x2\x2\x112\x72D\x3\x2\x2"+
		"\x2\x114\x734\x3\x2\x2\x2\x116\x737\x3\x2\x2\x2\x118\x744\x3\x2\x2\x2"+
		"\x11A\x74A\x3\x2\x2\x2\x11C\x74C\x3\x2\x2\x2\x11E\x752\x3\x2\x2\x2\x120"+
		"\x75A\x3\x2\x2\x2\x122\x76C\x3\x2\x2\x2\x124\x76E\x3\x2\x2\x2\x126\x770"+
		"\x3\x2\x2\x2\x128\x772\x3\x2\x2\x2\x12A\x77A\x3\x2\x2\x2\x12C\x788\x3"+
		"\x2\x2\x2\x12E\x78A\x3\x2\x2\x2\x130\x78D\x3\x2\x2\x2\x132\x79C\x3\x2"+
		"\x2\x2\x134\x79E\x3\x2\x2\x2\x136\x7A4\x3\x2\x2\x2\x138\x7AA\x3\x2\x2"+
		"\x2\x13A\x7B7\x3\x2\x2\x2\x13C\x7B9\x3\x2\x2\x2\x13E\x7C0\x3\x2\x2\x2"+
		"\x140\x7C9\x3\x2\x2\x2\x142\x7CC\x3\x2\x2\x2\x144\x7CF\x3\x2\x2\x2\x146"+
		"\x7D2\x3\x2\x2\x2\x148\x7D5\x3\x2\x2\x2\x14A\x7DB\x3\x2\x2\x2\x14C\x7E3"+
		"\x3\x2\x2\x2\x14E\x7EE\x3\x2\x2\x2\x150\x7F1\x3\x2\x2\x2\x152\x804\x3"+
		"\x2\x2\x2\x154\x80A\x3\x2\x2\x2\x156\x812\x3\x2\x2\x2\x158\x81F\x3\x2"+
		"\x2\x2\x15A\x823\x3\x2\x2\x2\x15C\x829\x3\x2\x2\x2\x15E\x82F\x3\x2\x2"+
		"\x2\x160\x831\x3\x2\x2\x2\x162\x837\x3\x2\x2\x2\x164\x83C\x3\x2\x2\x2"+
		"\x166\x842\x3\x2\x2\x2\x168\x845\x3\x2\x2\x2\x16A\x851\x3\x2\x2\x2\x16C"+
		"\x857\x3\x2\x2\x2\x16E\x86E\x3\x2\x2\x2\x170\x87E\x3\x2\x2\x2\x172\x880"+
		"\x3\x2\x2\x2\x174\x885\x3\x2\x2\x2\x176\x892\x3\x2\x2\x2\x178\x894\x3"+
		"\x2\x2\x2\x17A\x89D\x3\x2\x2\x2\x17C\x8A5\x3\x2\x2\x2\x17E\x8AC\x3\x2"+
		"\x2\x2\x180\x8BB\x3\x2\x2\x2\x182\x8C0\x3\x2\x2\x2\x184\x8C2\x3\x2\x2"+
		"\x2\x186\x8CA\x3\x2\x2\x2\x188\x8CE\x3\x2\x2\x2\x18A\x8D5\x3\x2\x2\x2"+
		"\x18C\x8E9\x3\x2\x2\x2\x18E\x8EC\x3\x2\x2\x2\x190\x8FF\x3\x2\x2\x2\x192"+
		"\x910\x3\x2\x2\x2\x194\x912\x3\x2\x2\x2\x196\x91E\x3\x2\x2\x2\x198\x926"+
		"\x3\x2\x2\x2\x19A\x92A\x3\x2\x2\x2\x19C\x937\x3\x2\x2\x2\x19E\x93B\x3"+
		"\x2\x2\x2\x1A0\x93D\x3\x2\x2\x2\x1A2\x941\x3\x2\x2\x2\x1A4\x957\x3\x2"+
		"\x2\x2\x1A6\x967\x3\x2\x2\x2\x1A8\x96B\x3\x2\x2\x2\x1AA\x96D\x3\x2\x2"+
		"\x2\x1AC\x971\x3\x2\x2\x2\x1AE\x979\x3\x2\x2\x2\x1B0\x97B\x3\x2\x2\x2"+
		"\x1B2\x98F\x3\x2\x2\x2\x1B4\x991\x3\x2\x2\x2\x1B6\x994\x3\x2\x2\x2\x1B8"+
		"\x997\x3\x2\x2\x2\x1BA\x99E\x3\x2\x2\x2\x1BC\x9AA\x3\x2\x2\x2\x1BE\x9BA"+
		"\x3\x2\x2\x2\x1C0\x9BD\x3\x2\x2\x2\x1C2\x9CF\x3\x2\x2\x2\x1C4\x9D8\x3"+
		"\x2\x2\x2\x1C6\x9E7\x3\x2\x2\x2\x1C8\x9EB\x3\x2\x2\x2\x1CA\x9EE\x3\x2"+
		"\x2\x2\x1CC\x9FF\x3\x2\x2\x2\x1CE\xA12\x3\x2\x2\x2\x1D0\xA15\x3\x2\x2"+
		"\x2\x1D2\xA22\x3\x2\x2\x2\x1D4\xA28\x3\x2\x2\x2\x1D6\xA2E\x3\x2\x2\x2"+
		"\x1D8\xA38\x3\x2\x2\x2\x1DA\xA4A\x3\x2\x2\x2\x1DC\xA4C\x3\x2\x2\x2\x1DE"+
		"\xA58\x3\x2\x2\x2\x1E0\xA5E\x3\x2\x2\x2\x1E2\xA69\x3\x2\x2\x2\x1E4\xA6E"+
		"\x3\x2\x2\x2\x1E6\xA70\x3\x2\x2\x2\x1E8\xA78\x3\x2\x2\x2\x1EA\xA7A\x3"+
		"\x2\x2\x2\x1EC\xA95\x3\x2\x2\x2\x1EE\xAAD\x3\x2\x2\x2\x1F0\xABF\x3\x2"+
		"\x2\x2\x1F2\xAC3\x3\x2\x2\x2\x1F4\xAC6\x3\x2\x2\x2\x1F6\xACF\x3\x2\x2"+
		"\x2\x1F8\xAD9\x3\x2\x2\x2\x1FA\xADB\x3\x2\x2\x2\x1FC\xAF2\x3\x2\x2\x2"+
		"\x1FE\xAF6\x3\x2\x2\x2\x200\xAF9\x3\x2\x2\x2\x202\xB01\x3\x2\x2\x2\x204"+
		"\xB05\x3\x2\x2\x2\x206\xB07\x3\x2\x2\x2\x208\xB0B\x3\x2\x2\x2\x20A\xB0F"+
		"\x3\x2\x2\x2\x20C\xB12\x3\x2\x2\x2\x20E\xB29\x3\x2\x2\x2\x210\xB36\x3"+
		"\x2\x2\x2\x212\xB38\x3\x2\x2\x2\x214\xB3B\x3\x2\x2\x2\x216\xB41\x3\x2"+
		"\x2\x2\x218\xB49\x3\x2\x2\x2\x21A\xB56\x3\x2\x2\x2\x21C\xB62\x3\x2\x2"+
		"\x2\x21E\xB6C\x3\x2\x2\x2\x220\xB70\x3\x2\x2\x2\x222\xB76\x3\x2\x2\x2"+
		"\x224\xB86\x3\x2\x2\x2\x226\xB88\x3\x2\x2\x2\x228\xB91\x3\x2\x2\x2\x22A"+
		"\xBA8\x3\x2\x2\x2\x22C\xBB5\x3\x2\x2\x2\x22E\xBB7\x3\x2\x2\x2\x230\xBBC"+
		"\x3\x2\x2\x2\x232\xBCF\x3\x2\x2\x2\x234\xBD1\x3\x2\x2\x2\x236\xBD4\x3"+
		"\x2\x2\x2\x238\xBDB\x3\x2\x2\x2\x23A\xBE0\x3\x2\x2\x2\x23C\xC1A\x3\x2"+
		"\x2\x2\x23E\xC2F\x3\x2\x2\x2\x240\xC3B\x3\x2\x2\x2\x242\xC54\x3\x2\x2"+
		"\x2\x244\xC5F\x3\x2\x2\x2\x246\xC6E\x3\x2\x2\x2\x248\xC7C\x3\x2\x2\x2"+
		"\x24A\xC88\x3\x2\x2\x2\x24C\xC8B\x3\x2\x2\x2\x24E\xC8F\x3\x2\x2\x2\x250"+
		"\xC91\x3\x2\x2\x2\x252\xC9A\x3\x2\x2\x2\x254\xCA2\x3\x2\x2\x2\x256\xCB7"+
		"\x3\x2\x2\x2\x258\xCC4\x3\x2\x2\x2\x25A\xCC6\x3\x2\x2\x2\x25C\xCC9\x3"+
		"\x2\x2\x2\x25E\xCCD\x3\x2\x2\x2\x260\xCD5\x3\x2\x2\x2\x262\xCDA\x3\x2"+
		"\x2\x2\x264\xCDC\x3\x2\x2\x2\x266\xCDF\x3\x2\x2\x2\x268\xCE3\x3\x2\x2"+
		"\x2\x26A\xCED\x3\x2\x2\x2\x26C\xCF2\x3\x2\x2\x2\x26E\xCF4\x3\x2\x2\x2"+
		"\x270\xCFC\x3\x2\x2\x2\x272\xD00\x3\x2\x2\x2\x274\xD02\x3\x2\x2\x2\x276"+
		"\xD08\x3\x2\x2\x2\x278\xD10\x3\x2\x2\x2\x27A\xD12\x3\x2\x2\x2\x27C\xD1A"+
		"\x3\x2\x2\x2\x27E\xD1E\x3\x2\x2\x2\x280\xD20\x3\x2\x2\x2\x282\xD22\x3"+
		"\x2\x2\x2\x284\xD24\x3\x2\x2\x2\x286\xD26\x3\x2\x2\x2\x288\xD28\x3\x2"+
		"\x2\x2\x28A\xD2A\x3\x2\x2\x2\x28C\xD2C\x3\x2\x2\x2\x28E\xD2E\x3\x2\x2"+
		"\x2\x290\xD30\x3\x2\x2\x2\x292\xD32\x3\x2\x2\x2\x294\xD34\x3\x2\x2\x2"+
		"\x296\xD37\x3\x2\x2\x2\x298\xD61\x3\x2\x2\x2\x29A\xD65\x3\x2\x2\x2\x29C"+
		"\xD67\x3\x2\x2\x2\x29E\xD6A\x3\x2\x2\x2\x2A0\xD82\x3\x2\x2\x2\x2A2\xD84"+
		"\x3\x2\x2\x2\x2A4\xD86\x3\x2\x2\x2\x2A6\xD8A\x3\x2\x2\x2\x2A8\xD8C\x3"+
		"\x2\x2\x2\x2AA\xD8F\x3\x2\x2\x2\x2AC\xD92\x3\x2\x2\x2\x2AE\xD97\x3\x2"+
		"\x2\x2\x2B0\xD9E\x3\x2\x2\x2\x2B2\xDA6\x3\x2\x2\x2\x2B4\xDAD\x3\x2\x2"+
		"\x2\x2B6\xDAF\x3\x2\x2\x2\x2B8\xDB2\x3\x2\x2\x2\x2BA\xDBD\x3\x2\x2\x2"+
		"\x2BC\xDC1\x3\x2\x2\x2\x2BE\xDC3\x3\x2\x2\x2\x2C0\xDC6\x3\x2\x2\x2\x2C2"+
		"\xDCA\x3\x2\x2\x2\x2C4\xDCF\x3\x2\x2\x2\x2C6\xDD1\x3\x2\x2\x2\x2C8\xDD7"+
		"\x3\x2\x2\x2\x2CA\xDD9\x3\x2\x2\x2\x2CC\xDDB\x3\x2\x2\x2\x2CE\xDDD\x3"+
		"\x2\x2\x2\x2D0\xDDF\x3\x2\x2\x2\x2D2\xDE1\x3\x2\x2\x2\x2D4\xDE3\x3\x2"+
		"\x2\x2\x2D6\xDE5\x3\x2\x2\x2\x2D8\xDE7\x3\x2\x2\x2\x2DA\xDE9\x3\x2\x2"+
		"\x2\x2DC\xDEB\x3\x2\x2\x2\x2DE\xDED\x3\x2\x2\x2\x2E0\xDEF\x3\x2\x2\x2"+
		"\x2E2\xDF1\x3\x2\x2\x2\x2E4\xDF3\x3\x2\x2\x2\x2E6\xDF5\x3\x2\x2\x2\x2E8"+
		"\xDF7\x3\x2\x2\x2\x2EA\xDF9\x3\x2\x2\x2\x2EC\xDFB\x3\x2\x2\x2\x2EE\xDFD"+
		"\x3\x2\x2\x2\x2F0\xDFF\x3\x2\x2\x2\x2F2\xE01\x3\x2\x2\x2\x2F4\xE03\x3"+
		"\x2\x2\x2\x2F6\xE07\x3\x2\x2\x2\x2F8\xE0B\x3\x2\x2\x2\x2FA\xE15\x3\x2"+
		"\x2\x2\x2FC\xE17\x3\x2\x2\x2\x2FE\xE19\x3\x2\x2\x2\x300\xE1B\x3\x2\x2"+
		"\x2\x302\xE2A\x3\x2\x2\x2\x304\xE39\x3\x2\x2\x2\x306\xE48\x3\x2\x2\x2"+
		"\x308\xE51\x3\x2\x2\x2\x30A\xE61\x3\x2\x2\x2\x30C\xE6D\x3\x2\x2\x2\x30E"+
		"\xE70\x3\x2\x2\x2\x310\xE75\x3\x2\x2\x2\x312\xE7A\x3\x2\x2\x2\x314\xE82"+
		"\x3\x2\x2\x2\x316\xE88\x3\x2\x2\x2\x318\xE93\x3\x2\x2\x2\x31A\xEA1\x3"+
		"\x2\x2\x2\x31C\xEA8\x3\x2\x2\x2\x31E\xEB3\x3\x2\x2\x2\x320\xEC1\x3\x2"+
		"\x2\x2\x322\xECF\x3\x2\x2\x2\x324\xED4\x3\x2\x2\x2\x326\xED9\x3\x2\x2"+
		"\x2\x328\xEE1\x3\x2\x2\x2\x32A\xEE5\x3\x2\x2\x2\x32C\xEEB\x3\x2\x2\x2"+
		"\x32E\x32F\x5\b\x5\x2\x32F\x3\x3\x2\x2\x2\x330\x331\x5\b\x5\x2\x331\x5"+
		"\x3\x2\x2\x2\x332\x333\t\x2\x2\x2\x333\a\x3\x2\x2\x2\x334\x335\x5\x6\x4"+
		"\x2\x335\x336\x5\n\x6\x2\x336\x339\x3\x2\x2\x2\x337\x339\x5\x16A\xB6\x2"+
		"\x338\x334\x3\x2\x2\x2\x338\x337\x3\x2\x2\x2\x339\x340\x3\x2\x2\x2\x33A"+
		"\x33B\az\x2\x2\x33B\x33C\x5\x6\x4\x2\x33C\x33D\x5\n\x6\x2\x33D\x33F\x3"+
		"\x2\x2\x2\x33E\x33A\x3\x2\x2\x2\x33F\x342\x3\x2\x2\x2\x340\x33E\x3\x2"+
		"\x2\x2\x340\x341\x3\x2\x2\x2\x341\t\x3\x2\x2\x2\x342\x340\x3\x2\x2\x2"+
		"\x343\x346\x5$\x13\x2\x344\x346\x3\x2\x2\x2\x345\x343\x3\x2\x2\x2\x345"+
		"\x344\x3\x2\x2\x2\x346\v\x3\x2\x2\x2\x347\x34D\x5\xE\b\x2\x348\x34C\a"+
		"\x8B\x2\x2\x349\x34C\x5\x220\x111\x2\x34A\x34C\a\x80\x2\x2\x34B\x348\x3"+
		"\x2\x2\x2\x34B\x349\x3\x2\x2\x2\x34B\x34A\x3\x2\x2\x2\x34C\x34F\x3\x2"+
		"\x2\x2\x34D\x34B\x3\x2\x2\x2\x34D\x34E\x3\x2\x2\x2\x34E\r\x3\x2\x2\x2"+
		"\x34F\x34D\x3\x2\x2\x2\x350\x355\x5\x10\t\x2\x351\x355\x5\x1E\x10\x2\x352"+
		"\x353\ai\x2\x2\x353\x355\a\x80\x2\x2\x354\x350\x3\x2\x2\x2\x354\x351\x3"+
		"\x2\x2\x2\x354\x352\x3\x2\x2\x2\x355\xF\x3\x2\x2\x2\x356\x359\x5\x12\n"+
		"\x2\x357\x359\a\x12\x2\x2\x358\x356\x3\x2\x2\x2\x358\x357\x3\x2\x2\x2"+
		"\x359\x11\x3\x2\x2\x2\x35A\x35E\x5\x14\v\x2\x35B\x35E\x5\x16\f\x2\x35C"+
		"\x35E\a\x1D\x2\x2\x35D\x35A\x3\x2\x2\x2\x35D\x35B\x3\x2\x2\x2\x35D\x35C"+
		"\x3\x2\x2\x2\x35E\x13\x3\x2\x2\x2\x35F\x360\t\x3\x2\x2\x360\x15\x3\x2"+
		"\x2\x2\x361\x362\t\x4\x2\x2\x362\x17\x3\x2\x2\x2\x363\x364\x5\x1A\xE\x2"+
		"\x364\x365\a\x8B\x2\x2\x365\x19\x3\x2\x2\x2\x366\x36B\x5\xE\b\x2\x367"+
		"\x36A\x5\x220\x111\x2\x368\x36A\a\x80\x2\x2\x369\x367\x3\x2\x2\x2\x369"+
		"\x368\x3\x2\x2\x2\x36A\x36D\x3\x2\x2\x2\x36B\x369\x3\x2\x2\x2\x36B\x36C"+
		"\x3\x2\x2\x2\x36C\x1B\x3\x2\x2\x2\x36D\x36B\x3\x2\x2\x2\x36E\x378\x5\x10"+
		"\t\x2\x36F\x371\t\x5\x2\x2\x370\x36F\x3\x2\x2\x2\x371\x374\x3\x2\x2\x2"+
		"\x372\x370\x3\x2\x2\x2\x372\x373\x3\x2\x2\x2\x373\x375\x3\x2\x2\x2\x374"+
		"\x372\x3\x2\x2\x2\x375\x377\x5\x220\x111\x2\x376\x372\x3\x2\x2\x2\x377"+
		"\x37A\x3\x2\x2\x2\x378\x376\x3\x2\x2\x2\x378\x379\x3\x2\x2\x2\x379\x37E"+
		"\x3\x2\x2\x2\x37A\x378\x3\x2\x2\x2\x37B\x37D\t\x5\x2\x2\x37C\x37B\x3\x2"+
		"\x2\x2\x37D\x380\x3\x2\x2\x2\x37E\x37C\x3\x2\x2\x2\x37E\x37F\x3\x2\x2"+
		"\x2\x37F\x381\x3\x2\x2\x2\x380\x37E\x3\x2\x2\x2\x381\x382\x5\x220\x111"+
		"\x2\x382\x3A6\x3\x2\x2\x2\x383\x38D\x5\x1E\x10\x2\x384\x386\t\x5\x2\x2"+
		"\x385\x384\x3\x2\x2\x2\x386\x389\x3\x2\x2\x2\x387\x385\x3\x2\x2\x2\x387"+
		"\x388\x3\x2\x2\x2\x388\x38A\x3\x2\x2\x2\x389\x387\x3\x2\x2\x2\x38A\x38C"+
		"\x5\x220\x111\x2\x38B\x387\x3\x2\x2\x2\x38C\x38F\x3\x2\x2\x2\x38D\x38B"+
		"\x3\x2\x2\x2\x38D\x38E\x3\x2\x2\x2\x38E\x3A6\x3\x2\x2\x2\x38F\x38D\x3"+
		"\x2\x2\x2\x390\x391\ai\x2\x2\x391\x39B\a\x80\x2\x2\x392\x394\t\x5\x2\x2"+
		"\x393\x392\x3\x2\x2\x2\x394\x397\x3\x2\x2\x2\x395\x393\x3\x2\x2\x2\x395"+
		"\x396\x3\x2\x2\x2\x396\x398\x3\x2\x2\x2\x397\x395\x3\x2\x2\x2\x398\x39A"+
		"\x5\x220\x111\x2\x399\x395\x3\x2\x2\x2\x39A\x39D\x3\x2\x2\x2\x39B\x399"+
		"\x3\x2\x2\x2\x39B\x39C\x3\x2\x2\x2\x39C\x3A1\x3\x2\x2\x2\x39D\x39B\x3"+
		"\x2\x2\x2\x39E\x3A0\t\x5\x2\x2\x39F\x39E\x3\x2\x2\x2\x3A0\x3A3\x3\x2\x2"+
		"\x2\x3A1\x39F\x3\x2\x2\x2\x3A1\x3A2\x3\x2\x2\x2\x3A2\x3A4\x3\x2\x2\x2"+
		"\x3A3\x3A1\x3\x2\x2\x2\x3A4\x3A6\x5\x220\x111\x2\x3A5\x36E\x3\x2\x2\x2"+
		"\x3A5\x383\x3\x2\x2\x2\x3A5\x390\x3\x2\x2\x2\x3A6\x1D\x3\x2\x2\x2\x3A7"+
		"\x3AC\x5\x4\x3\x2\x3A8\x3AC\a\x43\x2\x2\x3A9\x3AC\x5\x2F0\x179\x2\x3AA"+
		"\x3AC\aZ\x2\x2\x3AB\x3A7\x3\x2\x2\x2\x3AB\x3A8\x3\x2\x2\x2\x3AB\x3A9\x3"+
		"\x2\x2\x2\x3AB\x3AA\x3\x2\x2\x2\x3AC\x1F\x3\x2\x2\x2\x3AD\x3AE\x5\x4\x3"+
		"\x2\x3AE!\x3\x2\x2\x2\x3AF\x3B0\x5\x4\x3\x2\x3B0#\x3\x2\x2\x2\x3B1\x3B2"+
		"\a\x89\x2\x2\x3B2\x3B3\x5&\x14\x2\x3B3\x3B4\a\x8A\x2\x2\x3B4%\x3\x2\x2"+
		"\x2\x3B5\x3BA\x5(\x15\x2\x3B6\x3B7\a{\x2\x2\x3B7\x3B9\x5(\x15\x2\x3B8"+
		"\x3B6\x3\x2\x2\x2\x3B9\x3BC\x3\x2\x2\x2\x3BA\x3B8\x3\x2\x2\x2\x3BA\x3BB"+
		"\x3\x2\x2\x2\x3BB\'\x3\x2\x2\x2\x3BC\x3BA\x3\x2\x2\x2\x3BD\x3BE\x5\f\a"+
		"\x2\x3BE)\x3\x2\x2\x2\x3BF\x3C0\ai\x2\x2\x3C0+\x3\x2\x2\x2\x3C1\x3C2\x5"+
		"\xE0q\x2\x3C2-\x3\x2\x2\x2\x3C3\x3C8\x5\x30\x19\x2\x3C4\x3C5\a{\x2\x2"+
		"\x3C5\x3C7\x5\x30\x19\x2\x3C6\x3C4\x3\x2\x2\x2\x3C7\x3CA\x3\x2\x2\x2\x3C8"+
		"\x3C6\x3\x2\x2\x2\x3C8\x3C9\x3\x2\x2\x2\x3C9/\x3\x2\x2\x2\x3CA\x3C8\x3"+
		"\x2\x2\x2\x3CB\x3CD\x5\x32\x1A\x2\x3CC\x3CB\x3\x2\x2\x2\x3CC\x3CD\x3\x2"+
		"\x2\x2\x3CD\x3CE\x3\x2\x2\x2\x3CE\x3CF\x5\x34\x1B\x2\x3CF\x31\x3\x2\x2"+
		"\x2\x3D0\x3D1\x5\x6\x4\x2\x3D1\x3D2\a|\x2\x2\x3D2\x33\x3\x2\x2\x2\x3D3"+
		"\x3D9\x5\xE0q\x2\x3D4\x3D5\aO\x2\x2\x3D5\x3D9\x5,\x17\x2\x3D6\x3D7\aG"+
		"\x2\x2\x3D7\x3D9\x5,\x17\x2\x3D8\x3D3\x3\x2\x2\x2\x3D8\x3D4\x3\x2\x2\x2"+
		"\x3D8\x3D6\x3\x2\x2\x2\x3D9\x35\x3\x2\x2\x2\x3DA\x3DE\x5\x38\x1D\x2\x3DB"+
		"\x3DD\x5:\x1E\x2\x3DC\x3DB\x3\x2\x2\x2\x3DD\x3E0\x3\x2\x2\x2\x3DE\x3DC"+
		"\x3\x2\x2\x2\x3DE\x3DF\x3\x2\x2\x2\x3DF\x3F1\x3\x2\x2\x2\x3E0\x3DE\x3"+
		"\x2\x2\x2\x3E1\x3E8\x5\x328\x195\x2\x3E2\x3E8\x5\x32A\x196\x2\x3E3\x3E8"+
		"\a\x8E\x2\x2\x3E4\x3E8\a\x8F\x2\x2\x3E5\x3E6\a\x92\x2\x2\x3E6\x3E8\x5"+
		"\x6\x4\x2\x3E7\x3E1\x3\x2\x2\x2\x3E7\x3E2\x3\x2\x2\x2\x3E7\x3E3\x3\x2"+
		"\x2\x2\x3E7\x3E4\x3\x2\x2\x2\x3E7\x3E5\x3\x2\x2\x2\x3E8\x3EC\x3\x2\x2"+
		"\x2\x3E9\x3EB\x5:\x1E\x2\x3EA\x3E9\x3\x2\x2\x2\x3EB\x3EE\x3\x2\x2\x2\x3EC"+
		"\x3EA\x3\x2\x2\x2\x3EC\x3ED\x3\x2\x2\x2\x3ED\x3F0\x3\x2\x2\x2\x3EE\x3EC"+
		"\x3\x2\x2\x2\x3EF\x3E7\x3\x2\x2\x2\x3F0\x3F3\x3\x2\x2\x2\x3F1\x3EF\x3"+
		"\x2\x2\x2\x3F1\x3F2\x3\x2\x2\x2\x3F2\x37\x3\x2\x2\x2\x3F3\x3F1\x3\x2\x2"+
		"\x2\x3F4\x41A\x5\x2FA\x17E\x2\x3F5\x41A\x5<\x1F\x2\x3F6\x41A\x5> \x2\x3F7"+
		"\x41A\x5\x42\"\x2\x3F8\x41A\x5\x16A\xB6\x2\x3F9\x41A\x5\x46$\x2\x3FA\x41A"+
		"\x5H%\x2\x3FB\x411\a\x41\x2\x2\x3FC\x40B\x5\f\a\x2\x3FD\x40C\x5\x32C\x197"+
		"\x2\x3FE\x40C\x5L\'\x2\x3FF\x400\av\x2\x2\x400\x401\x5\x44#\x2\x401\x403"+
		"\aw\x2\x2\x402\x404\x5\x21E\x110\x2\x403\x402\x3\x2\x2\x2\x403\x404\x3"+
		"\x2\x2\x2\x404\x406\x3\x2\x2\x2\x405\x407\x5\x224\x113\x2\x406\x405\x3"+
		"\x2\x2\x2\x406\x407\x3\x2\x2\x2\x407\x40C\x3\x2\x2\x2\x408\x409\x5\x21E"+
		"\x110\x2\x409\x40A\x5\x224\x113\x2\x40A\x40C\x3\x2\x2\x2\x40B\x3FD\x3"+
		"\x2\x2\x2\x40B\x3FE\x3\x2\x2\x2\x40B\x3FF\x3\x2\x2\x2\x40B\x408\x3\x2"+
		"\x2\x2\x40C\x412\x3\x2\x2\x2\x40D\x412\x5\x62\x32\x2\x40E\x40F\x5\x220"+
		"\x111\x2\x40F\x410\x5\x224\x113\x2\x410\x412\x3\x2\x2\x2\x411\x3FC\x3"+
		"\x2\x2\x2\x411\x40D\x3\x2\x2\x2\x411\x40E\x3\x2\x2\x2\x412\x41A\x3\x2"+
		"\x2\x2\x413\x41A\x5h\x35\x2\x414\x41A\x5p\x39\x2\x415\x41A\x5r:\x2\x416"+
		"\x41A\x5t;\x2\x417\x41A\x5\xA4S\x2\x418\x41A\x5\x2AC\x157\x2\x419\x3F4"+
		"\x3\x2\x2\x2\x419\x3F5\x3\x2\x2\x2\x419\x3F6\x3\x2\x2\x2\x419\x3F7\x3"+
		"\x2\x2\x2\x419\x3F8\x3\x2\x2\x2\x419\x3F9\x3\x2\x2\x2\x419\x3FA\x3\x2"+
		"\x2\x2\x419\x3FB\x3\x2\x2\x2\x419\x413\x3\x2\x2\x2\x419\x414\x3\x2\x2"+
		"\x2\x419\x415\x3\x2\x2\x2\x419\x416\x3\x2\x2\x2\x419\x417\x3\x2\x2\x2"+
		"\x419\x418\x3\x2\x2\x2\x41A\x39\x3\x2\x2\x2\x41B\x41C\av\x2\x2\x41C\x41D"+
		"\x5\x44#\x2\x41D\x41E\aw\x2\x2\x41E;\x3\x2\x2\x2\x41F\x420\x5\x6\x4\x2"+
		"\x420\x421\x5\n\x6\x2\x421=\x3\x2\x2\x2\x422\x423\ax\x2\x2\x423\x424\x5"+
		"\xE0q\x2\x424\x425\ay\x2\x2\x425?\x3\x2\x2\x2\x426\x427\x5\x36\x1C\x2"+
		"\x427\x41\x3\x2\x2\x2\x428\x429\t\x6\x2\x2\x429\x43\x3\x2\x2\x2\x42A\x42F"+
		"\x5\xE0q\x2\x42B\x42C\a{\x2\x2\x42C\x42E\x5\xE0q\x2\x42D\x42B\x3\x2\x2"+
		"\x2\x42E\x431\x3\x2\x2\x2\x42F\x42D\x3\x2\x2\x2\x42F\x430\x3\x2\x2\x2"+
		"\x430\x45\x3\x2\x2\x2\x431\x42F\x3\x2\x2\x2\x432\x433\a]\x2\x2\x433G\x3"+
		"\x2\x2\x2\x434\x435\a\x11\x2\x2\x435\x436\az\x2\x2\x436\x437\x5\x6\x4"+
		"\x2\x437\x438\x5\n\x6\x2\x438\x43F\x3\x2\x2\x2\x439\x43A\a\x11\x2\x2\x43A"+
		"\x43B\av\x2\x2\x43B\x43C\x5\x44#\x2\x43C\x43D\aw\x2\x2\x43D\x43F\x3\x2"+
		"\x2\x2\x43E\x434\x3\x2\x2\x2\x43E\x439\x3\x2\x2\x2\x43FI\x3\x2\x2\x2\x440"+
		"\x441\a\x41\x2\x2\x441\x44B\x5\f\a\x2\x442\x444\ax\x2\x2\x443\x445\x5"+
		".\x18\x2\x444\x443\x3\x2\x2\x2\x444\x445\x3\x2\x2\x2\x445\x446\x3\x2\x2"+
		"\x2\x446\x448\ay\x2\x2\x447\x449\x5L\'\x2\x448\x447\x3\x2\x2\x2\x448\x449"+
		"\x3\x2\x2\x2\x449\x44C\x3\x2\x2\x2\x44A\x44C\x5L\'\x2\x44B\x442\x3\x2"+
		"\x2\x2\x44B\x44A\x3\x2\x2\x2\x44CK\x3\x2\x2\x2\x44D\x450\x5N(\x2\x44E"+
		"\x450\x5V,\x2\x44F\x44D\x3\x2\x2\x2\x44F\x44E\x3\x2\x2\x2\x450M\x3\x2"+
		"\x2\x2\x451\x452\at\x2\x2\x452\x45B\au\x2\x2\x453\x454\at\x2\x2\x454\x456"+
		"\x5P)\x2\x455\x457\a{\x2\x2\x456\x455\x3\x2\x2\x2\x456\x457\x3\x2\x2\x2"+
		"\x457\x458\x3\x2\x2\x2\x458\x459\au\x2\x2\x459\x45B\x3\x2\x2\x2\x45A\x451"+
		"\x3\x2\x2\x2\x45A\x453\x3\x2\x2\x2\x45BO\x3\x2\x2\x2\x45C\x461\x5R*\x2"+
		"\x45D\x45E\a{\x2\x2\x45E\x460\x5R*\x2\x45F\x45D\x3\x2\x2\x2\x460\x463"+
		"\x3\x2\x2\x2\x461\x45F\x3\x2\x2\x2\x461\x462\x3\x2\x2\x2\x462Q\x3\x2\x2"+
		"\x2\x463\x461\x3\x2\x2\x2\x464\x465\x5\x6\x4\x2\x465\x466\a\x88\x2\x2"+
		"\x466\x467\x5T+\x2\x467S\x3\x2\x2\x2\x468\x46B\x5\xE0q\x2\x469\x46B\x5"+
		"L\'\x2\x46A\x468\x3\x2\x2\x2\x46A\x469\x3\x2\x2\x2\x46BU\x3\x2\x2\x2\x46C"+
		"\x46D\at\x2\x2\x46D\x46F\x5X-\x2\x46E\x470\a{\x2\x2\x46F\x46E\x3\x2\x2"+
		"\x2\x46F\x470\x3\x2\x2\x2\x470\x471\x3\x2\x2\x2\x471\x472\au\x2\x2\x472"+
		"W\x3\x2\x2\x2\x473\x478\x5Z.\x2\x474\x475\a{\x2\x2\x475\x477\x5Z.\x2\x476"+
		"\x474\x3\x2\x2\x2\x477\x47A\x3\x2\x2\x2\x478\x476\x3\x2\x2\x2\x478\x479"+
		"\x3\x2\x2\x2\x479Y\x3\x2\x2\x2\x47A\x478\x3\x2\x2\x2\x47B\x481\x5\xE2"+
		"r\x2\x47C\x47D\at\x2\x2\x47D\x47E\x5\x44#\x2\x47E\x47F\au\x2\x2\x47F\x481"+
		"\x3\x2\x2\x2\x480\x47B\x3\x2\x2\x2\x480\x47C\x3\x2\x2\x2\x481[\x3\x2\x2"+
		"\x2\x482\x493\a\x41\x2\x2\x483\x484\x5\x21A\x10E\x2\x484\x485\x5\x224"+
		"\x113\x2\x485\x494\x3\x2\x2\x2\x486\x487\x5\x21C\x10F\x2\x487\x488\av"+
		"\x2\x2\x488\x489\x5\x44#\x2\x489\x48B\aw\x2\x2\x48A\x48C\x5\x21E\x110"+
		"\x2\x48B\x48A\x3\x2\x2\x2\x48B\x48C\x3\x2\x2\x2\x48C\x48E\x3\x2\x2\x2"+
		"\x48D\x48F\x5\x224\x113\x2\x48E\x48D\x3\x2\x2\x2\x48E\x48F\x3\x2\x2\x2"+
		"\x48F\x494\x3\x2\x2\x2\x490\x491\x5\x220\x111\x2\x491\x492\x5\x224\x113"+
		"\x2\x492\x494\x3\x2\x2\x2\x493\x483\x3\x2\x2\x2\x493\x486\x3\x2\x2\x2"+
		"\x493\x490\x3\x2\x2\x2\x494]\x3\x2\x2\x2\x495\x496\a\x41\x2\x2\x496\x497"+
		"\x5\"\x12\x2\x497\x498\ax\x2\x2\x498\x499\x5\xE0q\x2\x499\x49A\ay\x2\x2"+
		"\x49A_\x3\x2\x2\x2\x49B\x49C\a\x41\x2\x2\x49C\x49D\x5\x62\x32\x2\x49D"+
		"\x61\x3\x2\x2\x2\x49E\x49F\at\x2\x2\x49F\x4A8\au\x2\x2\x4A0\x4A1\at\x2"+
		"\x2\x4A1\x4A3\x5\x64\x33\x2\x4A2\x4A4\a{\x2\x2\x4A3\x4A2\x3\x2\x2\x2\x4A3"+
		"\x4A4\x3\x2\x2\x2\x4A4\x4A5\x3\x2\x2\x2\x4A5\x4A6\au\x2\x2\x4A6\x4A8\x3"+
		"\x2\x2\x2\x4A7\x49E\x3\x2\x2\x2\x4A7\x4A0\x3\x2\x2\x2\x4A8\x63\x3\x2\x2"+
		"\x2\x4A9\x4AE\x5\x66\x34\x2\x4AA\x4AB\a{\x2\x2\x4AB\x4AD\x5\x66\x34\x2"+
		"\x4AC\x4AA\x3\x2\x2\x2\x4AD\x4B0\x3\x2\x2\x2\x4AE\x4AC\x3\x2\x2\x2\x4AE"+
		"\x4AF\x3\x2\x2\x2\x4AF\x65\x3\x2\x2\x2\x4B0\x4AE\x3\x2\x2\x2\x4B1\x4B7"+
		"\x5\x36\x1C\x2\x4B2\x4B3\x5\x6\x4\x2\x4B3\x4B4\a\x88\x2\x2\x4B4\x4B5\x5"+
		"\xE0q\x2\x4B5\x4B7\x3\x2\x2\x2\x4B6\x4B1\x3\x2\x2\x2\x4B6\x4B2\x3\x2\x2"+
		"\x2\x4B7g\x3\x2\x2\x2\x4B8\x4B9\a\x61\x2\x2\x4B9\x4C2\ax\x2\x2\x4BA\x4BB"+
		"\x5j\x36\x2\x4BB\x4BC\ay\x2\x2\x4BC\x4C3\x3\x2\x2\x2\x4BD\x4BE\x5\f\a"+
		"\x2\x4BE\x4BF\ay\x2\x2\x4BF\x4C3\x3\x2\x2\x2\x4C0\x4C1\ai\x2\x2\x4C1\x4C3"+
		"\ay\x2\x2\x4C2\x4BA\x3\x2\x2\x2\x4C2\x4BD\x3\x2\x2\x2\x4C2\x4C0\x3\x2"+
		"\x2\x2\x4C3i\x3\x2\x2\x2\x4C4\x4CD\x5\x6\x4\x2\x4C5\x4C7\x5l\x37\x2\x4C6"+
		"\x4C5\x3\x2\x2\x2\x4C6\x4C7\x3\x2\x2\x2\x4C7\x4CE\x3\x2\x2\x2\x4C8\x4C9"+
		"\a\x8C\x2\x2\x4C9\x4CB\x5\x6\x4\x2\x4CA\x4CC\x5l\x37\x2\x4CB\x4CA\x3\x2"+
		"\x2\x2\x4CB\x4CC\x3\x2\x2\x2\x4CC\x4CE\x3\x2\x2\x2\x4CD\x4C6\x3\x2\x2"+
		"\x2\x4CD\x4C8\x3\x2\x2\x2\x4CE\x4D6\x3\x2\x2\x2\x4CF\x4D0\az\x2\x2\x4D0"+
		"\x4D2\x5\x6\x4\x2\x4D1\x4D3\x5l\x37\x2\x4D2\x4D1\x3\x2\x2\x2\x4D2\x4D3"+
		"\x3\x2\x2\x2\x4D3\x4D5\x3\x2\x2\x2\x4D4\x4CF\x3\x2\x2\x2\x4D5\x4D8\x3"+
		"\x2\x2\x2\x4D6\x4D4\x3\x2\x2\x2\x4D6\x4D7\x3\x2\x2\x2\x4D7k\x3\x2\x2\x2"+
		"\x4D8\x4D6\x3\x2\x2\x2\x4D9\x4DB\a\x89\x2\x2\x4DA\x4DC\x5n\x38\x2\x4DB"+
		"\x4DA\x3\x2\x2\x2\x4DB\x4DC\x3\x2\x2\x2\x4DC\x4DD\x3\x2\x2\x2\x4DD\x4DE"+
		"\a\x8A\x2\x2\x4DEm\x3\x2\x2\x2\x4DF\x4E3\a{\x2\x2\x4E0\x4E2\a{\x2\x2\x4E1"+
		"\x4E0\x3\x2\x2\x2\x4E2\x4E5\x3\x2\x2\x2\x4E3\x4E1\x3\x2\x2\x2\x4E3\x4E4"+
		"\x3\x2\x2\x2\x4E4o\x3\x2\x2\x2\x4E5\x4E3\x3\x2\x2\x2\x4E6\x4E7\a\x19\x2"+
		"\x2\x4E7\x4E8\ax\x2\x2\x4E8\x4E9\x5\xE0q\x2\x4E9\x4EA\ay\x2\x2\x4EAq\x3"+
		"\x2\x2\x2\x4EB\x4EC\a\x64\x2\x2\x4EC\x4ED\ax\x2\x2\x4ED\x4EE\x5\xE0q\x2"+
		"\x4EE\x4EF\ay\x2\x2\x4EFs\x3\x2\x2\x2\x4F0\x4F1\a\x1E\x2\x2\x4F1\x4F2"+
		"\ax\x2\x2\x4F2\x4F3\x5\f\a\x2\x4F3\x4F4\ay\x2\x2\x4F4u\x3\x2\x2\x2\x4F5"+
		"\x503\x5\x80\x41\x2\x4F6\x503\x5\x36\x1C\x2\x4F7\x4F8\a~\x2\x2\x4F8\x503"+
		"\x5v<\x2\x4F9\x4FA\a\x7F\x2\x2\x4FA\x503\x5v<\x2\x4FB\x4FC\a\x86\x2\x2"+
		"\x4FC\x503\x5v<\x2\x4FD\x4FE\a\x87\x2\x2\x4FE\x503\x5v<\x2\x4FF\x503\x5"+
		"|?\x2\x500\x503\x5~@\x2\x501\x503\x5\x2A6\x154\x2\x502\x4F5\x3\x2\x2\x2"+
		"\x502\x4F6\x3\x2\x2\x2\x502\x4F7\x3\x2\x2\x2\x502\x4F9\x3\x2\x2\x2\x502"+
		"\x4FB\x3\x2\x2\x2\x502\x4FD\x3\x2\x2\x2\x502\x4FF\x3\x2\x2\x2\x502\x500"+
		"\x3\x2\x2\x2\x502\x501\x3\x2\x2\x2\x503w\x3\x2\x2\x2\x504\x505\ax\x2\x2"+
		"\x505\x506\x5\f\a\x2\x506\x507\ay\x2\x2\x507\x508\x5z>\x2\x508y\x3\x2"+
		"\x2\x2\x509\x557\a\x87\x2\x2\x50A\x557\a\x86\x2\x2\x50B\x557\ax\x2\x2"+
		"\x50C\x557\x5\x6\x4\x2\x50D\x557\x5\x2FA\x17E\x2\x50E\x557\a\v\x2\x2\x50F"+
		"\x557\a\x11\x2\x2\x510\x557\a\x12\x2\x2\x511\x557\a\x13\x2\x2\x512\x557"+
		"\a\x15\x2\x2\x513\x557\a\x16\x2\x2\x514\x557\a\x17\x2\x2\x515\x557\a\x18"+
		"\x2\x2\x516\x557\a\x19\x2\x2\x517\x557\a\x1A\x2\x2\x518\x557\a\x1B\x2"+
		"\x2\x519\x557\a\x1C\x2\x2\x51A\x557\a\x1D\x2\x2\x51B\x557\a\x1E\x2\x2"+
		"\x51C\x557\a\x1F\x2\x2\x51D\x557\a!\x2\x2\x51E\x557\a\"\x2\x2\x51F\x557"+
		"\a$\x2\x2\x520\x557\a%\x2\x2\x521\x557\a\'\x2\x2\x522\x557\a(\x2\x2\x523"+
		"\x557\a)\x2\x2\x524\x557\a+\x2\x2\x525\x557\a,\x2\x2\x526\x557\a-\x2\x2"+
		"\x527\x557\a.\x2\x2\x528\x557\a/\x2\x2\x529\x557\a\x32\x2\x2\x52A\x557"+
		"\a\x34\x2\x2\x52B\x557\a\x35\x2\x2\x52C\x557\a\x36\x2\x2\x52D\x557\a\x37"+
		"\x2\x2\x52E\x557\a\x38\x2\x2\x52F\x557\a\x39\x2\x2\x530\x557\a>\x2\x2"+
		"\x531\x557\a?\x2\x2\x532\x557\a@\x2\x2\x533\x557\a\x41\x2\x2\x534\x557"+
		"\a\x43\x2\x2\x535\x557\a\x45\x2\x2\x536\x557\aG\x2\x2\x537\x557\aH\x2"+
		"\x2\x538\x557\aI\x2\x2\x539\x557\aK\x2\x2\x53A\x557\aL\x2\x2\x53B\x557"+
		"\aM\x2\x2\x53C\x557\aN\x2\x2\x53D\x557\aO\x2\x2\x53E\x557\aQ\x2\x2\x53F"+
		"\x557\aR\x2\x2\x540\x557\aS\x2\x2\x541\x557\aV\x2\x2\x542\x557\aW\x2\x2"+
		"\x543\x557\aX\x2\x2\x544\x557\aY\x2\x2\x545\x557\aZ\x2\x2\x546\x557\a"+
		"[\x2\x2\x547\x557\a\\\x2\x2\x548\x557\a]\x2\x2\x549\x557\a^\x2\x2\x54A"+
		"\x557\a`\x2\x2\x54B\x557\a\x61\x2\x2\x54C\x557\a\x62\x2\x2\x54D\x557\a"+
		"\x63\x2\x2\x54E\x557\a\x64\x2\x2\x54F\x557\a\x65\x2\x2\x550\x557\a\x66"+
		"\x2\x2\x551\x557\ag\x2\x2\x552\x557\ah\x2\x2\x553\x557\ai\x2\x2\x554\x557"+
		"\aj\x2\x2\x555\x557\al\x2\x2\x556\x509\x3\x2\x2\x2\x556\x50A\x3\x2\x2"+
		"\x2\x556\x50B\x3\x2\x2\x2\x556\x50C\x3\x2\x2\x2\x556\x50D\x3\x2\x2\x2"+
		"\x556\x50E\x3\x2\x2\x2\x556\x50F\x3\x2\x2\x2\x556\x510\x3\x2\x2\x2\x556"+
		"\x511\x3\x2\x2\x2\x556\x512\x3\x2\x2\x2\x556\x513\x3\x2\x2\x2\x556\x514"+
		"\x3\x2\x2\x2\x556\x515\x3\x2\x2\x2\x556\x516\x3\x2\x2\x2\x556\x517\x3"+
		"\x2\x2\x2\x556\x518\x3\x2\x2\x2\x556\x519\x3\x2\x2\x2\x556\x51A\x3\x2"+
		"\x2\x2\x556\x51B\x3\x2\x2\x2\x556\x51C\x3\x2\x2\x2\x556\x51D\x3\x2\x2"+
		"\x2\x556\x51E\x3\x2\x2\x2\x556\x51F\x3\x2\x2\x2\x556\x520\x3\x2\x2\x2"+
		"\x556\x521\x3\x2\x2\x2\x556\x522\x3\x2\x2\x2\x556\x523\x3\x2\x2\x2\x556"+
		"\x524\x3\x2\x2\x2\x556\x525\x3\x2\x2\x2\x556\x526\x3\x2\x2\x2\x556\x527"+
		"\x3\x2\x2\x2\x556\x528\x3\x2\x2\x2\x556\x529\x3\x2\x2\x2\x556\x52A\x3"+
		"\x2\x2\x2\x556\x52B\x3\x2\x2\x2\x556\x52C\x3\x2\x2\x2\x556\x52D\x3\x2"+
		"\x2\x2\x556\x52E\x3\x2\x2\x2\x556\x52F\x3\x2\x2\x2\x556\x530\x3\x2\x2"+
		"\x2\x556\x531\x3\x2\x2\x2\x556\x532\x3\x2\x2\x2\x556\x533\x3\x2\x2\x2"+
		"\x556\x534\x3\x2\x2\x2\x556\x535\x3\x2\x2\x2\x556\x536\x3\x2\x2\x2\x556"+
		"\x537\x3\x2\x2\x2\x556\x538\x3\x2\x2\x2\x556\x539\x3\x2\x2\x2\x556\x53A"+
		"\x3\x2\x2\x2\x556\x53B\x3\x2\x2\x2\x556\x53C\x3\x2\x2\x2\x556\x53D\x3"+
		"\x2\x2\x2\x556\x53E\x3\x2\x2\x2\x556\x53F\x3\x2\x2\x2\x556\x540\x3\x2"+
		"\x2\x2\x556\x541\x3\x2\x2\x2\x556\x542\x3\x2\x2\x2\x556\x543\x3\x2\x2"+
		"\x2\x556\x544\x3\x2\x2\x2\x556\x545\x3\x2\x2\x2\x556\x546\x3\x2\x2\x2"+
		"\x556\x547\x3\x2\x2\x2\x556\x548\x3\x2\x2\x2\x556\x549\x3\x2\x2\x2\x556"+
		"\x54A\x3\x2\x2\x2\x556\x54B\x3\x2\x2\x2\x556\x54C\x3\x2\x2\x2\x556\x54D"+
		"\x3\x2\x2\x2\x556\x54E\x3\x2\x2\x2\x556\x54F\x3\x2\x2\x2\x556\x550\x3"+
		"\x2\x2\x2\x556\x551\x3\x2\x2\x2\x556\x552\x3\x2\x2\x2\x556\x553\x3\x2"+
		"\x2\x2\x556\x554\x3\x2\x2\x2\x556\x555\x3\x2\x2\x2\x557{\x3\x2\x2\x2\x558"+
		"\x559\a\x8E\x2\x2\x559\x55A\x5v<\x2\x55A}\x3\x2\x2\x2\x55B\x55C\a\x8F"+
		"\x2\x2\x55C\x55D\x5v<\x2\x55D\x7F\x3\x2\x2\x2\x55E\x55F\ax\x2\x2\x55F"+
		"\x560\x5\f\a\x2\x560\x561\ay\x2\x2\x561\x562\x5v<\x2\x562\x81\x3\x2\x2"+
		"\x2\x563\x56C\x5v<\x2\x564\x565\a\x80\x2\x2\x565\x56B\x5v<\x2\x566\x567"+
		"\a\x81\x2\x2\x567\x56B\x5v<\x2\x568\x569\a\x82\x2\x2\x569\x56B\x5v<\x2"+
		"\x56A\x564\x3\x2\x2\x2\x56A\x566\x3\x2\x2\x2\x56A\x568\x3\x2\x2\x2\x56B"+
		"\x56E\x3\x2\x2\x2\x56C\x56A\x3\x2\x2\x2\x56C\x56D\x3\x2\x2\x2\x56D\x83"+
		"\x3\x2\x2\x2\x56E\x56C\x3\x2\x2\x2\x56F\x576\x5\x82\x42\x2\x570\x571\a"+
		"~\x2\x2\x571\x575\x5\x82\x42\x2\x572\x573\a\x7F\x2\x2\x573\x575\x5\x82"+
		"\x42\x2\x574\x570\x3\x2\x2\x2\x574\x572\x3\x2\x2\x2\x575\x578\x3\x2\x2"+
		"\x2\x576\x574\x3\x2\x2\x2\x576\x577\x3\x2\x2\x2\x577\x85\x3\x2\x2\x2\x578"+
		"\x576\x3\x2\x2\x2\x579\x581\x5\x84\x43\x2\x57A\x57B\a\x9F\x2\x2\x57B\x580"+
		"\x5\x84\x43\x2\x57C\x57D\x5\x2F6\x17C\x2\x57D\x57E\x5\x84\x43\x2\x57E"+
		"\x580\x3\x2\x2\x2\x57F\x57A\x3\x2\x2\x2\x57F\x57C\x3\x2\x2\x2\x580\x583"+
		"\x3\x2\x2\x2\x581\x57F\x3\x2\x2\x2\x581\x582\x3\x2\x2\x2\x582\x87\x3\x2"+
		"\x2\x2\x583\x581\x3\x2\x2\x2\x584\x593\x5\x86\x44\x2\x585\x586\a\x89\x2"+
		"\x2\x586\x592\x5\x86\x44\x2\x587\x588\a\x8A\x2\x2\x588\x592\x5\x86\x44"+
		"\x2\x589\x58A\a\x95\x2\x2\x58A\x592\x5\x86\x44\x2\x58B\x58C\a\x96\x2\x2"+
		"\x58C\x592\x5\x86\x44\x2\x58D\x58E\a;\x2\x2\x58E\x592\x5\x8EH\x2\x58F"+
		"\x590\a\xF\x2\x2\x590\x592\x5\f\a\x2\x591\x585\x3\x2\x2\x2\x591\x587\x3"+
		"\x2\x2\x2\x591\x589\x3\x2\x2\x2\x591\x58B\x3\x2\x2\x2\x591\x58D\x3\x2"+
		"\x2\x2\x591\x58F\x3\x2\x2\x2\x592\x595\x3\x2\x2\x2\x593\x591\x3\x2\x2"+
		"\x2\x593\x594\x3\x2\x2\x2\x594\x89\x3\x2\x2\x2\x595\x593\x3\x2\x2\x2\x596"+
		"\x597\x5\x6\x4\x2\x597\x598\a\x89\x2\x2\x598\x59D\x5\f\a\x2\x599\x59A"+
		"\a{\x2\x2\x59A\x59C\x5\f\a\x2\x59B\x599\x3\x2\x2\x2\x59C\x59F\x3\x2\x2"+
		"\x2\x59D\x59B\x3\x2\x2\x2\x59D\x59E\x3\x2\x2\x2\x59E\x5A0\x3\x2\x2\x2"+
		"\x59F\x59D\x3\x2\x2\x2\x5A0\x5A1\a\x8A\x2\x2\x5A1\x5A2\x5\x8CG\x2\x5A2"+
		"\x8B\x3\x2\x2\x2\x5A3\x5A4\t\a\x2\x2\x5A4\x8D\x3\x2\x2\x2\x5A5\x5A7\x5"+
		"\x1A\xE\x2\x5A6\x5A8\a\x8B\x2\x2\x5A7\x5A6\x3\x2\x2\x2\x5A7\x5A8\x3\x2"+
		"\x2\x2\x5A8\x8F\x3\x2\x2\x2\x5A9\x5AA\t\b\x2\x2\x5AA\x91\x3\x2\x2\x2\x5AB"+
		"\x5B2\x5\x88\x45\x2\x5AC\x5AD\a\x93\x2\x2\x5AD\x5B1\x5\x88\x45\x2\x5AE"+
		"\x5AF\a\x94\x2\x2\x5AF\x5B1\x5\x88\x45\x2\x5B0\x5AC\x3\x2\x2\x2\x5B0\x5AE"+
		"\x3\x2\x2\x2\x5B1\x5B4\x3\x2\x2\x2\x5B2\x5B0\x3\x2\x2\x2\x5B2\x5B3\x3"+
		"\x2\x2\x2\x5B3\x93\x3\x2\x2\x2\x5B4\x5B2\x3\x2\x2\x2\x5B5\x5BA\x5\x92"+
		"J\x2\x5B6\x5B7\a\x83\x2\x2\x5B7\x5B9\x5\x92J\x2\x5B8\x5B6\x3\x2\x2\x2"+
		"\x5B9\x5BC\x3\x2\x2\x2\x5BA\x5B8\x3\x2\x2\x2\x5BA\x5BB\x3\x2\x2\x2\x5BB"+
		"\x95\x3\x2\x2\x2\x5BC\x5BA\x3\x2\x2\x2\x5BD\x5C2\x5\x94K\x2\x5BE\x5BF"+
		"\a\x85\x2\x2\x5BF\x5C1\x5\x94K\x2\x5C0\x5BE\x3\x2\x2\x2\x5C1\x5C4\x3\x2"+
		"\x2\x2\x5C2\x5C0\x3\x2\x2\x2\x5C2\x5C3\x3\x2\x2\x2\x5C3\x97\x3\x2\x2\x2"+
		"\x5C4\x5C2\x3\x2\x2\x2\x5C5\x5CA\x5\x96L\x2\x5C6\x5C7\a\x84\x2\x2\x5C7"+
		"\x5C9\x5\x96L\x2\x5C8\x5C6\x3\x2\x2\x2\x5C9\x5CC\x3\x2\x2\x2\x5CA\x5C8"+
		"\x3\x2\x2\x2\x5CA\x5CB\x3\x2\x2\x2\x5CB\x99\x3\x2\x2\x2\x5CC\x5CA\x3\x2"+
		"\x2\x2\x5CD\x5D2\x5\x98M\x2\x5CE\x5CF\a\x90\x2\x2\x5CF\x5D1\x5\x98M\x2"+
		"\x5D0\x5CE\x3\x2\x2\x2\x5D1\x5D4\x3\x2\x2\x2\x5D2\x5D0\x3\x2\x2\x2\x5D2"+
		"\x5D3\x3\x2\x2\x2\x5D3\x9B\x3\x2\x2\x2\x5D4\x5D2\x3\x2\x2\x2\x5D5\x5DA"+
		"\x5\x9AN\x2\x5D6\x5D7\a\x91\x2\x2\x5D7\x5D9\x5\x9AN\x2\x5D8\x5D6\x3\x2"+
		"\x2\x2\x5D9\x5DC\x3\x2\x2\x2\x5DA\x5D8\x3\x2\x2\x2\x5DA\x5DB\x3\x2\x2"+
		"\x2\x5DB\x9D\x3\x2\x2\x2\x5DC\x5DA\x3\x2\x2\x2\x5DD\x5E0\x5\x9CO\x2\x5DE"+
		"\x5DF\a\x8D\x2\x2\x5DF\x5E1\x5\x9EP\x2\x5E0\x5DE\x3\x2\x2\x2\x5E0\x5E1"+
		"\x3\x2\x2\x2\x5E1\x9F\x3\x2\x2\x2\x5E2\x5E8\x5\x9EP\x2\x5E3\x5E4\a\x8B"+
		"\x2\x2\x5E4\x5E5\x5\xE0q\x2\x5E5\x5E6\a|\x2\x2\x5E6\x5E7\x5\xE0q\x2\x5E7"+
		"\x5E9\x3\x2\x2\x2\x5E8\x5E3\x3\x2\x2\x2\x5E8\x5E9\x3\x2\x2\x2\x5E9\xA1"+
		"\x3\x2\x2\x2\x5EA\x5EB\x5\xA6T\x2\x5EB\x5EC\x5\x2F4\x17B\x2\x5EC\x5ED"+
		"\x5\xB6\\\x2\x5ED\xA3\x3\x2\x2\x2\x5EE\x5F0\a\x1F\x2\x2\x5EF\x5F1\x5\xA8"+
		"U\x2\x5F0\x5EF\x3\x2\x2\x2\x5F0\x5F1\x3\x2\x2\x2\x5F1\x5F2\x3\x2\x2\x2"+
		"\x5F2\x5F3\x5\xEEx\x2\x5F3\xA5\x3\x2\x2\x2\x5F4\x5F5\ax\x2\x2\x5F5\x600"+
		"\ay\x2\x2\x5F6\x5F7\ax\x2\x2\x5F7\x5F8\x5\xAAV\x2\x5F8\x5F9\ay\x2\x2\x5F9"+
		"\x600\x3\x2\x2\x2\x5FA\x5FB\ax\x2\x2\x5FB\x5FC\x5\xB2Z\x2\x5FC\x5FD\a"+
		"y\x2\x2\x5FD\x600\x3\x2\x2\x2\x5FE\x600\x5\xB4[\x2\x5FF\x5F4\x3\x2\x2"+
		"\x2\x5FF\x5F6\x3\x2\x2\x2\x5FF\x5FA\x3\x2\x2\x2\x5FF\x5FE\x3\x2\x2\x2"+
		"\x600\xA7\x3\x2\x2\x2\x601\x603\ax\x2\x2\x602\x604\x5\xAAV\x2\x603\x602"+
		"\x3\x2\x2\x2\x603\x604\x3\x2\x2\x2\x604\x605\x3\x2\x2\x2\x605\x606\ay"+
		"\x2\x2\x606\xA9\x3\x2\x2\x2\x607\x60C\x5\xACW\x2\x608\x609\a{\x2\x2\x609"+
		"\x60B\x5\xACW\x2\x60A\x608\x3\x2\x2\x2\x60B\x60E\x3\x2\x2\x2\x60C\x60A"+
		"\x3\x2\x2\x2\x60C\x60D\x3\x2\x2\x2\x60D\xAB\x3\x2\x2\x2\x60E\x60C\x3\x2"+
		"\x2\x2\x60F\x611\x5\xAEX\x2\x610\x60F\x3\x2\x2\x2\x610\x611\x3\x2\x2\x2"+
		"\x611\x612\x3\x2\x2\x2\x612\x613\x5\f\a\x2\x613\x614\x5\x6\x4\x2\x614"+
		"\xAD\x3\x2\x2\x2\x615\x616\t\t\x2\x2\x616\xAF\x3\x2\x2\x2\x617\x619\a"+
		"x\x2\x2\x618\x61A\x5\xB2Z\x2\x619\x618\x3\x2\x2\x2\x619\x61A\x3\x2\x2"+
		"\x2\x61A\x61B\x3\x2\x2\x2\x61B\x61E\ay\x2\x2\x61C\x61E\x5\xB4[\x2\x61D"+
		"\x617\x3\x2\x2\x2\x61D\x61C\x3\x2\x2\x2\x61E\xB1\x3\x2\x2\x2\x61F\x624"+
		"\x5\xB4[\x2\x620\x621\a{\x2\x2\x621\x623\x5\xB4[\x2\x622\x620\x3\x2\x2"+
		"\x2\x623\x626\x3\x2\x2\x2\x624\x622\x3\x2\x2\x2\x624\x625\x3\x2\x2\x2"+
		"\x625\xB3\x3\x2\x2\x2\x626\x624\x3\x2\x2\x2\x627\x628\x5\x6\x4\x2\x628"+
		"\xB5\x3\x2\x2\x2\x629\x62C\x5\xE0q\x2\x62A\x62C\x5\xEEx\x2\x62B\x629\x3"+
		"\x2\x2\x2\x62B\x62A\x3\x2\x2\x2\x62C\xB7\x3\x2\x2\x2\x62D\x62E\x5\xBA"+
		"^\x2\x62E\x62F\x5\xBC_\x2\x62F\xB9\x3\x2\x2\x2\x630\x632\x5\x2C8\x165"+
		"\x2\x631\x633\x5\f\a\x2\x632\x631\x3\x2\x2\x2\x632\x633\x3\x2\x2\x2\x633"+
		"\x634\x3\x2\x2\x2\x634\x635\x5\x6\x4\x2\x635\x636\a\x36\x2\x2\x636\x637"+
		"\x5\xE0q\x2\x637\xBB\x3\x2\x2\x2\x638\x63A\x5\xBE`\x2\x639\x638\x3\x2"+
		"\x2\x2\x639\x63A\x3\x2\x2\x2\x63A\x63B\x3\x2\x2\x2\x63B\x63D\x5\xD4k\x2"+
		"\x63C\x63E\x5\xDAn\x2\x63D\x63C\x3\x2\x2\x2\x63D\x63E\x3\x2\x2\x2\x63E"+
		"\xBD\x3\x2\x2\x2\x63F\x643\x5\xC0\x61\x2\x640\x642\x5\xC0\x61\x2\x641"+
		"\x640\x3\x2\x2\x2\x642\x645\x3\x2\x2\x2\x643\x641\x3\x2\x2\x2\x643\x644"+
		"\x3\x2\x2\x2\x644\xBF\x3\x2\x2\x2\x645\x643\x3\x2\x2\x2\x646\x64C\x5\xBA"+
		"^\x2\x647\x64C\x5\xC2\x62\x2\x648\x64C\x5\xC4\x63\x2\x649\x64C\x5\xCA"+
		"\x66\x2\x64A\x64C\x5\xCCg\x2\x64B\x646\x3\x2\x2\x2\x64B\x647\x3\x2\x2"+
		"\x2\x64B\x648\x3\x2\x2\x2\x64B\x649\x3\x2\x2\x2\x64B\x64A\x3\x2\x2\x2"+
		"\x64C\xC1\x3\x2\x2\x2\x64D\x64E\x5\x2CA\x166\x2\x64E\x64F\x5\x6\x4\x2"+
		"\x64F\x650\a\x88\x2\x2\x650\x651\x5\xE0q\x2\x651\xC3\x3\x2\x2\x2\x652"+
		"\x653\x5\x2CC\x167\x2\x653\x654\x5\xE6t\x2\x654\xC5\x3\x2\x2\x2\x655\x657"+
		"\x5\x2CE\x168\x2\x656\x658\x5\f\a\x2\x657\x656\x3\x2\x2\x2\x657\x658\x3"+
		"\x2\x2\x2\x658\x659\x3\x2\x2\x2\x659\x65A\x5\x6\x4\x2\x65A\x65B\a\x36"+
		"\x2\x2\x65B\x65C\x5\xE0q\x2\x65C\x65D\x5\x2D0\x169\x2\x65D\x65E\x5\xE0"+
		"q\x2\x65E\x65F\x5\x2D2\x16A\x2\x65F\x660\x5\xE0q\x2\x660\xC7\x3\x2\x2"+
		"\x2\x661\x663\x5\x2CE\x168\x2\x662\x664\x5\f\a\x2\x663\x662\x3\x2\x2\x2"+
		"\x663\x664\x3\x2\x2\x2\x664\x665\x3\x2\x2\x2\x665\x666\x5\x6\x4\x2\x666"+
		"\x667\a\x36\x2\x2\x667\x668\x5\xE0q\x2\x668\x669\x5\x2D0\x169\x2\x669"+
		"\x66A\x5\xE0q\x2\x66A\x66B\x5\x2D2\x16A\x2\x66B\x66C\x5\xE0q\x2\x66C\x66D"+
		"\x5\x2D4\x16B\x2\x66D\x66E\x5\x6\x4\x2\x66E\xC9\x3\x2\x2\x2\x66F\x671"+
		"\x5\x2CE\x168\x2\x670\x672\x5\f\a\x2\x671\x670\x3\x2\x2\x2\x671\x672\x3"+
		"\x2\x2\x2\x672\x673\x3\x2\x2\x2\x673\x674\x5\x6\x4\x2\x674\x675\a\x36"+
		"\x2\x2\x675\x676\x5\xE0q\x2\x676\x677\x5\x2D0\x169\x2\x677\x678\x5\xE0"+
		"q\x2\x678\x679\x5\x2D2\x16A\x2\x679\x67D\x5\xE0q\x2\x67A\x67B\x5\x2D4"+
		"\x16B\x2\x67B\x67C\x5\x6\x4\x2\x67C\x67E\x3\x2\x2\x2\x67D\x67A\x3\x2\x2"+
		"\x2\x67D\x67E\x3\x2\x2\x2\x67E\xCB\x3\x2\x2\x2\x67F\x680\x5\x2D6\x16C"+
		"\x2\x680\x681\x5\xCEh\x2\x681\xCD\x3\x2\x2\x2\x682\x687\x5\xD0i\x2\x683"+
		"\x684\a{\x2\x2\x684\x686\x5\xD0i\x2\x685\x683\x3\x2\x2\x2\x686\x689\x3"+
		"\x2\x2\x2\x687\x685\x3\x2\x2\x2\x687\x688\x3\x2\x2\x2\x688\xCF\x3\x2\x2"+
		"\x2\x689\x687\x3\x2\x2\x2\x68A\x68C\x5\xE0q\x2\x68B\x68D\x5\xD2j\x2\x68C"+
		"\x68B\x3\x2\x2\x2\x68C\x68D\x3\x2\x2\x2\x68D\xD1\x3\x2\x2\x2\x68E\x691"+
		"\x5\x2D8\x16D\x2\x68F\x691\x5\x2DA\x16E\x2\x690\x68E\x3\x2\x2\x2\x690"+
		"\x68F\x3\x2\x2\x2\x691\xD3\x3\x2\x2\x2\x692\x695\x5\xD6l\x2\x693\x695"+
		"\x5\xD8m\x2\x694\x692\x3\x2\x2\x2\x694\x693\x3\x2\x2\x2\x695\xD5\x3\x2"+
		"\x2\x2\x696\x697\x5\x2DC\x16F\x2\x697\x698\x5\xE0q\x2\x698\xD7\x3\x2\x2"+
		"\x2\x699\x69A\x5\x2DE\x170\x2\x69A\x69B\x5\xE0q\x2\x69B\x69C\x5\x2E0\x171"+
		"\x2\x69C\x69D\x5\xE0q\x2\x69D\xD9\x3\x2\x2\x2\x69E\x69F\x5\x2D4\x16B\x2"+
		"\x69F\x6A0\x5\x6\x4\x2\x6A0\x6A1\x5\xBC_\x2\x6A1\xDB\x3\x2\x2\x2\x6A2"+
		"\x6A3\x5v<\x2\x6A3\x6A4\x5\xDEp\x2\x6A4\x6A5\x5\xE0q\x2\x6A5\xDD\x3\x2"+
		"\x2\x2\x6A6\x6B2\a\x88\x2\x2\x6A7\x6B2\a\x97\x2\x2\x6A8\x6B2\a\x98\x2"+
		"\x2\x6A9\x6B2\a\x99\x2\x2\x6AA\x6B2\a\x9A\x2\x2\x6AB\x6B2\a\x9B\x2\x2"+
		"\x6AC\x6B2\a\x9C\x2\x2\x6AD\x6B2\a\x9D\x2\x2\x6AE\x6B2\a\x9E\x2\x2\x6AF"+
		"\x6B2\a\xA0\x2\x2\x6B0\x6B2\x5\x2F8\x17D\x2\x6B1\x6A6\x3\x2\x2\x2\x6B1"+
		"\x6A7\x3\x2\x2\x2\x6B1\x6A8\x3\x2\x2\x2\x6B1\x6A9\x3\x2\x2\x2\x6B1\x6AA"+
		"\x3\x2\x2\x2\x6B1\x6AB\x3\x2\x2\x2\x6B1\x6AC\x3\x2\x2\x2\x6B1\x6AD\x3"+
		"\x2\x2\x2\x6B1\x6AE\x3\x2\x2\x2\x6B1\x6AF\x3\x2\x2\x2\x6B1\x6B0\x3\x2"+
		"\x2\x2\x6B2\xDF\x3\x2\x2\x2\x6B3\x6B6\x5\xDCo\x2\x6B4\x6B6\x5\xE2r\x2"+
		"\x6B5\x6B3\x3\x2\x2\x2\x6B5\x6B4\x3\x2\x2\x2\x6B6\xE1\x3\x2\x2\x2\x6B7"+
		"\x6BB\x5\xA2R\x2\x6B8\x6BB\x5\xB8]\x2\x6B9\x6BB\x5\xA0Q\x2\x6BA\x6B7\x3"+
		"\x2\x2\x2\x6BA\x6B8\x3\x2\x2\x2\x6BA\x6B9\x3\x2\x2\x2\x6BB\xE3\x3\x2\x2"+
		"\x2\x6BC\x6BD\x5\xE0q\x2\x6BD\xE5\x3\x2\x2\x2\x6BE\x6BF\x5\xE0q\x2\x6BF"+
		"\xE7\x3\x2\x2\x2\x6C0\x6C4\x5\xF4{\x2\x6C1\x6C4\x5\xF6|\x2\x6C2\x6C4\x5"+
		"\xEAv\x2\x6C3\x6C0\x3\x2\x2\x2\x6C3\x6C1\x3\x2\x2\x2\x6C3\x6C2\x3\x2\x2"+
		"\x2\x6C4\xE9\x3\x2\x2\x2\x6C5\x6C8\x5\xEEx\x2\x6C6\x6C8\x5\xECw\x2\x6C7"+
		"\x6C5\x3\x2\x2\x2\x6C7\x6C6\x3\x2\x2\x2\x6C8\xEB\x3\x2\x2\x2\x6C9\x6D6"+
		"\x5\xF2z\x2\x6CA\x6D6\x5\x104\x83\x2\x6CB\x6D6\x5\x108\x85\x2\x6CC\x6D6"+
		"\x5\x11A\x8E\x2\x6CD\x6D6\x5\x12C\x97\x2\x6CE\x6D6\x5\x138\x9D\x2\x6CF"+
		"\x6D6\x5\x144\xA3\x2\x6D0\x6D6\x5\x146\xA4\x2\x6D1\x6D6\x5\x148\xA5\x2"+
		"\x6D2\x6D6\x5\x14A\xA6\x2\x6D3\x6D6\x5\x14E\xA8\x2\x6D4\x6D6\x5\x29A\x14E"+
		"\x2\x6D5\x6C9\x3\x2\x2\x2\x6D5\x6CA\x3\x2\x2\x2\x6D5\x6CB\x3\x2\x2\x2"+
		"\x6D5\x6CC\x3\x2\x2\x2\x6D5\x6CD\x3\x2\x2\x2\x6D5\x6CE\x3\x2\x2\x2\x6D5"+
		"\x6CF\x3\x2\x2\x2\x6D5\x6D0\x3\x2\x2\x2\x6D5\x6D1\x3\x2\x2\x2\x6D5\x6D2"+
		"\x3\x2\x2\x2\x6D5\x6D3\x3\x2\x2\x2\x6D5\x6D4\x3\x2\x2\x2\x6D6\xED\x3\x2"+
		"\x2\x2\x6D7\x6D9\at\x2\x2\x6D8\x6DA\x5\xF0y\x2\x6D9\x6D8\x3\x2\x2\x2\x6D9"+
		"\x6DA\x3\x2\x2\x2\x6DA\x6DB\x3\x2\x2\x2\x6DB\x6DC\au\x2\x2\x6DC\xEF\x3"+
		"\x2\x2\x2\x6DD\x6DF\x5\xE8u\x2\x6DE\x6DD\x3\x2\x2\x2\x6DF\x6E0\x3\x2\x2"+
		"\x2\x6E0\x6DE\x3\x2\x2\x2\x6E0\x6E1\x3\x2\x2\x2\x6E1\xF1\x3\x2\x2\x2\x6E2"+
		"\x6E3\a}\x2\x2\x6E3\xF3\x3\x2\x2\x2\x6E4\x6E5\x5\x6\x4\x2\x6E5\x6E6\a"+
		"|\x2\x2\x6E6\x6E7\x5\xE8u\x2\x6E7\xF5\x3\x2\x2\x2\x6E8\x6E9\x5\xF8}\x2"+
		"\x6E9\x6EA\a}\x2\x2\x6EA\x6EF\x3\x2\x2\x2\x6EB\x6EC\x5\x102\x82\x2\x6EC"+
		"\x6ED\a}\x2\x2\x6ED\x6EF\x3\x2\x2\x2\x6EE\x6E8\x3\x2\x2\x2\x6EE\x6EB\x3"+
		"\x2\x2\x2\x6EF\xF7\x3\x2\x2\x2\x6F0\x6F1\x5\xFA~\x2\x6F1\x6F2\x5\xFC\x7F"+
		"\x2\x6F2\xF9\x3\x2\x2\x2\x6F3\x6F4\x5\f\a\x2\x6F4\xFB\x3\x2\x2\x2\x6F5"+
		"\x6FA\x5\xFE\x80\x2\x6F6\x6F7\a{\x2\x2\x6F7\x6F9\x5\xFE\x80\x2\x6F8\x6F6"+
		"\x3\x2\x2\x2\x6F9\x6FC\x3\x2\x2\x2\x6FA\x6F8\x3\x2\x2\x2\x6FA\x6FB\x3"+
		"\x2\x2\x2\x6FB\xFD\x3\x2\x2\x2\x6FC\x6FA\x3\x2\x2\x2\x6FD\x700\x5\x6\x4"+
		"\x2\x6FE\x6FF\a\x88\x2\x2\x6FF\x701\x5\x100\x81\x2\x700\x6FE\x3\x2\x2"+
		"\x2\x700\x701\x3\x2\x2\x2\x701\xFF\x3\x2\x2\x2\x702\x706\x5\xE0q\x2\x703"+
		"\x706\x5\x224\x113\x2\x704\x706\x5\x2C4\x163\x2\x705\x702\x3\x2\x2\x2"+
		"\x705\x703\x3\x2\x2\x2\x705\x704\x3\x2\x2\x2\x706\x101\x3\x2\x2\x2\x707"+
		"\x708\a\x1B\x2\x2\x708\x709\x5\f\a\x2\x709\x70A\x5\x196\xCC\x2\x70A\x103"+
		"\x3\x2\x2\x2\x70B\x70C\x5\x106\x84\x2\x70C\x70D\a}\x2\x2\x70D\x105\x3"+
		"\x2\x2\x2\x70E\x70F\x5\xE0q\x2\x70F\x107\x3\x2\x2\x2\x710\x713\x5\x10C"+
		"\x87\x2\x711\x713\x5\x10E\x88\x2\x712\x710\x3\x2\x2\x2\x712\x711\x3\x2"+
		"\x2\x2\x713\x109\x3\x2\x2\x2\x714\x717\x5\xEEx\x2\x715\x717\x5\xECw\x2"+
		"\x716\x714\x3\x2\x2\x2\x716\x715\x3\x2\x2\x2\x717\x10B\x3\x2\x2\x2\x718"+
		"\x719\a\x34\x2\x2\x719\x71A\ax\x2\x2\x71A\x71B\x5\xE6t\x2\x71B\x71C\a"+
		"y\x2\x2\x71C\x71F\x5\x10A\x86\x2\x71D\x71E\a$\x2\x2\x71E\x720\x5\x10A"+
		"\x86\x2\x71F\x71D\x3\x2\x2\x2\x71F\x720\x3\x2\x2\x2\x720\x10D\x3\x2\x2"+
		"\x2\x721\x722\a\\\x2\x2\x722\x723\ax\x2\x2\x723\x724\x5\xE0q\x2\x724\x725"+
		"\ay\x2\x2\x725\x726\x5\x110\x89\x2\x726\x10F\x3\x2\x2\x2\x727\x729\at"+
		"\x2\x2\x728\x72A\x5\x112\x8A\x2\x729\x728\x3\x2\x2\x2\x729\x72A\x3\x2"+
		"\x2\x2\x72A\x72B\x3\x2\x2\x2\x72B\x72C\au\x2\x2\x72C\x111\x3\x2\x2\x2"+
		"\x72D\x731\x5\x114\x8B\x2\x72E\x730\x5\x114\x8B\x2\x72F\x72E\x3\x2\x2"+
		"\x2\x730\x733\x3\x2\x2\x2\x731\x72F\x3\x2\x2\x2\x731\x732\x3\x2\x2\x2"+
		"\x732\x113\x3\x2\x2\x2\x733\x731\x3\x2\x2\x2\x734\x735\x5\x116\x8C\x2"+
		"\x735\x736\x5\xF0y\x2\x736\x115\x3\x2\x2\x2\x737\x73B\x5\x118\x8D\x2\x738"+
		"\x73A\x5\x118\x8D\x2\x739\x738\x3\x2\x2\x2\x73A\x73D\x3\x2\x2\x2\x73B"+
		"\x739\x3\x2\x2\x2\x73B\x73C\x3\x2\x2\x2\x73C\x117\x3\x2\x2\x2\x73D\x73B"+
		"\x3\x2\x2\x2\x73E\x73F\a\x16\x2\x2\x73F\x740\x5\xE4s\x2\x740\x741\a|\x2"+
		"\x2\x741\x745\x3\x2\x2\x2\x742\x743\a\x1E\x2\x2\x743\x745\a|\x2\x2\x744"+
		"\x73E\x3\x2\x2\x2\x744\x742\x3\x2\x2\x2\x745\x119\x3\x2\x2\x2\x746\x74B"+
		"\x5\x11C\x8F\x2\x747\x74B\x5\x11E\x90\x2\x748\x74B\x5\x120\x91\x2\x749"+
		"\x74B\x5\x12A\x96\x2\x74A\x746\x3\x2\x2\x2\x74A\x747\x3\x2\x2\x2\x74A"+
		"\x748\x3\x2\x2\x2\x74A\x749\x3\x2\x2\x2\x74B\x11B\x3\x2\x2\x2\x74C\x74D"+
		"\al\x2\x2\x74D\x74E\ax\x2\x2\x74E\x74F\x5\xE6t\x2\x74F\x750\ay\x2\x2\x750"+
		"\x751\x5\xEAv\x2\x751\x11D\x3\x2\x2\x2\x752\x753\a!\x2\x2\x753\x754\x5"+
		"\xEAv\x2\x754\x755\al\x2\x2\x755\x756\ax\x2\x2\x756\x757\x5\xE6t\x2\x757"+
		"\x758\ay\x2\x2\x758\x759\a}\x2\x2\x759\x11F\x3\x2\x2\x2\x75A\x75B\a.\x2"+
		"\x2\x75B\x75D\ax\x2\x2\x75C\x75E\x5\x122\x92\x2\x75D\x75C\x3\x2\x2\x2"+
		"\x75D\x75E\x3\x2\x2\x2\x75E\x75F\x3\x2\x2\x2\x75F\x761\a}\x2\x2\x760\x762"+
		"\x5\x124\x93\x2\x761\x760\x3\x2\x2\x2\x761\x762\x3\x2\x2\x2\x762\x763"+
		"\x3\x2\x2\x2\x763\x765\a}\x2\x2\x764\x766\x5\x126\x94\x2\x765\x764\x3"+
		"\x2\x2\x2\x765\x766\x3\x2\x2\x2\x766\x767\x3\x2\x2\x2\x767\x768\ay\x2"+
		"\x2\x768\x769\x5\xEAv\x2\x769\x121\x3\x2\x2\x2\x76A\x76D\x5\xF8}\x2\x76B"+
		"\x76D\x5\x128\x95\x2\x76C\x76A\x3\x2\x2\x2\x76C\x76B\x3\x2\x2\x2\x76D"+
		"\x123\x3\x2\x2\x2\x76E\x76F\x5\xE6t\x2\x76F\x125\x3\x2\x2\x2\x770\x771"+
		"\x5\x128\x95\x2\x771\x127\x3\x2\x2\x2\x772\x777\x5\x106\x84\x2\x773\x774"+
		"\a{\x2\x2\x774\x776\x5\x106\x84\x2\x775\x773\x3\x2\x2\x2\x776\x779\x3"+
		"\x2\x2\x2\x777\x775\x3\x2\x2\x2\x777\x778\x3\x2\x2\x2\x778\x129\x3\x2"+
		"\x2\x2\x779\x777\x3\x2\x2\x2\x77A\x77B\a/\x2\x2\x77B\x77C\ax\x2\x2\x77C"+
		"\x77D\x5\xFA~\x2\x77D\x77E\x5\x6\x4\x2\x77E\x77F\a\x36\x2\x2\x77F\x780"+
		"\x5\xE0q\x2\x780\x781\ay\x2\x2\x781\x782\x5\xEAv\x2\x782\x12B\x3\x2\x2"+
		"\x2\x783\x789\x5\x12E\x98\x2\x784\x789\x5\x130\x99\x2\x785\x789\x5\x132"+
		"\x9A\x2\x786\x789\x5\x134\x9B\x2\x787\x789\x5\x136\x9C\x2\x788\x783\x3"+
		"\x2\x2\x2\x788\x784\x3\x2\x2\x2\x788\x785\x3\x2\x2\x2\x788\x786\x3\x2"+
		"\x2\x2\x788\x787\x3\x2\x2\x2\x789\x12D\x3\x2\x2\x2\x78A\x78B\a\x13\x2"+
		"\x2\x78B\x78C\a}\x2\x2\x78C\x12F\x3\x2\x2\x2\x78D\x78E\a\x1C\x2\x2\x78E"+
		"\x78F\a}\x2\x2\x78F\x131\x3\x2\x2\x2\x790\x791\a\x32\x2\x2\x791\x792\x5"+
		"\x6\x4\x2\x792\x793\a}\x2\x2\x793\x79D\x3\x2\x2\x2\x794\x795\a\x32\x2"+
		"\x2\x795\x796\a\x16\x2\x2\x796\x797\x5\xE4s\x2\x797\x798\a}\x2\x2\x798"+
		"\x79D\x3\x2\x2\x2\x799\x79A\a\x32\x2\x2\x79A\x79B\a\x1E\x2\x2\x79B\x79D"+
		"\a}\x2\x2\x79C\x790\x3\x2\x2\x2\x79C\x794\x3\x2\x2\x2\x79C\x799\x3\x2"+
		"\x2\x2\x79D\x133\x3\x2\x2\x2\x79E\x7A0\aQ\x2\x2\x79F\x7A1\x5\xE0q\x2\x7A0"+
		"\x79F\x3\x2\x2\x2\x7A0\x7A1\x3\x2\x2\x2\x7A1\x7A2\x3\x2\x2\x2\x7A2\x7A3"+
		"\a}\x2\x2\x7A3\x135\x3\x2\x2\x2\x7A4\x7A6\a^\x2\x2\x7A5\x7A7\x5\xE0q\x2"+
		"\x7A6\x7A5\x3\x2\x2\x2\x7A6\x7A7\x3\x2\x2\x2\x7A7\x7A8\x3\x2\x2\x2\x7A8"+
		"\x7A9\a}\x2\x2\x7A9\x137\x3\x2\x2\x2\x7AA\x7AB\a`\x2\x2\x7AB\x7AD\x5\xEE"+
		"x\x2\x7AC\x7AE\x5\x13A\x9E\x2\x7AD\x7AC\x3\x2\x2\x2\x7AD\x7AE\x3\x2\x2"+
		"\x2\x7AE\x7B0\x3\x2\x2\x2\x7AF\x7B1\x5\x142\xA2\x2\x7B0\x7AF\x3\x2\x2"+
		"\x2\x7B0\x7B1\x3\x2\x2\x2\x7B1\x139\x3\x2\x2\x2\x7B2\x7B4\x5\x13C\x9F"+
		"\x2\x7B3\x7B5\x5\x140\xA1\x2\x7B4\x7B3\x3\x2\x2\x2\x7B4\x7B5\x3\x2\x2"+
		"\x2\x7B5\x7B8\x3\x2\x2\x2\x7B6\x7B8\x5\x140\xA1\x2\x7B7\x7B2\x3\x2\x2"+
		"\x2\x7B7\x7B6\x3\x2\x2\x2\x7B8\x13B\x3\x2\x2\x2\x7B9\x7BD\x5\x13E\xA0"+
		"\x2\x7BA\x7BC\x5\x13E\xA0\x2\x7BB\x7BA\x3\x2\x2\x2\x7BC\x7BF\x3\x2\x2"+
		"\x2\x7BD\x7BB\x3\x2\x2\x2\x7BD\x7BE\x3\x2\x2\x2\x7BE\x13D\x3\x2\x2\x2"+
		"\x7BF\x7BD\x3\x2\x2\x2\x7C0\x7C1\a\x17\x2\x2\x7C1\x7C2\ax\x2\x2\x7C2\x7C4"+
		"\x5\x1E\x10\x2\x7C3\x7C5\x5\x6\x4\x2\x7C4\x7C3\x3\x2\x2\x2\x7C4\x7C5\x3"+
		"\x2\x2\x2\x7C5\x7C6\x3\x2\x2\x2\x7C6\x7C7\ay\x2\x2\x7C7\x7C8\x5\xEEx\x2"+
		"\x7C8\x13F\x3\x2\x2\x2\x7C9\x7CA\a\x17\x2\x2\x7CA\x7CB\x5\xEEx\x2\x7CB"+
		"\x141\x3\x2\x2\x2\x7CC\x7CD\a+\x2\x2\x7CD\x7CE\x5\xEEx\x2\x7CE\x143\x3"+
		"\x2\x2\x2\x7CF\x7D0\a\x19\x2\x2\x7D0\x7D1\x5\xEEx\x2\x7D1\x145\x3\x2\x2"+
		"\x2\x7D2\x7D3\a\x64\x2\x2\x7D3\x7D4\x5\xEEx\x2\x7D4\x147\x3\x2\x2\x2\x7D5"+
		"\x7D6\a>\x2\x2\x7D6\x7D7\ax\x2\x2\x7D7\x7D8\x5\xE0q\x2\x7D8\x7D9\ay\x2"+
		"\x2\x7D9\x7DA\x5\xEAv\x2\x7DA\x149\x3\x2\x2\x2\x7DB\x7DC\ag\x2\x2\x7DC"+
		"\x7DD\ax\x2\x2\x7DD\x7DE\x5\x14C\xA7\x2\x7DE\x7DF\ay\x2\x2\x7DF\x7E0\x5"+
		"\xEAv\x2\x7E0\x14B\x3\x2\x2\x2\x7E1\x7E4\x5\xF8}\x2\x7E2\x7E4\x5\xE0q"+
		"\x2\x7E3\x7E1\x3\x2\x2\x2\x7E3\x7E2\x3\x2\x2\x2\x7E4\x14D\x3\x2\x2\x2"+
		"\x7E5\x7E6\x5\x2E6\x174\x2\x7E6\x7E7\aQ\x2\x2\x7E7\x7E8\x5\xE0q\x2\x7E8"+
		"\x7E9\a}\x2\x2\x7E9\x7EF\x3\x2\x2\x2\x7EA\x7EB\x5\x2E6\x174\x2\x7EB\x7EC"+
		"\a\x13\x2\x2\x7EC\x7ED\a}\x2\x2\x7ED\x7EF\x3\x2\x2\x2\x7EE\x7E5\x3\x2"+
		"\x2\x2\x7EE\x7EA\x3\x2\x2\x2\x7EF\x14F\x3\x2\x2\x2\x7F0\x7F2\a\x4\x2\x2"+
		"\x7F1\x7F0\x3\x2\x2\x2\x7F1\x7F2\x3\x2\x2\x2\x7F2\x7F4\x3\x2\x2\x2\x7F3"+
		"\x7F5\x5\x158\xAD\x2\x7F4\x7F3\x3\x2\x2\x2\x7F4\x7F5\x3\x2\x2\x2\x7F5"+
		"\x7F7\x3\x2\x2\x2\x7F6\x7F8\x5\x15C\xAF\x2\x7F7\x7F6\x3\x2\x2\x2\x7F7"+
		"\x7F8\x3\x2\x2\x2\x7F8\x7FC\x3\x2\x2\x2\x7F9\x7FB\x5\x25E\x130\x2\x7FA"+
		"\x7F9\x3\x2\x2\x2\x7FB\x7FE\x3\x2\x2\x2\x7FC\x7FA\x3\x2\x2\x2\x7FC\x7FD"+
		"\x3\x2\x2\x2\x7FD\x800\x3\x2\x2\x2\x7FE\x7FC\x3\x2\x2\x2\x7FF\x801\x5"+
		"\x164\xB3\x2\x800\x7FF\x3\x2\x2\x2\x800\x801\x3\x2\x2\x2\x801\x802\x3"+
		"\x2\x2\x2\x802\x803\a\x2\x2\x3\x803\x151\x3\x2\x2\x2\x804\x805\a@\x2\x2"+
		"\x805\x806\x5\x154\xAB\x2\x806\x808\x5\x156\xAC\x2\x807\x809\a}\x2\x2"+
		"\x808\x807\x3\x2\x2\x2\x808\x809\x3\x2\x2\x2\x809\x153\x3\x2\x2\x2\x80A"+
		"\x80F\x5\x6\x4\x2\x80B\x80C\az\x2\x2\x80C\x80E\x5\x6\x4\x2\x80D\x80B\x3"+
		"\x2\x2\x2\x80E\x811\x3\x2\x2\x2\x80F\x80D\x3\x2\x2\x2\x80F\x810\x3\x2"+
		"\x2\x2\x810\x155\x3\x2\x2\x2\x811\x80F\x3\x2\x2\x2\x812\x814\at\x2\x2"+
		"\x813\x815\x5\x158\xAD\x2\x814\x813\x3\x2\x2\x2\x814\x815\x3\x2\x2\x2"+
		"\x815\x817\x3\x2\x2\x2\x816\x818\x5\x15C\xAF\x2\x817\x816\x3\x2\x2\x2"+
		"\x817\x818\x3\x2\x2\x2\x818\x81A\x3\x2\x2\x2\x819\x81B\x5\x164\xB3\x2"+
		"\x81A\x819\x3\x2\x2\x2\x81A\x81B\x3\x2\x2\x2\x81B\x81C\x3\x2\x2\x2\x81C"+
		"\x81D\au\x2\x2\x81D\x157\x3\x2\x2\x2\x81E\x820\x5\x15A\xAE\x2\x81F\x81E"+
		"\x3\x2\x2\x2\x820\x821\x3\x2\x2\x2\x821\x81F\x3\x2\x2\x2\x821\x822\x3"+
		"\x2\x2\x2\x822\x159\x3\x2\x2\x2\x823\x824\a)\x2\x2\x824\x825\x5\x2E4\x173"+
		"\x2\x825\x826\x5\x6\x4\x2\x826\x827\a}\x2\x2\x827\x15B\x3\x2\x2\x2\x828"+
		"\x82A\x5\x15E\xB0\x2\x829\x828\x3\x2\x2\x2\x82A\x82B\x3\x2\x2\x2\x82B"+
		"\x829\x3\x2\x2\x2\x82B\x82C\x3\x2\x2\x2\x82C\x15D\x3\x2\x2\x2\x82D\x830"+
		"\x5\x160\xB1\x2\x82E\x830\x5\x162\xB2\x2\x82F\x82D\x3\x2\x2\x2\x82F\x82E"+
		"\x3\x2\x2\x2\x830\x15F\x3\x2\x2\x2\x831\x832\ag\x2\x2\x832\x833\x5\x6"+
		"\x4\x2\x833\x834\a\x88\x2\x2\x834\x835\x5\b\x5\x2\x835\x836\a}\x2\x2\x836"+
		"\x161\x3\x2\x2\x2\x837\x838\ag\x2\x2\x838\x839\x5\x2\x2\x2\x839\x83A\a"+
		"}\x2\x2\x83A\x163\x3\x2\x2\x2\x83B\x83D\x5\x166\xB4\x2\x83C\x83B\x3\x2"+
		"\x2\x2\x83D\x83E\x3\x2\x2\x2\x83E\x83C\x3\x2\x2\x2\x83E\x83F\x3\x2\x2"+
		"\x2\x83F\x165\x3\x2\x2\x2\x840\x843\x5\x152\xAA\x2\x841\x843\x5\x168\xB5"+
		"\x2\x842\x840\x3\x2\x2\x2\x842\x841\x3\x2\x2\x2\x843\x167\x3\x2\x2\x2"+
		"\x844\x846\x5\x264\x133\x2\x845\x844\x3\x2\x2\x2\x845\x846\x3\x2\x2\x2"+
		"\x846\x848\x3\x2\x2\x2\x847\x849\x5\x18E\xC8\x2\x848\x847\x3\x2\x2\x2"+
		"\x848\x849\x3\x2\x2\x2\x849\x84F\x3\x2\x2\x2\x84A\x850\x5\x300\x181\x2"+
		"\x84B\x850\x5\x302\x182\x2\x84C\x850\x5\x304\x183\x2\x84D\x850\x5\x306"+
		"\x184\x2\x84E\x850\x5\x308\x185\x2\x84F\x84A\x3\x2\x2\x2\x84F\x84B\x3"+
		"\x2\x2\x2\x84F\x84C\x3\x2\x2\x2\x84F\x84D\x3\x2\x2\x2\x84F\x84E\x3\x2"+
		"\x2\x2\x850\x169\x3\x2\x2\x2\x851\x852\x5\x6\x4\x2\x852\x853\a\x8C\x2"+
		"\x2\x853\x854\x5\x6\x4\x2\x854\x855\x5\n\x6\x2\x855\x16B\x3\x2\x2\x2\x856"+
		"\x858\x5\x264\x133\x2\x857\x856\x3\x2\x2\x2\x857\x858\x3\x2\x2\x2\x858"+
		"\x85A\x3\x2\x2\x2\x859\x85B\x5\x16E\xB8\x2\x85A\x859\x3\x2\x2\x2\x85A"+
		"\x85B\x3\x2\x2\x2\x85B\x85D\x3\x2\x2\x2\x85C\x85E\x5\x2E2\x172\x2\x85D"+
		"\x85C\x3\x2\x2\x2\x85D\x85E\x3\x2\x2\x2\x85E\x85F\x3\x2\x2\x2\x85F\x860"+
		"\a\x1A\x2\x2\x860\x862\x5\x6\x4\x2\x861\x863\x5\x172\xBA\x2\x862\x861"+
		"\x3\x2\x2\x2\x862\x863\x3\x2\x2\x2\x863\x865\x3\x2\x2\x2\x864\x866\x5"+
		"\x178\xBD\x2\x865\x864\x3\x2\x2\x2\x865\x866\x3\x2\x2\x2\x866\x868\x3"+
		"\x2\x2\x2\x867\x869\x5\x17C\xBF\x2\x868\x867\x3\x2\x2\x2\x868\x869\x3"+
		"\x2\x2\x2\x869\x86A\x3\x2\x2\x2\x86A\x86C\x5\x188\xC5\x2\x86B\x86D\a}"+
		"\x2\x2\x86C\x86B\x3\x2\x2\x2\x86C\x86D\x3\x2\x2\x2\x86D\x16D\x3\x2\x2"+
		"\x2\x86E\x872\x5\x170\xB9\x2\x86F\x871\x5\x170\xB9\x2\x870\x86F\x3\x2"+
		"\x2\x2\x871\x874\x3\x2\x2\x2\x872\x870\x3\x2\x2\x2\x872\x873\x3\x2\x2"+
		"\x2\x873\x16F\x3\x2\x2\x2\x874\x872\x3\x2\x2\x2\x875\x87F\a\x41\x2\x2"+
		"\x876\x87F\aM\x2\x2\x877\x87F\aL\x2\x2\x878\x87F\a\x39\x2\x2\x879\x87F"+
		"\aK\x2\x2\x87A\x87F\a\v\x2\x2\x87B\x87F\aS\x2\x2\x87C\x87F\aY\x2\x2\x87D"+
		"\x87F\x5\x280\x141\x2\x87E\x875\x3\x2\x2\x2\x87E\x876\x3\x2\x2\x2\x87E"+
		"\x877\x3\x2\x2\x2\x87E\x878\x3\x2\x2\x2\x87E\x879\x3\x2\x2\x2\x87E\x87A"+
		"\x3\x2\x2\x2\x87E\x87B\x3\x2\x2\x2\x87E\x87C\x3\x2\x2\x2\x87E\x87D\x3"+
		"\x2\x2\x2\x87F\x171\x3\x2\x2\x2\x880\x881\a\x89\x2\x2\x881\x882\x5\x174"+
		"\xBB\x2\x882\x883\a\x8A\x2\x2\x883\x173\x3\x2\x2\x2\x884\x886\x5\x264"+
		"\x133\x2\x885\x884\x3\x2\x2\x2\x885\x886\x3\x2\x2\x2\x886\x887\x3\x2\x2"+
		"\x2\x887\x88F\x5\x176\xBC\x2\x888\x88A\a{\x2\x2\x889\x88B\x5\x264\x133"+
		"\x2\x88A\x889\x3\x2\x2\x2\x88A\x88B\x3\x2\x2\x2\x88B\x88C\x3\x2\x2\x2"+
		"\x88C\x88E\x5\x176\xBC\x2\x88D\x888\x3\x2\x2\x2\x88E\x891\x3\x2\x2\x2"+
		"\x88F\x88D\x3\x2\x2\x2\x88F\x890\x3\x2\x2\x2\x890\x175\x3\x2\x2\x2\x891"+
		"\x88F\x3\x2\x2\x2\x892\x893\x5\x6\x4\x2\x893\x177\x3\x2\x2\x2\x894\x895"+
		"\a|\x2\x2\x895\x89A\x5\x1E\x10\x2\x896\x897\a{\x2\x2\x897\x899\x5 \x11"+
		"\x2\x898\x896\x3\x2\x2\x2\x899\x89C\x3\x2\x2\x2\x89A\x898\x3\x2\x2\x2"+
		"\x89A\x89B\x3\x2\x2\x2\x89B\x179\x3\x2\x2\x2\x89C\x89A\x3\x2\x2\x2\x89D"+
		"\x8A2\x5 \x11\x2\x89E\x89F\a{\x2\x2\x89F\x8A1\x5 \x11\x2\x8A0\x89E\x3"+
		"\x2\x2\x2\x8A1\x8A4\x3\x2\x2\x2\x8A2\x8A0\x3\x2\x2\x2\x8A2\x8A3\x3\x2"+
		"\x2\x2\x8A3\x17B\x3\x2\x2\x2\x8A4\x8A2\x3\x2\x2\x2\x8A5\x8A9\x5\x17E\xC0"+
		"\x2\x8A6\x8A8\x5\x17E\xC0\x2\x8A7\x8A6\x3\x2\x2\x2\x8A8\x8AB\x3\x2\x2"+
		"\x2\x8A9\x8A7\x3\x2\x2\x2\x8A9\x8AA\x3\x2\x2\x2\x8AA\x17D\x3\x2\x2\x2"+
		"\x8AB\x8A9\x3\x2\x2\x2\x8AC\x8AD\x5\x2CC\x167\x2\x8AD\x8AE\x5\x176\xBC"+
		"\x2\x8AE\x8AF\a|\x2\x2\x8AF\x8B0\x5\x180\xC1\x2\x8B0\x17F\x3\x2\x2\x2"+
		"\x8B1\x8BC\x5\x186\xC4\x2\x8B2\x8B5\x5\x182\xC2\x2\x8B3\x8B4\a{\x2\x2"+
		"\x8B4\x8B6\x5\x184\xC3\x2\x8B5\x8B3\x3\x2\x2\x2\x8B5\x8B6\x3\x2\x2\x2"+
		"\x8B6\x8B9\x3\x2\x2\x2\x8B7\x8B8\a{\x2\x2\x8B8\x8BA\x5\x186\xC4\x2\x8B9"+
		"\x8B7\x3\x2\x2\x2\x8B9\x8BA\x3\x2\x2\x2\x8BA\x8BC\x3\x2\x2\x2\x8BB\x8B1"+
		"\x3\x2\x2\x2\x8BB\x8B2\x3\x2\x2\x2\x8BC\x181\x3\x2\x2\x2\x8BD\x8C1\x5"+
		"\x1E\x10\x2\x8BE\x8C1\a\x1A\x2\x2\x8BF\x8C1\a[\x2\x2\x8C0\x8BD\x3\x2\x2"+
		"\x2\x8C0\x8BE\x3\x2\x2\x2\x8C0\x8BF\x3\x2\x2\x2\x8C1\x183\x3\x2\x2\x2"+
		"\x8C2\x8C7\x5 \x11\x2\x8C3\x8C4\a{\x2\x2\x8C4\x8C6\x5 \x11\x2\x8C5\x8C3"+
		"\x3\x2\x2\x2\x8C6\x8C9\x3\x2\x2\x2\x8C7\x8C5\x3\x2\x2\x2\x8C7\x8C8\x3"+
		"\x2\x2\x2\x8C8\x185\x3\x2\x2\x2\x8C9\x8C7\x3\x2\x2\x2\x8CA\x8CB\a\x41"+
		"\x2\x2\x8CB\x8CC\ax\x2\x2\x8CC\x8CD\ay\x2\x2\x8CD\x187\x3\x2\x2\x2\x8CE"+
		"\x8D0\at\x2\x2\x8CF\x8D1\x5\x18A\xC6\x2\x8D0\x8CF\x3\x2\x2\x2\x8D0\x8D1"+
		"\x3\x2\x2\x2\x8D1\x8D2\x3\x2\x2\x2\x8D2\x8D3\au\x2\x2\x8D3\x189\x3\x2"+
		"\x2\x2\x8D4\x8D6\x5\x18C\xC7\x2\x8D5\x8D4\x3\x2\x2\x2\x8D6\x8D7\x3\x2"+
		"\x2\x2\x8D7\x8D5\x3\x2\x2\x2\x8D7\x8D8\x3\x2\x2\x2\x8D8\x18B\x3\x2\x2"+
		"\x2\x8D9\x8DB\x5\x264\x133\x2\x8DA\x8D9\x3\x2\x2\x2\x8DA\x8DB\x3\x2\x2"+
		"\x2\x8DB\x8DD\x3\x2\x2\x2\x8DC\x8DE\x5\x18E\xC8\x2\x8DD\x8DC\x3\x2\x2"+
		"\x2\x8DD\x8DE\x3\x2\x2\x2\x8DE\x8E6\x3\x2\x2\x2\x8DF\x8E7\x5\x192\xCA"+
		"\x2\x8E0\x8E1\a\x87\x2\x2\x8E1\x8E2\x5\x6\x4\x2\x8E2\x8E3\ax\x2\x2\x8E3"+
		"\x8E4\ay\x2\x2\x8E4\x8E5\x5\x208\x105\x2\x8E5\x8E7\x3\x2\x2\x2\x8E6\x8DF"+
		"\x3\x2\x2\x2\x8E6\x8E0\x3\x2\x2\x2\x8E7\x8EA\x3\x2\x2\x2\x8E8\x8EA\a\x3"+
		"\x2\x2\x8E9\x8DA\x3\x2\x2\x2\x8E9\x8E8\x3\x2\x2\x2\x8EA\x18D\x3\x2\x2"+
		"\x2\x8EB\x8ED\x5\x190\xC9\x2\x8EC\x8EB\x3\x2\x2\x2\x8ED\x8EE\x3\x2\x2"+
		"\x2\x8EE\x8EC\x3\x2\x2\x2\x8EE\x8EF\x3\x2\x2\x2\x8EF\x18F\x3\x2\x2\x2"+
		"\x8F0\x900\a\x41\x2\x2\x8F1\x900\aM\x2\x2\x8F2\x900\aL\x2\x2\x8F3\x900"+
		"\a\x39\x2\x2\x8F4\x900\aK\x2\x2\x8F5\x900\aN\x2\x2\x8F6\x900\aj\x2\x2"+
		"\x8F7\x900\ah\x2\x2\x8F8\x900\aS\x2\x2\x8F9\x900\aH\x2\x2\x8FA\x900\a"+
		"\v\x2\x2\x8FB\x900\aY\x2\x2\x8FC\x900\a\x65\x2\x2\x8FD\x900\a)\x2\x2\x8FE"+
		"\x900\x5\x2E2\x172\x2\x8FF\x8F0\x3\x2\x2\x2\x8FF\x8F1\x3\x2\x2\x2\x8FF"+
		"\x8F2\x3\x2\x2\x2\x8FF\x8F3\x3\x2\x2\x2\x8FF\x8F4\x3\x2\x2\x2\x8FF\x8F5"+
		"\x3\x2\x2\x2\x8FF\x8F6\x3\x2\x2\x2\x8FF\x8F7\x3\x2\x2\x2\x8FF\x8F8\x3"+
		"\x2\x2\x2\x8FF\x8F9\x3\x2\x2\x2\x8FF\x8FA\x3\x2\x2\x2\x8FF\x8FB\x3\x2"+
		"\x2\x2\x8FF\x8FC\x3\x2\x2\x2\x8FF\x8FD\x3\x2\x2\x2\x8FF\x8FE\x3\x2\x2"+
		"\x2\x900\x191\x3\x2\x2\x2\x901\x911\x5\x310\x189\x2\x902\x911\x5\x194"+
		"\xCB\x2\x903\x911\x5\x30A\x186\x2\x904\x905\x5\x1F0\xF9\x2\x905\x906\x5"+
		"\x1F2\xFA\x2\x906\x911\x3\x2\x2\x2\x907\x911\x5\x316\x18C\x2\x908\x909"+
		"\x5*\x16\x2\x909\x90A\x5\x318\x18D\x2\x90A\x911\x3\x2\x2\x2\x90B\x911"+
		"\x5\x300\x181\x2\x90C\x911\x5\x302\x182\x2\x90D\x911\x5\x304\x183\x2\x90E"+
		"\x911\x5\x306\x184\x2\x90F\x911\x5\x308\x185\x2\x910\x901\x3\x2\x2\x2"+
		"\x910\x902\x3\x2\x2\x2\x910\x903\x3\x2\x2\x2\x910\x904\x3\x2\x2\x2\x910"+
		"\x907\x3\x2\x2\x2\x910\x908\x3\x2\x2\x2\x910\x90B\x3\x2\x2\x2\x910\x90C"+
		"\x3\x2\x2\x2\x910\x90D\x3\x2\x2\x2\x910\x90E\x3\x2\x2\x2\x910\x90F\x3"+
		"\x2\x2\x2\x911\x193\x3\x2\x2\x2\x912\x91C\x5\f\a\x2\x913\x914\x5 \x11"+
		"\x2\x914\x915\az\x2\x2\x915\x916\x5\x312\x18A\x2\x916\x91D\x3\x2\x2\x2"+
		"\x917\x91D\x5\x318\x18D\x2\x918\x91D\x5\x30E\x188\x2\x919\x91D\x5\x312"+
		"\x18A\x2\x91A\x91D\x5\x31E\x190\x2\x91B\x91D\x5\x30C\x187\x2\x91C\x913"+
		"\x3\x2\x2\x2\x91C\x917\x3\x2\x2\x2\x91C\x918\x3\x2\x2\x2\x91C\x919\x3"+
		"\x2\x2\x2\x91C\x91A\x3\x2\x2\x2\x91C\x91B\x3\x2\x2\x2\x91D\x195\x3\x2"+
		"\x2\x2\x91E\x923\x5\x198\xCD\x2\x91F\x920\a{\x2\x2\x920\x922\x5\x198\xCD"+
		"\x2\x921\x91F\x3\x2\x2\x2\x922\x925\x3\x2\x2\x2\x923\x921\x3\x2\x2\x2"+
		"\x923\x924\x3\x2\x2\x2\x924\x197\x3\x2\x2\x2\x925\x923\x3\x2\x2\x2\x926"+
		"\x927\x5\x6\x4\x2\x927\x928\a\x88\x2\x2\x928\x929\x5\xE4s\x2\x929\x199"+
		"\x3\x2\x2\x2\x92A\x92F\x5\x19C\xCF\x2\x92B\x92C\a{\x2\x2\x92C\x92E\x5"+
		"\x19C\xCF\x2\x92D\x92B\x3\x2\x2\x2\x92E\x931\x3\x2\x2\x2\x92F\x92D\x3"+
		"\x2\x2\x2\x92F\x930\x3\x2\x2\x2\x930\x19B\x3\x2\x2\x2\x931\x92F\x3\x2"+
		"\x2\x2\x932\x938\x5\x6\x4\x2\x933\x934\x5\x6\x4\x2\x934\x935\a\x88\x2"+
		"\x2\x935\x936\x5\x19E\xD0\x2\x936\x938\x3\x2\x2\x2\x937\x932\x3\x2\x2"+
		"\x2\x937\x933\x3\x2\x2\x2\x938\x19D\x3\x2\x2\x2\x939\x93C\x5\xE0q\x2\x93A"+
		"\x93C\x5\x224\x113\x2\x93B\x939\x3\x2\x2\x2\x93B\x93A\x3\x2\x2\x2\x93C"+
		"\x19F\x3\x2\x2\x2\x93D\x93E\x5\x1A2\xD2\x2\x93E\x93F\x5\x1AC\xD7\x2\x93F"+
		"\x1A1\x3\x2\x2\x2\x940\x942\x5\x264\x133\x2\x941\x940\x3\x2\x2\x2\x941"+
		"\x942\x3\x2\x2\x2\x942\x944\x3\x2\x2\x2\x943\x945\x5\x1A4\xD3\x2\x944"+
		"\x943\x3\x2\x2\x2\x944\x945\x3\x2\x2\x2\x945\x947\x3\x2\x2\x2\x946\x948"+
		"\x5\x2E2\x172\x2\x947\x946\x3\x2\x2\x2\x947\x948\x3\x2\x2\x2\x948\x949"+
		"\x3\x2\x2\x2\x949\x94A\x5\x1A8\xD5\x2\x94A\x94C\x5\x1AA\xD6\x2\x94B\x94D"+
		"\x5\x172\xBA\x2\x94C\x94B\x3\x2\x2\x2\x94C\x94D\x3\x2\x2\x2\x94D\x94E"+
		"\x3\x2\x2\x2\x94E\x950\ax\x2\x2\x94F\x951\x5\x1AE\xD8\x2\x950\x94F\x3"+
		"\x2\x2\x2\x950\x951\x3\x2\x2\x2\x951\x952\x3\x2\x2\x2\x952\x954\ay\x2"+
		"\x2\x953\x955\x5\x17C\xBF\x2\x954\x953\x3\x2\x2\x2\x954\x955\x3\x2\x2"+
		"\x2\x955\x1A3\x3\x2\x2\x2\x956\x958\x5\x1A6\xD4\x2\x957\x956\x3\x2\x2"+
		"\x2\x958\x959\x3\x2\x2\x2\x959\x957\x3\x2\x2\x2\x959\x95A\x3\x2\x2\x2"+
		"\x95A\x1A5\x3\x2\x2\x2\x95B\x968\a\x41\x2\x2\x95C\x968\aM\x2\x2\x95D\x968"+
		"\aL\x2\x2\x95E\x968\a\x39\x2\x2\x95F\x968\aK\x2\x2\x960\x968\aY\x2\x2"+
		"\x961\x968\ah\x2\x2\x962\x968\aS\x2\x2\x963\x968\aH\x2\x2\x964\x968\a"+
		"\v\x2\x2\x965\x968\a)\x2\x2\x966\x968\x5\x28A\x146\x2\x967\x95B\x3\x2"+
		"\x2\x2\x967\x95C\x3\x2\x2\x2\x967\x95D\x3\x2\x2\x2\x967\x95E\x3\x2\x2"+
		"\x2\x967\x95F\x3\x2\x2\x2\x967\x960\x3\x2\x2\x2\x967\x961\x3\x2\x2\x2"+
		"\x967\x962\x3\x2\x2\x2\x967\x963\x3\x2\x2\x2\x967\x964\x3\x2\x2\x2\x967"+
		"\x965\x3\x2\x2\x2\x967\x966\x3\x2\x2\x2\x968\x1A7\x3\x2\x2\x2\x969\x96C"+
		"\x5\f\a\x2\x96A\x96C\ai\x2\x2\x96B\x969\x3\x2\x2\x2\x96B\x96A\x3\x2\x2"+
		"\x2\x96C\x1A9\x3\x2\x2\x2\x96D\x96E\x5 \x11\x2\x96E\x1AB\x3\x2\x2\x2\x96F"+
		"\x972\x5\xEEx\x2\x970\x972\a}\x2\x2\x971\x96F\x3\x2\x2\x2\x971\x970\x3"+
		"\x2\x2\x2\x972\x1AD\x3\x2\x2\x2\x973\x97A\x5\x1B8\xDD\x2\x974\x977\x5"+
		"\x1B0\xD9\x2\x975\x976\a{\x2\x2\x976\x978\x5\x1B8\xDD\x2\x977\x975\x3"+
		"\x2\x2\x2\x977\x978\x3\x2\x2\x2\x978\x97A\x3\x2\x2\x2\x979\x973\x3\x2"+
		"\x2\x2\x979\x974\x3\x2\x2\x2\x97A\x1AF\x3\x2\x2\x2\x97B\x980\x5\x1B2\xDA"+
		"\x2\x97C\x97D\a{\x2\x2\x97D\x97F\x5\x1B2\xDA\x2\x97E\x97C\x3\x2\x2\x2"+
		"\x97F\x982\x3\x2\x2\x2\x980\x97E\x3\x2\x2\x2\x980\x981\x3\x2\x2\x2\x981"+
		"\x1B1\x3\x2\x2\x2\x982\x980\x3\x2\x2\x2\x983\x985\x5\x264\x133\x2\x984"+
		"\x983\x3\x2\x2\x2\x984\x985\x3\x2\x2\x2\x985\x987\x3\x2\x2\x2\x986\x988"+
		"\x5\x1B6\xDC\x2\x987\x986\x3\x2\x2\x2\x987\x988\x3\x2\x2\x2\x988\x989"+
		"\x3\x2\x2\x2\x989\x98A\x5\f\a\x2\x98A\x98C\x5\x6\x4\x2\x98B\x98D\x5\x1B4"+
		"\xDB\x2\x98C\x98B\x3\x2\x2\x2\x98C\x98D\x3\x2\x2\x2\x98D\x990\x3\x2\x2"+
		"\x2\x98E\x990\x5\x2F2\x17A\x2\x98F\x984\x3\x2\x2\x2\x98F\x98E\x3\x2\x2"+
		"\x2\x990\x1B3\x3\x2\x2\x2\x991\x992\a\x88\x2\x2\x992\x993\x5\xE0q\x2\x993"+
		"\x1B5\x3\x2\x2\x2\x994\x995\t\n\x2\x2\x995\x1B7\x3\x2\x2\x2\x996\x998"+
		"\x5\x264\x133\x2\x997\x996\x3\x2\x2\x2\x997\x998\x3\x2\x2\x2\x998\x999"+
		"\x3\x2\x2\x2\x999\x99A\aI\x2\x2\x99A\x99B\x5\x21A\x10E\x2\x99B\x99C\x5"+
		"\x6\x4\x2\x99C\x1B9\x3\x2\x2\x2\x99D\x99F\x5\x264\x133\x2\x99E\x99D\x3"+
		"\x2\x2\x2\x99E\x99F\x3\x2\x2\x2\x99F\x9A1\x3\x2\x2\x2\x9A0\x9A2\x5\x1BC"+
		"\xDF\x2\x9A1\x9A0\x3\x2\x2\x2\x9A1\x9A2\x3\x2\x2\x2\x9A2\x9A3\x3\x2\x2"+
		"\x2\x9A3\x9A4\x5\f\a\x2\x9A4\x9A5\x5\x1AA\xD6\x2\x9A5\x9A6\at\x2\x2\x9A6"+
		"\x9A7\x5\x1C0\xE1\x2\x9A7\x9A8\au\x2\x2\x9A8\x1BB\x3\x2\x2\x2\x9A9\x9AB"+
		"\x5\x1BE\xE0\x2\x9AA\x9A9\x3\x2\x2\x2\x9AB\x9AC\x3\x2\x2\x2\x9AC\x9AA"+
		"\x3\x2\x2\x2\x9AC\x9AD\x3\x2\x2\x2\x9AD\x1BD\x3\x2\x2\x2\x9AE\x9BB\a\x41"+
		"\x2\x2\x9AF\x9BB\aM\x2\x2\x9B0\x9BB\aL\x2\x2\x9B1\x9BB\a\x39\x2\x2\x9B2"+
		"\x9BB\aK\x2\x2\x9B3\x9BB\aY\x2\x2\x9B4\x9BB\ah\x2\x2\x9B5\x9BB\aS\x2\x2"+
		"\x9B6\x9BB\aH\x2\x2\x9B7\x9BB\a\v\x2\x2\x9B8\x9BB\a)\x2\x2\x9B9\x9BB\x5"+
		"\x28C\x147\x2\x9BA\x9AE\x3\x2\x2\x2\x9BA\x9AF\x3\x2\x2\x2\x9BA\x9B0\x3"+
		"\x2\x2\x2\x9BA\x9B1\x3\x2\x2\x2\x9BA\x9B2\x3\x2\x2\x2\x9BA\x9B3\x3\x2"+
		"\x2\x2\x9BA\x9B4\x3\x2\x2\x2\x9BA\x9B5\x3\x2\x2\x2\x9BA\x9B6\x3\x2\x2"+
		"\x2\x9BA\x9B7\x3\x2\x2\x2\x9BA\x9B8\x3\x2\x2\x2\x9BA\x9B9\x3\x2\x2\x2"+
		"\x9BB\x1BF\x3\x2\x2\x2\x9BC\x9BE\x5\x264\x133\x2\x9BD\x9BC\x3\x2\x2\x2"+
		"\x9BD\x9BE\x3\x2\x2\x2\x9BE\x9C0\x3\x2\x2\x2\x9BF\x9C1\x5\x1C6\xE4\x2"+
		"\x9C0\x9BF\x3\x2\x2\x2\x9C0\x9C1\x3\x2\x2\x2\x9C1\x9CC\x3\x2\x2\x2\x9C2"+
		"\x9C3\x5\x2E8\x175\x2\x9C3\x9C5\x5\x1C8\xE5\x2\x9C4\x9C6\x5\x1C4\xE3\x2"+
		"\x9C5\x9C4\x3\x2\x2\x2\x9C5\x9C6\x3\x2\x2\x2\x9C6\x9CD\x3\x2\x2\x2\x9C7"+
		"\x9C8\x5\x2EA\x176\x2\x9C8\x9CA\x5\x1C8\xE5\x2\x9C9\x9CB\x5\x1C2\xE2\x2"+
		"\x9CA\x9C9\x3\x2\x2\x2\x9CA\x9CB\x3\x2\x2\x2\x9CB\x9CD\x3\x2\x2\x2\x9CC"+
		"\x9C2\x3\x2\x2\x2\x9CC\x9C7\x3\x2\x2\x2\x9CD\x1C1\x3\x2\x2\x2\x9CE\x9D0"+
		"\x5\x264\x133\x2\x9CF\x9CE\x3\x2\x2\x2\x9CF\x9D0\x3\x2\x2\x2\x9D0\x9D2"+
		"\x3\x2\x2\x2\x9D1\x9D3\x5\x1C6\xE4\x2\x9D2\x9D1\x3\x2\x2\x2\x9D2\x9D3"+
		"\x3\x2\x2\x2\x9D3\x9D4\x3\x2\x2\x2\x9D4\x9D5\x5\x2E8\x175\x2\x9D5\x9D6"+
		"\x5\x1C8\xE5\x2\x9D6\x1C3\x3\x2\x2\x2\x9D7\x9D9\x5\x264\x133\x2\x9D8\x9D7"+
		"\x3\x2\x2\x2\x9D8\x9D9\x3\x2\x2\x2\x9D9\x9DB\x3\x2\x2\x2\x9DA\x9DC\x5"+
		"\x1C6\xE4\x2\x9DB\x9DA\x3\x2\x2\x2\x9DB\x9DC\x3\x2\x2\x2\x9DC\x9DD\x3"+
		"\x2\x2\x2\x9DD\x9DE\x5\x2EA\x176\x2\x9DE\x9DF\x5\x1C8\xE5\x2\x9DF\x1C5"+
		"\x3\x2\x2\x2\x9E0\x9E8\aL\x2\x2\x9E1\x9E8\a\x39\x2\x2\x9E2\x9E8\aK\x2"+
		"\x2\x9E3\x9E4\aL\x2\x2\x9E4\x9E8\a\x39\x2\x2\x9E5\x9E6\a\x39\x2\x2\x9E6"+
		"\x9E8\aL\x2\x2\x9E7\x9E0\x3\x2\x2\x2\x9E7\x9E1\x3\x2\x2\x2\x9E7\x9E2\x3"+
		"\x2\x2\x2\x9E7\x9E3\x3\x2\x2\x2\x9E7\x9E5\x3\x2\x2\x2\x9E8\x1C7\x3\x2"+
		"\x2\x2\x9E9\x9EC\x5\xEEx\x2\x9EA\x9EC\a}\x2\x2\x9EB\x9E9\x3\x2\x2\x2\x9EB"+
		"\x9EA\x3\x2\x2\x2\x9EC\x1C9\x3\x2\x2\x2\x9ED\x9EF\x5\x264\x133\x2\x9EE"+
		"\x9ED\x3\x2\x2\x2\x9EE\x9EF\x3\x2\x2\x2\x9EF\x9F1\x3\x2\x2\x2\x9F0\x9F2"+
		"\x5\x1CC\xE7\x2\x9F1\x9F0\x3\x2\x2\x2\x9F1\x9F2\x3\x2\x2\x2\x9F2\x9F3"+
		"\x3\x2\x2\x2\x9F3\x9F4\a\'\x2\x2\x9F4\x9FD\x5\f\a\x2\x9F5\x9F6\x5\x19A"+
		"\xCE\x2\x9F6\x9F7\a}\x2\x2\x9F7\x9FE\x3\x2\x2\x2\x9F8\x9F9\x5\x1AA\xD6"+
		"\x2\x9F9\x9FA\at\x2\x2\x9FA\x9FB\x5\x1D0\xE9\x2\x9FB\x9FC\au\x2\x2\x9FC"+
		"\x9FE\x3\x2\x2\x2\x9FD\x9F5\x3\x2\x2\x2\x9FD\x9F8\x3\x2\x2\x2\x9FE\x1CB"+
		"\x3\x2\x2\x2\x9FF\xA03\x5\x1CE\xE8\x2\xA00\xA02\x5\x1CE\xE8\x2\xA01\xA00"+
		"\x3\x2\x2\x2\xA02\xA05\x3\x2\x2\x2\xA03\xA01\x3\x2\x2\x2\xA03\xA04\x3"+
		"\x2\x2\x2\xA04\x1CD\x3\x2\x2\x2\xA05\xA03\x3\x2\x2\x2\xA06\xA13\a\x41"+
		"\x2\x2\xA07\xA13\aM\x2\x2\xA08\xA13\aL\x2\x2\xA09\xA13\a\x39\x2\x2\xA0A"+
		"\xA13\aK\x2\x2\xA0B\xA13\aY\x2\x2\xA0C\xA13\ah\x2\x2\xA0D\xA13\aS\x2\x2"+
		"\xA0E\xA13\aH\x2\x2\xA0F\xA13\a\v\x2\x2\xA10\xA13\a)\x2\x2\xA11\xA13\x5"+
		"\x28E\x148\x2\xA12\xA06\x3\x2\x2\x2\xA12\xA07\x3\x2\x2\x2\xA12\xA08\x3"+
		"\x2\x2\x2\xA12\xA09\x3\x2\x2\x2\xA12\xA0A\x3\x2\x2\x2\xA12\xA0B\x3\x2"+
		"\x2\x2\xA12\xA0C\x3\x2\x2\x2\xA12\xA0D\x3\x2\x2\x2\xA12\xA0E\x3\x2\x2"+
		"\x2\xA12\xA0F\x3\x2\x2\x2\xA12\xA10\x3\x2\x2\x2\xA12\xA11\x3\x2\x2\x2"+
		"\xA13\x1CF\x3\x2\x2\x2\xA14\xA16\x5\x264\x133\x2\xA15\xA14\x3\x2\x2\x2"+
		"\xA15\xA16\x3\x2\x2\x2\xA16\xA1F\x3\x2\x2\x2\xA17\xA18\x5\x2EC\x177\x2"+
		"\xA18\xA19\x5\xEEx\x2\xA19\xA1A\x5\x1D4\xEB\x2\xA1A\xA20\x3\x2\x2\x2\xA1B"+
		"\xA1C\x5\x2EE\x178\x2\xA1C\xA1D\x5\xEEx\x2\xA1D\xA1E\x5\x1D2\xEA\x2\xA1E"+
		"\xA20\x3\x2\x2\x2\xA1F\xA17\x3\x2\x2\x2\xA1F\xA1B\x3\x2\x2\x2\xA20\x1D1"+
		"\x3\x2\x2\x2\xA21\xA23\x5\x264\x133\x2\xA22\xA21\x3\x2\x2\x2\xA22\xA23"+
		"\x3\x2\x2\x2\xA23\xA24\x3\x2\x2\x2\xA24\xA25\x5\x2EC\x177\x2\xA25\xA26"+
		"\x5\xEEx\x2\xA26\x1D3\x3\x2\x2\x2\xA27\xA29\x5\x264\x133\x2\xA28\xA27"+
		"\x3\x2\x2\x2\xA28\xA29\x3\x2\x2\x2\xA29\xA2A\x3\x2\x2\x2\xA2A\xA2B\x5"+
		"\x2EE\x178\x2\xA2B\xA2C\x5\xEEx\x2\xA2C\x1D5\x3\x2\x2\x2\xA2D\xA2F\x5"+
		"\x264\x133\x2\xA2E\xA2D\x3\x2\x2\x2\xA2E\xA2F\x3\x2\x2\x2\xA2F\xA31\x3"+
		"\x2\x2\x2\xA30\xA32\x5\x1D8\xED\x2\xA31\xA30\x3\x2\x2\x2\xA31\xA32\x3"+
		"\x2\x2\x2\xA32\xA33\x3\x2\x2\x2\xA33\xA34\x5\x1DC\xEF\x2\xA34\xA35\at"+
		"\x2\x2\xA35\xA36\x5\x1C0\xE1\x2\xA36\xA37\au\x2\x2\xA37\x1D7\x3\x2\x2"+
		"\x2\xA38\xA3C\x5\x1DA\xEE\x2\xA39\xA3B\x5\x1DA\xEE\x2\xA3A\xA39\x3\x2"+
		"\x2\x2\xA3B\xA3E\x3\x2\x2\x2\xA3C\xA3A\x3\x2\x2\x2\xA3C\xA3D\x3\x2\x2"+
		"\x2\xA3D\x1D9\x3\x2\x2\x2\xA3E\xA3C\x3\x2\x2\x2\xA3F\xA4B\a\x41\x2\x2"+
		"\xA40\xA4B\aM\x2\x2\xA41\xA4B\aL\x2\x2\xA42\xA4B\a\x39\x2\x2\xA43\xA4B"+
		"\aK\x2\x2\xA44\xA4B\ah\x2\x2\xA45\xA4B\aS\x2\x2\xA46\xA4B\aH\x2\x2\xA47"+
		"\xA4B\a\v\x2\x2\xA48\xA4B\a)\x2\x2\xA49\xA4B\x5\x290\x149\x2\xA4A\xA3F"+
		"\x3\x2\x2\x2\xA4A\xA40\x3\x2\x2\x2\xA4A\xA41\x3\x2\x2\x2\xA4A\xA42\x3"+
		"\x2\x2\x2\xA4A\xA43\x3\x2\x2\x2\xA4A\xA44\x3\x2\x2\x2\xA4A\xA45\x3\x2"+
		"\x2\x2\xA4A\xA46\x3\x2\x2\x2\xA4A\xA47\x3\x2\x2\x2\xA4A\xA48\x3\x2\x2"+
		"\x2\xA4A\xA49\x3\x2\x2\x2\xA4B\x1DB\x3\x2\x2\x2\xA4C\xA50\x5\f\a\x2\xA4D"+
		"\xA4E\x5 \x11\x2\xA4E\xA4F\az\x2\x2\xA4F\xA51\x3\x2\x2\x2\xA50\xA4D\x3"+
		"\x2\x2\x2\xA50\xA51\x3\x2\x2\x2\xA51\xA52\x3\x2\x2\x2\xA52\xA53\a]\x2"+
		"\x2\xA53\xA54\av\x2\x2\xA54\xA55\x5\x1AE\xD8\x2\xA55\xA56\aw\x2\x2\xA56"+
		"\x1DD\x3\x2\x2\x2\xA57\xA59\x5\x264\x133\x2\xA58\xA57\x3\x2\x2\x2\xA58"+
		"\xA59\x3\x2\x2\x2\xA59\xA5A\x3\x2\x2\x2\xA5A\xA5B\x5\x1E0\xF1\x2\xA5B"+
		"\xA5C\x5\x1E4\xF3\x2\xA5C\xA5D\x5\x1F2\xFA\x2\xA5D\x1DF\x3\x2\x2\x2\xA5E"+
		"\xA62\x5\x1E2\xF2\x2\xA5F\xA61\x5\x1E2\xF2\x2\xA60\xA5F\x3\x2\x2\x2\xA61"+
		"\xA64\x3\x2\x2\x2\xA62\xA60\x3\x2\x2\x2\xA62\xA63\x3\x2\x2\x2\xA63\x1E1"+
		"\x3\x2\x2\x2\xA64\xA62\x3\x2\x2\x2\xA65\xA6A\aM\x2\x2\xA66\xA6A\aY\x2"+
		"\x2\xA67\xA6A\a)\x2\x2\xA68\xA6A\x5\x292\x14A\x2\xA69\xA65\x3\x2\x2\x2"+
		"\xA69\xA66\x3\x2\x2\x2\xA69\xA67\x3\x2\x2\x2\xA69\xA68\x3\x2\x2\x2\xA6A"+
		"\x1E3\x3\x2\x2\x2\xA6B\xA6F\x5\x1E6\xF4\x2\xA6C\xA6F\x5\x1EA\xF6\x2\xA6D"+
		"\xA6F\x5\x1F0\xF9\x2\xA6E\xA6B\x3\x2\x2\x2\xA6E\xA6C\x3\x2\x2\x2\xA6E"+
		"\xA6D\x3\x2\x2\x2\xA6F\x1E5\x3\x2\x2\x2\xA70\xA71\x5\f\a\x2\xA71\xA72"+
		"\a\x45\x2\x2\xA72\xA73\x5\x1E8\xF5\x2\xA73\xA74\ax\x2\x2\xA74\xA75\x5"+
		"\f\a\x2\xA75\xA76\x5\x6\x4\x2\xA76\xA77\ay\x2\x2\xA77\x1E7\x3\x2\x2\x2"+
		"\xA78\xA79\t\v\x2\x2\xA79\x1E9\x3\x2\x2\x2\xA7A\xA7B\x5\f\a\x2\xA7B\xA7C"+
		"\a\x45\x2\x2\xA7C\xA7D\x5\x1EC\xF7\x2\xA7D\xA7E\ax\x2\x2\xA7E\xA7F\x5"+
		"\f\a\x2\xA7F\xA80\x5\x6\x4\x2\xA80\xA81\a{\x2\x2\xA81\xA82\x5\f\a\x2\xA82"+
		"\xA83\x5\x6\x4\x2\xA83\xA84\ay\x2\x2\xA84\x1EB\x3\x2\x2\x2\xA85\xA96\a"+
		"~\x2\x2\xA86\xA96\a\x7F\x2\x2\xA87\xA96\a\x80\x2\x2\xA88\xA96\a\x81\x2"+
		"\x2\xA89\xA96\a\x82\x2\x2\xA8A\xA96\a\x83\x2\x2\xA8B\xA96\a\x84\x2\x2"+
		"\xA8C\xA96\a\x85\x2\x2\xA8D\xA96\a\x9F\x2\x2\xA8E\xA96\x5\x2F6\x17C\x2"+
		"\xA8F\xA96\a\x93\x2\x2\xA90\xA96\a\x94\x2\x2\xA91\xA96\a\x8A\x2\x2\xA92"+
		"\xA96\a\x89\x2\x2\xA93\xA96\a\x96\x2\x2\xA94\xA96\a\x95\x2\x2\xA95\xA85"+
		"\x3\x2\x2\x2\xA95\xA86\x3\x2\x2\x2\xA95\xA87\x3\x2\x2\x2\xA95\xA88\x3"+
		"\x2\x2\x2\xA95\xA89\x3\x2\x2\x2\xA95\xA8A\x3\x2\x2\x2\xA95\xA8B\x3\x2"+
		"\x2\x2\xA95\xA8C\x3\x2\x2\x2\xA95\xA8D\x3\x2\x2\x2\xA95\xA8E\x3\x2\x2"+
		"\x2\xA95\xA8F\x3\x2\x2\x2\xA95\xA90\x3\x2\x2\x2\xA95\xA91\x3\x2\x2\x2"+
		"\xA95\xA92\x3\x2\x2\x2\xA95\xA93\x3\x2\x2\x2\xA95\xA94\x3\x2\x2\x2\xA96"+
		"\x1ED\x3\x2\x2\x2\xA97\xAAE\a~\x2\x2\xA98\xAAE\a\x7F\x2\x2\xA99\xAAE\a"+
		"\x86\x2\x2\xA9A\xAAE\a\x87\x2\x2\xA9B\xAAE\a\x8E\x2\x2\xA9C\xAAE\a\x8F"+
		"\x2\x2\xA9D\xAAE\a_\x2\x2\xA9E\xAAE\a*\x2\x2\xA9F\xAAE\a\x80\x2\x2\xAA0"+
		"\xAAE\a\x81\x2\x2\xAA1\xAAE\a\x82\x2\x2\xAA2\xAAE\a\x83\x2\x2\xAA3\xAAE"+
		"\a\x84\x2\x2\xAA4\xAAE\a\x85\x2\x2\xAA5\xAAE\a\x9F\x2\x2\xAA6\xAAE\x5"+
		"\x2F6\x17C\x2\xAA7\xAAE\a\x93\x2\x2\xAA8\xAAE\a\x94\x2\x2\xAA9\xAAE\a"+
		"\x8A\x2\x2\xAAA\xAAE\a\x89\x2\x2\xAAB\xAAE\a\x96\x2\x2\xAAC\xAAE\a\x95"+
		"\x2\x2\xAAD\xA97\x3\x2\x2\x2\xAAD\xA98\x3\x2\x2\x2\xAAD\xA99\x3\x2\x2"+
		"\x2\xAAD\xA9A\x3\x2\x2\x2\xAAD\xA9B\x3\x2\x2\x2\xAAD\xA9C\x3\x2\x2\x2"+
		"\xAAD\xA9D\x3\x2\x2\x2\xAAD\xA9E\x3\x2\x2\x2\xAAD\xA9F\x3\x2\x2\x2\xAAD"+
		"\xAA0\x3\x2\x2\x2\xAAD\xAA1\x3\x2\x2\x2\xAAD\xAA2\x3\x2\x2\x2\xAAD\xAA3"+
		"\x3\x2\x2\x2\xAAD\xAA4\x3\x2\x2\x2\xAAD\xAA5\x3\x2\x2\x2\xAAD\xAA6\x3"+
		"\x2\x2\x2\xAAD\xAA7\x3\x2\x2\x2\xAAD\xAA8\x3\x2\x2\x2\xAAD\xAA9\x3\x2"+
		"\x2\x2\xAAD\xAAA\x3\x2\x2\x2\xAAD\xAAB\x3\x2\x2\x2\xAAD\xAAC\x3\x2\x2"+
		"\x2\xAAE\x1EF\x3\x2\x2\x2\xAAF\xAB0\a\x35\x2\x2\xAB0\xAB1\a\x45\x2\x2"+
		"\xAB1\xAB2\x5\f\a\x2\xAB2\xAB3\ax\x2\x2\xAB3\xAB4\x5\f\a\x2\xAB4\xAB5"+
		"\x5\x6\x4\x2\xAB5\xAB6\ay\x2\x2\xAB6\xAC0\x3\x2\x2\x2\xAB7\xAB8\a(\x2"+
		"\x2\xAB8\xAB9\a\x45\x2\x2\xAB9\xABA\x5\f\a\x2\xABA\xABB\ax\x2\x2\xABB"+
		"\xABC\x5\f\a\x2\xABC\xABD\x5\x6\x4\x2\xABD\xABE\ay\x2\x2\xABE\xAC0\x3"+
		"\x2\x2\x2\xABF\xAAF\x3\x2\x2\x2\xABF\xAB7\x3\x2\x2\x2\xAC0\x1F1\x3\x2"+
		"\x2\x2\xAC1\xAC4\x5\xEEx\x2\xAC2\xAC4\a}\x2\x2\xAC3\xAC1\x3\x2\x2\x2\xAC3"+
		"\xAC2\x3\x2\x2\x2\xAC4\x1F3\x3\x2\x2\x2\xAC5\xAC7\x5\x264\x133\x2\xAC6"+
		"\xAC5\x3\x2\x2\x2\xAC6\xAC7\x3\x2\x2\x2\xAC7\xAC9\x3\x2\x2\x2\xAC8\xACA"+
		"\x5\x1F6\xFC\x2\xAC9\xAC8\x3\x2\x2\x2\xAC9\xACA\x3\x2\x2\x2\xACA\xACB"+
		"\x3\x2\x2\x2\xACB\xACC\x5\x1FA\xFE\x2\xACC\xACD\x5\x1FE\x100\x2\xACD\x1F5"+
		"\x3\x2\x2\x2\xACE\xAD0\x5\x1F8\xFD\x2\xACF\xACE\x3\x2\x2\x2\xAD0\xAD1"+
		"\x3\x2\x2\x2\xAD1\xACF\x3\x2\x2\x2\xAD1\xAD2\x3\x2\x2\x2\xAD2\x1F7\x3"+
		"\x2\x2\x2\xAD3\xADA\aM\x2\x2\xAD4\xADA\aL\x2\x2\xAD5\xADA\a\x39\x2\x2"+
		"\xAD6\xADA\aK\x2\x2\xAD7\xADA\a)\x2\x2\xAD8\xADA\x5\x294\x14B\x2\xAD9"+
		"\xAD3\x3\x2\x2\x2\xAD9\xAD4\x3\x2\x2\x2\xAD9\xAD5\x3\x2\x2\x2\xAD9\xAD6"+
		"\x3\x2\x2\x2\xAD9\xAD7\x3\x2\x2\x2\xAD9\xAD8\x3\x2\x2\x2\xADA\x1F9\x3"+
		"\x2\x2\x2\xADB\xADC\x5\x6\x4\x2\xADC\xADE\ax\x2\x2\xADD\xADF\x5\x1AE\xD8"+
		"\x2\xADE\xADD\x3\x2\x2\x2\xADE\xADF\x3\x2\x2\x2\xADF\xAE0\x3\x2\x2\x2"+
		"\xAE0\xAE2\ay\x2\x2\xAE1\xAE3\x5\x1FC\xFF\x2\xAE2\xAE1\x3\x2\x2\x2\xAE2"+
		"\xAE3\x3\x2\x2\x2\xAE3\x1FB\x3\x2\x2\x2\xAE4\xAE5\a|\x2\x2\xAE5\xAE6\a"+
		"\x11\x2\x2\xAE6\xAE8\ax\x2\x2\xAE7\xAE9\x5.\x18\x2\xAE8\xAE7\x3\x2\x2"+
		"\x2\xAE8\xAE9\x3\x2\x2\x2\xAE9\xAEA\x3\x2\x2\x2\xAEA\xAF3\ay\x2\x2\xAEB"+
		"\xAEC\a|\x2\x2\xAEC\xAED\a]\x2\x2\xAED\xAEF\ax\x2\x2\xAEE\xAF0\x5.\x18"+
		"\x2\xAEF\xAEE\x3\x2\x2\x2\xAEF\xAF0\x3\x2\x2\x2\xAF0\xAF1\x3\x2\x2\x2"+
		"\xAF1\xAF3\ay\x2\x2\xAF2\xAE4\x3\x2\x2\x2\xAF2\xAEB\x3\x2\x2\x2\xAF3\x1FD"+
		"\x3\x2\x2\x2\xAF4\xAF7\x5\xEEx\x2\xAF5\xAF7\a}\x2\x2\xAF6\xAF4\x3\x2\x2"+
		"\x2\xAF6\xAF5\x3\x2\x2\x2\xAF7\x1FF\x3\x2\x2\x2\xAF8\xAFA\x5\x264\x133"+
		"\x2\xAF9\xAF8\x3\x2\x2\x2\xAF9\xAFA\x3\x2\x2\x2\xAFA\xAFB\x3\x2\x2\x2"+
		"\xAFB\xAFC\x5\x202\x102\x2\xAFC\xAFD\x5\x6\x4\x2\xAFD\xAFE\ax\x2\x2\xAFE"+
		"\xAFF\ay\x2\x2\xAFF\xB00\x5\x204\x103\x2\xB00\x201\x3\x2\x2\x2\xB01\xB02"+
		"\x5\x298\x14D\x2\xB02\x203\x3\x2\x2\x2\xB03\xB06\x5\xEEx\x2\xB04\xB06"+
		"\a}\x2\x2\xB05\xB03\x3\x2\x2\x2\xB05\xB04\x3\x2\x2\x2\xB06\x205\x3\x2"+
		"\x2\x2\xB07\xB08\x5\x296\x14C\x2\xB08\x207\x3\x2\x2\x2\xB09\xB0C\x5\xEE"+
		"x\x2\xB0A\xB0C\a}\x2\x2\xB0B\xB09\x3\x2\x2\x2\xB0B\xB0A\x3\x2\x2\x2\xB0C"+
		"\x209\x3\x2\x2\x2\xB0D\xB10\x5\xEEx\x2\xB0E\xB10\a}\x2\x2\xB0F\xB0D\x3"+
		"\x2\x2\x2\xB0F\xB0E\x3\x2\x2\x2\xB10\x20B\x3\x2\x2\x2\xB11\xB13\x5\x264"+
		"\x133\x2\xB12\xB11\x3\x2\x2\x2\xB12\xB13\x3\x2\x2\x2\xB13\xB15\x3\x2\x2"+
		"\x2\xB14\xB16\x5\x20E\x108\x2\xB15\xB14\x3\x2\x2\x2\xB15\xB16\x3\x2\x2"+
		"\x2\xB16\xB18\x3\x2\x2\x2\xB17\xB19\x5\x2E2\x172\x2\xB18\xB17\x3\x2\x2"+
		"\x2\xB18\xB19\x3\x2\x2\x2\xB19\xB1A\x3\x2\x2\x2\xB1A\xB1B\a[\x2\x2\xB1B"+
		"\xB1D\x5\x6\x4\x2\xB1C\xB1E\x5\x172\xBA\x2\xB1D\xB1C\x3\x2\x2\x2\xB1D"+
		"\xB1E\x3\x2\x2\x2\xB1E\xB20\x3\x2\x2\x2\xB1F\xB21\x5\x212\x10A\x2\xB20"+
		"\xB1F\x3\x2\x2\x2\xB20\xB21\x3\x2\x2\x2\xB21\xB23\x3\x2\x2\x2\xB22\xB24"+
		"\x5\x17C\xBF\x2\xB23\xB22\x3\x2\x2\x2\xB23\xB24\x3\x2\x2\x2\xB24\xB25"+
		"\x3\x2\x2\x2\xB25\xB27\x5\x214\x10B\x2\xB26\xB28\a}\x2\x2\xB27\xB26\x3"+
		"\x2\x2\x2\xB27\xB28\x3\x2\x2\x2\xB28\x20D\x3\x2\x2\x2\xB29\xB2D\x5\x210"+
		"\x109\x2\xB2A\xB2C\x5\x210\x109\x2\xB2B\xB2A\x3\x2\x2\x2\xB2C\xB2F\x3"+
		"\x2\x2\x2\xB2D\xB2B\x3\x2\x2\x2\xB2D\xB2E\x3\x2\x2\x2\xB2E\x20F\x3\x2"+
		"\x2\x2\xB2F\xB2D\x3\x2\x2\x2\xB30\xB37\a\x41\x2\x2\xB31\xB37\aM\x2\x2"+
		"\xB32\xB37\aL\x2\x2\xB33\xB37\a\x39\x2\x2\xB34\xB37\aK\x2\x2\xB35\xB37"+
		"\x5\x282\x142\x2\xB36\xB30\x3\x2\x2\x2\xB36\xB31\x3\x2\x2\x2\xB36\xB32"+
		"\x3\x2\x2\x2\xB36\xB33\x3\x2\x2\x2\xB36\xB34\x3\x2\x2\x2\xB36\xB35\x3"+
		"\x2\x2\x2\xB37\x211\x3\x2\x2\x2\xB38\xB39\a|\x2\x2\xB39\xB3A\x5\x17A\xBE"+
		"\x2\xB3A\x213\x3\x2\x2\x2\xB3B\xB3D\at\x2\x2\xB3C\xB3E\x5\x216\x10C\x2"+
		"\xB3D\xB3C\x3\x2\x2\x2\xB3D\xB3E\x3\x2\x2\x2\xB3E\xB3F\x3\x2\x2\x2\xB3F"+
		"\xB40\au\x2\x2\xB40\x215\x3\x2\x2\x2\xB41\xB45\x5\x218\x10D\x2\xB42\xB44"+
		"\x5\x218\x10D\x2\xB43\xB42\x3\x2\x2\x2\xB44\xB47\x3\x2\x2\x2\xB45\xB43"+
		"\x3\x2\x2\x2\xB45\xB46\x3\x2\x2\x2\xB46\x217\x3\x2\x2\x2\xB47\xB45\x3"+
		"\x2\x2\x2\xB48\xB4A\x5\x264\x133\x2\xB49\xB48\x3\x2\x2\x2\xB49\xB4A\x3"+
		"\x2\x2\x2\xB4A\xB4C\x3\x2\x2\x2\xB4B\xB4D\x5\x18E\xC8\x2\xB4C\xB4B\x3"+
		"\x2\x2\x2\xB4C\xB4D\x3\x2\x2\x2\xB4D\xB54\x3\x2\x2\x2\xB4E\xB55\x5\x192"+
		"\xCA\x2\xB4F\xB50\a,\x2\x2\xB50\xB51\x5\x2BE\x160\x2\xB51\xB52\x5\x2C0"+
		"\x161\x2\xB52\xB53\a}\x2\x2\xB53\xB55\x3\x2\x2\x2\xB54\xB4E\x3\x2\x2\x2"+
		"\xB54\xB4F\x3\x2\x2\x2\xB55\x219\x3\x2\x2\x2\xB56\xB5E\x5\xE\b\x2\xB57"+
		"\xB59\t\x5\x2\x2\xB58\xB57\x3\x2\x2\x2\xB59\xB5C\x3\x2\x2\x2\xB5A\xB58"+
		"\x3\x2\x2\x2\xB5A\xB5B\x3\x2\x2\x2\xB5B\xB5D\x3\x2\x2\x2\xB5C\xB5A\x3"+
		"\x2\x2\x2\xB5D\xB5F\x5\x220\x111\x2\xB5E\xB5A\x3\x2\x2\x2\xB5F\xB60\x3"+
		"\x2\x2\x2\xB60\xB5E\x3\x2\x2\x2\xB60\xB61\x3\x2\x2\x2\xB61\x21B\x3\x2"+
		"\x2\x2\xB62\xB68\x5\xE\b\x2\xB63\xB67\x5\x220\x111\x2\xB64\xB67\a\x8B"+
		"\x2\x2\xB65\xB67\a\x80\x2\x2\xB66\xB63\x3\x2\x2\x2\xB66\xB64\x3\x2\x2"+
		"\x2\xB66\xB65\x3\x2\x2\x2\xB67\xB6A\x3\x2\x2\x2\xB68\xB66\x3\x2\x2\x2"+
		"\xB68\xB69\x3\x2\x2\x2\xB69\x21D\x3\x2\x2\x2\xB6A\xB68\x3\x2\x2\x2\xB6B"+
		"\xB6D\x5\x220\x111\x2\xB6C\xB6B\x3\x2\x2\x2\xB6D\xB6E\x3\x2\x2\x2\xB6E"+
		"\xB6C\x3\x2\x2\x2\xB6E\xB6F\x3\x2\x2\x2\xB6F\x21F\x3\x2\x2\x2\xB70\xB72"+
		"\av\x2\x2\xB71\xB73\x5\x222\x112\x2\xB72\xB71\x3\x2\x2\x2\xB72\xB73\x3"+
		"\x2\x2\x2\xB73\xB74\x3\x2\x2\x2\xB74\xB75\aw\x2\x2\xB75\x221\x3\x2\x2"+
		"\x2\xB76\xB7A\a{\x2\x2\xB77\xB79\a{\x2\x2\xB78\xB77\x3\x2\x2\x2\xB79\xB7C"+
		"\x3\x2\x2\x2\xB7A\xB78\x3\x2\x2\x2\xB7A\xB7B\x3\x2\x2\x2\xB7B\x223\x3"+
		"\x2\x2\x2\xB7C\xB7A\x3\x2\x2\x2\xB7D\xB7E\at\x2\x2\xB7E\xB87\au\x2\x2"+
		"\xB7F\xB80\at\x2\x2\xB80\xB82\x5\x226\x114\x2\xB81\xB83\a{\x2\x2\xB82"+
		"\xB81\x3\x2\x2\x2\xB82\xB83\x3\x2\x2\x2\xB83\xB84\x3\x2\x2\x2\xB84\xB85"+
		"\au\x2\x2\xB85\xB87\x3\x2\x2\x2\xB86\xB7D\x3\x2\x2\x2\xB86\xB7F\x3\x2"+
		"\x2\x2\xB87\x225\x3\x2\x2\x2\xB88\xB8D\x5\x19E\xD0\x2\xB89\xB8A\a{\x2"+
		"\x2\xB8A\xB8C\x5\x19E\xD0\x2\xB8B\xB89\x3\x2\x2\x2\xB8C\xB8F\x3\x2\x2"+
		"\x2\xB8D\xB8B\x3\x2\x2\x2\xB8D\xB8E\x3\x2\x2\x2\xB8E\x227\x3\x2\x2\x2"+
		"\xB8F\xB8D\x3\x2\x2\x2\xB90\xB92\x5\x264\x133\x2\xB91\xB90\x3\x2\x2\x2"+
		"\xB91\xB92\x3\x2\x2\x2\xB92\xB94\x3\x2\x2\x2\xB93\xB95\x5\x22A\x116\x2"+
		"\xB94\xB93\x3\x2\x2\x2\xB94\xB95\x3\x2\x2\x2\xB95\xB97\x3\x2\x2\x2\xB96"+
		"\xB98\x5\x2E2\x172\x2\xB97\xB96\x3\x2\x2\x2\xB97\xB98\x3\x2\x2\x2\xB98"+
		"\xB99\x3\x2\x2\x2\xB99\xB9A\a\x38\x2\x2\xB9A\xB9C\x5\x6\x4\x2\xB9B\xB9D"+
		"\x5\x22E\x118\x2\xB9C\xB9B\x3\x2\x2\x2\xB9C\xB9D\x3\x2\x2\x2\xB9D\xB9F"+
		"\x3\x2\x2\x2\xB9E\xBA0\x5\x234\x11B\x2\xB9F\xB9E\x3\x2\x2\x2\xB9F\xBA0"+
		"\x3\x2\x2\x2\xBA0\xBA2\x3\x2\x2\x2\xBA1\xBA3\x5\x17C\xBF\x2\xBA2\xBA1"+
		"\x3\x2\x2\x2\xBA2\xBA3\x3\x2\x2\x2\xBA3\xBA4\x3\x2\x2\x2\xBA4\xBA6\x5"+
		"\x236\x11C\x2\xBA5\xBA7\a}\x2\x2\xBA6\xBA5\x3\x2\x2\x2\xBA6\xBA7\x3\x2"+
		"\x2\x2\xBA7\x229\x3\x2\x2\x2\xBA8\xBAC\x5\x22C\x117\x2\xBA9\xBAB\x5\x22C"+
		"\x117\x2\xBAA\xBA9\x3\x2\x2\x2\xBAB\xBAE\x3\x2\x2\x2\xBAC\xBAA\x3\x2\x2"+
		"\x2\xBAC\xBAD\x3\x2\x2\x2\xBAD\x22B\x3\x2\x2\x2\xBAE\xBAC\x3\x2\x2\x2"+
		"\xBAF\xBB6\a\x41\x2\x2\xBB0\xBB6\aM\x2\x2\xBB1\xBB6\aL\x2\x2\xBB2\xBB6"+
		"\a\x39\x2\x2\xBB3\xBB6\aK\x2\x2\xBB4\xBB6\x5\x284\x143\x2\xBB5\xBAF\x3"+
		"\x2\x2\x2\xBB5\xBB0\x3\x2\x2\x2\xBB5\xBB1\x3\x2\x2\x2\xBB5\xBB2\x3\x2"+
		"\x2\x2\xBB5\xBB3\x3\x2\x2\x2\xBB5\xBB4\x3\x2\x2\x2\xBB6\x22D\x3\x2\x2"+
		"\x2\xBB7\xBB8\a\x89\x2\x2\xBB8\xBB9\x5\x230\x119\x2\xBB9\xBBA\a\x8A\x2"+
		"\x2\xBBA\x22F\x3\x2\x2\x2\xBBB\xBBD\x5\x264\x133\x2\xBBC\xBBB\x3\x2\x2"+
		"\x2\xBBC\xBBD\x3\x2\x2\x2\xBBD\xBBF\x3\x2\x2\x2\xBBE\xBC0\x5\x232\x11A"+
		"\x2\xBBF\xBBE\x3\x2\x2\x2\xBBF\xBC0\x3\x2\x2\x2\xBC0\xBC1\x3\x2\x2\x2"+
		"\xBC1\xBCC\x5\x176\xBC\x2\xBC2\xBC4\a{\x2\x2\xBC3\xBC5\x5\x264\x133\x2"+
		"\xBC4\xBC3\x3\x2\x2\x2\xBC4\xBC5\x3\x2\x2\x2\xBC5\xBC7\x3\x2\x2\x2\xBC6"+
		"\xBC8\x5\x232\x11A\x2\xBC7\xBC6\x3\x2\x2\x2\xBC7\xBC8\x3\x2\x2\x2\xBC8"+
		"\xBC9\x3\x2\x2\x2\xBC9\xBCB\x5\x176\xBC\x2\xBCA\xBC2\x3\x2\x2\x2\xBCB"+
		"\xBCE\x3\x2\x2\x2\xBCC\xBCA\x3\x2\x2\x2\xBCC\xBCD\x3\x2\x2\x2\xBCD\x231"+
		"\x3\x2\x2\x2\xBCE\xBCC\x3\x2\x2\x2\xBCF\xBD0\t\f\x2\x2\xBD0\x233\x3\x2"+
		"\x2\x2\xBD1\xBD2\a|\x2\x2\xBD2\xBD3\x5\x17A\xBE\x2\xBD3\x235\x3\x2\x2"+
		"\x2\xBD4\xBD6\at\x2\x2\xBD5\xBD7\x5\x238\x11D\x2\xBD6\xBD5\x3\x2\x2\x2"+
		"\xBD6\xBD7\x3\x2\x2\x2\xBD7\xBD8\x3\x2\x2\x2\xBD8\xBD9\au\x2\x2\xBD9\x237"+
		"\x3\x2\x2\x2\xBDA\xBDC\x5\x23A\x11E\x2\xBDB\xBDA\x3\x2\x2\x2\xBDC\xBDD"+
		"\x3\x2\x2\x2\xBDD\xBDB\x3\x2\x2\x2\xBDD\xBDE\x3\x2\x2\x2\xBDE\x239\x3"+
		"\x2\x2\x2\xBDF\xBE1\x5\x264\x133\x2\xBE0\xBDF\x3\x2\x2\x2\xBE0\xBE1\x3"+
		"\x2\x2\x2\xBE1\xBE3\x3\x2\x2\x2\xBE2\xBE4\a\x41\x2\x2\xBE3\xBE2\x3\x2"+
		"\x2\x2\xBE3\xBE4\x3\x2\x2\x2\xBE4\xC17\x3\x2\x2\x2\xBE5\xC01\x5\f\a\x2"+
		"\xBE6\xBE8\x5\x6\x4\x2\xBE7\xBE9\x5\x172\xBA\x2\xBE8\xBE7\x3\x2\x2\x2"+
		"\xBE8\xBE9\x3\x2\x2\x2\xBE9\xBEA\x3\x2\x2\x2\xBEA\xBEC\ax\x2\x2\xBEB\xBED"+
		"\x5\x1AE\xD8\x2\xBEC\xBEB\x3\x2\x2\x2\xBEC\xBED\x3\x2\x2\x2\xBED\xBEE"+
		"\x3\x2\x2\x2\xBEE\xBF0\ay\x2\x2\xBEF\xBF1\x5\x17C\xBF\x2\xBF0\xBEF\x3"+
		"\x2\x2\x2\xBF0\xBF1\x3\x2\x2\x2\xBF1\xBF2\x3\x2\x2\x2\xBF2\xBF3\a}\x2"+
		"\x2\xBF3\xC02\x3\x2\x2\x2\xBF4\xBF5\x5\x6\x4\x2\xBF5\xBF6\at\x2\x2\xBF6"+
		"\xBF7\x5\x240\x121\x2\xBF7\xBF8\au\x2\x2\xBF8\xC02\x3\x2\x2\x2\xBF9\xBFA"+
		"\a]\x2\x2\xBFA\xBFB\av\x2\x2\xBFB\xBFC\x5\x1AE\xD8\x2\xBFC\xBFD\aw\x2"+
		"\x2\xBFD\xBFE\at\x2\x2\xBFE\xBFF\x5\x240\x121\x2\xBFF\xC00\au\x2\x2\xC00"+
		"\xC02\x3\x2\x2\x2\xC01\xBE6\x3\x2\x2\x2\xC01\xBF4\x3\x2\x2\x2\xC01\xBF9"+
		"\x3\x2\x2\x2\xC02\xC18\x3\x2\x2\x2\xC03\xC04\ai\x2\x2\xC04\xC06\x5\x6"+
		"\x4\x2\xC05\xC07\x5\x172\xBA\x2\xC06\xC05\x3\x2\x2\x2\xC06\xC07\x3\x2"+
		"\x2\x2\xC07\xC08\x3\x2\x2\x2\xC08\xC0A\ax\x2\x2\xC09\xC0B\x5\x1AE\xD8"+
		"\x2\xC0A\xC09\x3\x2\x2\x2\xC0A\xC0B\x3\x2\x2\x2\xC0B\xC0C\x3\x2\x2\x2"+
		"\xC0C\xC0E\ay\x2\x2\xC0D\xC0F\x5\x17C\xBF\x2\xC0E\xC0D\x3\x2\x2\x2\xC0E"+
		"\xC0F\x3\x2\x2\x2\xC0F\xC10\x3\x2\x2\x2\xC10\xC11\a}\x2\x2\xC11\xC18\x3"+
		"\x2\x2\x2\xC12\xC13\a\'\x2\x2\xC13\xC14\x5\f\a\x2\xC14\xC15\x5\x6\x4\x2"+
		"\xC15\xC16\a}\x2\x2\xC16\xC18\x3\x2\x2\x2\xC17\xBE5\x3\x2\x2\x2\xC17\xC03"+
		"\x3\x2\x2\x2\xC17\xC12\x3\x2\x2\x2\xC18\x23B\x3\x2\x2\x2\xC19\xC1B\x5"+
		"\x264\x133\x2\xC1A\xC19\x3\x2\x2\x2\xC1A\xC1B\x3\x2\x2\x2\xC1B\xC1D\x3"+
		"\x2\x2\x2\xC1C\xC1E\a\x41\x2\x2\xC1D\xC1C\x3\x2\x2\x2\xC1D\xC1E\x3\x2"+
		"\x2\x2\xC1E\xC1F\x3\x2\x2\x2\xC1F\xC20\x5\x1A8\xD5\x2\xC20\xC22\x5\x6"+
		"\x4\x2\xC21\xC23\x5\x172\xBA\x2\xC22\xC21\x3\x2\x2\x2\xC22\xC23\x3\x2"+
		"\x2\x2\xC23\xC24\x3\x2\x2\x2\xC24\xC26\ax\x2\x2\xC25\xC27\x5\x1AE\xD8"+
		"\x2\xC26\xC25\x3\x2\x2\x2\xC26\xC27\x3\x2\x2\x2\xC27\xC28\x3\x2\x2\x2"+
		"\xC28\xC2A\ay\x2\x2\xC29\xC2B\x5\x17C\xBF\x2\xC2A\xC29\x3\x2\x2\x2\xC2A"+
		"\xC2B\x3\x2\x2\x2\xC2B\xC2C\x3\x2\x2\x2\xC2C\xC2D\a}\x2\x2\xC2D\x23D\x3"+
		"\x2\x2\x2\xC2E\xC30\x5\x264\x133\x2\xC2F\xC2E\x3\x2\x2\x2\xC2F\xC30\x3"+
		"\x2\x2\x2\xC30\xC32\x3\x2\x2\x2\xC31\xC33\a\x41\x2\x2\xC32\xC31\x3\x2"+
		"\x2\x2\xC32\xC33\x3\x2\x2\x2\xC33\xC34\x3\x2\x2\x2\xC34\xC35\x5\f\a\x2"+
		"\xC35\xC36\x5\x6\x4\x2\xC36\xC37\at\x2\x2\xC37\xC38\x5\x240\x121\x2\xC38"+
		"\xC39\au\x2\x2\xC39\x23F\x3\x2\x2\x2\xC3A\xC3C\x5\x264\x133\x2\xC3B\xC3A"+
		"\x3\x2\x2\x2\xC3B\xC3C\x3\x2\x2\x2\xC3C\xC51\x3\x2\x2\x2\xC3D\xC3E\x5"+
		"\x2E8\x175\x2\xC3E\xC45\a}\x2\x2\xC3F\xC41\x5\x264\x133\x2\xC40\xC3F\x3"+
		"\x2\x2\x2\xC40\xC41\x3\x2\x2\x2\xC41\xC42\x3\x2\x2\x2\xC42\xC43\x5\x2EA"+
		"\x176\x2\xC43\xC44\a}\x2\x2\xC44\xC46\x3\x2\x2\x2\xC45\xC40\x3\x2\x2\x2"+
		"\xC45\xC46\x3\x2\x2\x2\xC46\xC52\x3\x2\x2\x2\xC47\xC48\x5\x2EA\x176\x2"+
		"\xC48\xC4F\a}\x2\x2\xC49\xC4B\x5\x264\x133\x2\xC4A\xC49\x3\x2\x2\x2\xC4A"+
		"\xC4B\x3\x2\x2\x2\xC4B\xC4C\x3\x2\x2\x2\xC4C\xC4D\x5\x2E8\x175\x2\xC4D"+
		"\xC4E\a}\x2\x2\xC4E\xC50\x3\x2\x2\x2\xC4F\xC4A\x3\x2\x2\x2\xC4F\xC50\x3"+
		"\x2\x2\x2\xC50\xC52\x3\x2\x2\x2\xC51\xC3D\x3\x2\x2\x2\xC51\xC47\x3\x2"+
		"\x2\x2\xC52\x241\x3\x2\x2\x2\xC53\xC55\x5\x264\x133\x2\xC54\xC53\x3\x2"+
		"\x2\x2\xC54\xC55\x3\x2\x2\x2\xC55\xC57\x3\x2\x2\x2\xC56\xC58\a\x41\x2"+
		"\x2\xC57\xC56\x3\x2\x2\x2\xC57\xC58\x3\x2\x2\x2\xC58\xC59\x3\x2\x2\x2"+
		"\xC59\xC5A\a\'\x2\x2\xC5A\xC5B\x5\f\a\x2\xC5B\xC5C\x5\x6\x4\x2\xC5C\xC5D"+
		"\a}\x2\x2\xC5D\x243\x3\x2\x2\x2\xC5E\xC60\x5\x264\x133\x2\xC5F\xC5E\x3"+
		"\x2\x2\x2\xC5F\xC60\x3\x2\x2\x2\xC60\xC62\x3\x2\x2\x2\xC61\xC63\a\x41"+
		"\x2\x2\xC62\xC61\x3\x2\x2\x2\xC62\xC63\x3\x2\x2\x2\xC63\xC64\x3\x2\x2"+
		"\x2\xC64\xC65\x5\f\a\x2\xC65\xC66\a]\x2\x2\xC66\xC67\av\x2\x2\xC67\xC68"+
		"\x5\x1AE\xD8\x2\xC68\xC69\aw\x2\x2\xC69\xC6A\at\x2\x2\xC6A\xC6B\x5\x240"+
		"\x121\x2\xC6B\xC6C\au\x2\x2\xC6C\x245\x3\x2\x2\x2\xC6D\xC6F\x5\x264\x133"+
		"\x2\xC6E\xC6D\x3\x2\x2\x2\xC6E\xC6F\x3\x2\x2\x2\xC6F\xC71\x3\x2\x2\x2"+
		"\xC70\xC72\x5\x24C\x127\x2\xC71\xC70\x3\x2\x2\x2\xC71\xC72\x3\x2\x2\x2"+
		"\xC72\xC73\x3\x2\x2\x2\xC73\xC74\a%\x2\x2\xC74\xC76\x5\x6\x4\x2\xC75\xC77"+
		"\x5\x248\x125\x2\xC76\xC75\x3\x2\x2\x2\xC76\xC77\x3\x2\x2\x2\xC77\xC78"+
		"\x3\x2\x2\x2\xC78\xC7A\x5\x24A\x126\x2\xC79\xC7B\a}\x2\x2\xC7A\xC79\x3"+
		"\x2\x2\x2\xC7A\xC7B\x3\x2\x2\x2\xC7B\x247\x3\x2\x2\x2\xC7C\xC7D\a|\x2"+
		"\x2\xC7D\xC7E\x5\x14\v\x2\xC7E\x249\x3\x2\x2\x2\xC7F\xC80\at\x2\x2\xC80"+
		"\xC89\au\x2\x2\xC81\xC82\at\x2\x2\xC82\xC84\x5\x250\x129\x2\xC83\xC85"+
		"\a{\x2\x2\xC84\xC83\x3\x2\x2\x2\xC84\xC85\x3\x2\x2\x2\xC85\xC86\x3\x2"+
		"\x2\x2\xC86\xC87\au\x2\x2\xC87\xC89\x3\x2\x2\x2\xC88\xC7F\x3\x2\x2\x2"+
		"\xC88\xC81\x3\x2\x2\x2\xC89\x24B\x3\x2\x2\x2\xC8A\xC8C\x5\x24E\x128\x2"+
		"\xC8B\xC8A\x3\x2\x2\x2\xC8C\xC8D\x3\x2\x2\x2\xC8D\xC8B\x3\x2\x2\x2\xC8D"+
		"\xC8E\x3\x2\x2\x2\xC8E\x24D\x3\x2\x2\x2\xC8F\xC90\t\r\x2\x2\xC90\x24F"+
		"\x3\x2\x2\x2\xC91\xC96\x5\x252\x12A\x2\xC92\xC93\a{\x2\x2\xC93\xC95\x5"+
		"\x252\x12A\x2\xC94\xC92\x3\x2\x2\x2\xC95\xC98\x3\x2\x2\x2\xC96\xC94\x3"+
		"\x2\x2\x2\xC96\xC97\x3\x2\x2\x2\xC97\x251\x3\x2\x2\x2\xC98\xC96\x3\x2"+
		"\x2\x2\xC99\xC9B\x5\x264\x133\x2\xC9A\xC99\x3\x2\x2\x2\xC9A\xC9B\x3\x2"+
		"\x2\x2\xC9B\xC9C\x3\x2\x2\x2\xC9C\xC9F\x5\x6\x4\x2\xC9D\xC9E\a\x88\x2"+
		"\x2\xC9E\xCA0\x5\xE4s\x2\xC9F\xC9D\x3\x2\x2\x2\xC9F\xCA0\x3\x2\x2\x2\xCA0"+
		"\x253\x3\x2\x2\x2\xCA1\xCA3\x5\x264\x133\x2\xCA2\xCA1\x3\x2\x2\x2\xCA2"+
		"\xCA3\x3\x2\x2\x2\xCA3\xCA5\x3\x2\x2\x2\xCA4\xCA6\x5\x256\x12C\x2\xCA5"+
		"\xCA4\x3\x2\x2\x2\xCA5\xCA6\x3\x2\x2\x2\xCA6\xCA7\x3\x2\x2\x2\xCA7\xCA8"+
		"\a\x1F\x2\x2\xCA8\xCA9\x5\x1A8\xD5\x2\xCA9\xCAB\x5\x6\x4\x2\xCAA\xCAC"+
		"\x5\x22E\x118\x2\xCAB\xCAA\x3\x2\x2\x2\xCAB\xCAC\x3\x2\x2\x2\xCAC\xCAD"+
		"\x3\x2\x2\x2\xCAD\xCAF\ax\x2\x2\xCAE\xCB0\x5\x1AE\xD8\x2\xCAF\xCAE\x3"+
		"\x2\x2\x2\xCAF\xCB0\x3\x2\x2\x2\xCB0\xCB1\x3\x2\x2\x2\xCB1\xCB3\ay\x2"+
		"\x2\xCB2\xCB4\x5\x17C\xBF\x2\xCB3\xCB2\x3\x2\x2\x2\xCB3\xCB4\x3\x2\x2"+
		"\x2\xCB4\xCB5\x3\x2\x2\x2\xCB5\xCB6\a}\x2\x2\xCB6\x255\x3\x2\x2\x2\xCB7"+
		"\xCBB\x5\x258\x12D\x2\xCB8\xCBA\x5\x258\x12D\x2\xCB9\xCB8\x3\x2\x2\x2"+
		"\xCBA\xCBD\x3\x2\x2\x2\xCBB\xCB9\x3\x2\x2\x2\xCBB\xCBC\x3\x2\x2\x2\xCBC"+
		"\x257\x3\x2\x2\x2\xCBD\xCBB\x3\x2\x2\x2\xCBE\xCC5\a\x41\x2\x2\xCBF\xCC5"+
		"\aM\x2\x2\xCC0\xCC5\aL\x2\x2\xCC1\xCC5\a\x39\x2\x2\xCC2\xCC5\aK\x2\x2"+
		"\xCC3\xCC5\x5\x286\x144\x2\xCC4\xCBE\x3\x2\x2\x2\xCC4\xCBF\x3\x2\x2\x2"+
		"\xCC4\xCC0\x3\x2\x2\x2\xCC4\xCC1\x3\x2\x2\x2\xCC4\xCC2\x3\x2\x2\x2\xCC4"+
		"\xCC3\x3\x2\x2\x2\xCC5\x259\x3\x2\x2\x2\xCC6\xCC7\x5\x25C\x12F\x2\xCC7"+
		"\x25B\x3\x2\x2\x2\xCC8\xCCA\x5\x25E\x130\x2\xCC9\xCC8\x3\x2\x2\x2\xCCA"+
		"\xCCB\x3\x2\x2\x2\xCCB\xCC9\x3\x2\x2\x2\xCCB\xCCC\x3\x2\x2\x2\xCCC\x25D"+
		"\x3\x2\x2\x2\xCCD\xCCE\av\x2\x2\xCCE\xCCF\x5\x260\x131\x2\xCCF\xCD1\x5"+
		"\x26E\x138\x2\xCD0\xCD2\a{\x2\x2\xCD1\xCD0\x3\x2\x2\x2\xCD1\xCD2\x3\x2"+
		"\x2\x2\xCD2\xCD3\x3\x2\x2\x2\xCD3\xCD4\aw\x2\x2\xCD4\x25F\x3\x2\x2\x2"+
		"\xCD5\xCD6\x5\x262\x132\x2\xCD6\xCD7\a|\x2\x2\xCD7\x261\x3\x2\x2\x2\xCD8"+
		"\xCDB\x5\x2FE\x180\x2\xCD9\xCDB\x5\x6\x4\x2\xCDA\xCD8\x3\x2\x2\x2\xCDA"+
		"\xCD9\x3\x2\x2\x2\xCDB\x263\x3\x2\x2\x2\xCDC\xCDD\x5\x266\x134\x2\xCDD"+
		"\x265\x3\x2\x2\x2\xCDE\xCE0\x5\x268\x135\x2\xCDF\xCDE\x3\x2\x2\x2\xCE0"+
		"\xCE1\x3\x2\x2\x2\xCE1\xCDF\x3\x2\x2\x2\xCE1\xCE2\x3\x2\x2\x2\xCE2\x267"+
		"\x3\x2\x2\x2\xCE3\xCE5\av\x2\x2\xCE4\xCE6\x5\x26A\x136\x2\xCE5\xCE4\x3"+
		"\x2\x2\x2\xCE5\xCE6\x3\x2\x2\x2\xCE6\xCE7\x3\x2\x2\x2\xCE7\xCE9\x5\x26E"+
		"\x138\x2\xCE8\xCEA\a{\x2\x2\xCE9\xCE8\x3\x2\x2\x2\xCE9\xCEA\x3\x2\x2\x2"+
		"\xCEA\xCEB\x3\x2\x2\x2\xCEB\xCEC\aw\x2\x2\xCEC\x269\x3\x2\x2\x2\xCED\xCEE"+
		"\x5\x26C\x137\x2\xCEE\xCEF\a|\x2\x2\xCEF\x26B\x3\x2\x2\x2\xCF0\xCF3\x5"+
		"\x2FE\x180\x2\xCF1\xCF3\x5\x6\x4\x2\xCF2\xCF0\x3\x2\x2\x2\xCF2\xCF1\x3"+
		"\x2\x2\x2\xCF3\x26D\x3\x2\x2\x2\xCF4\xCF9\x5\x270\x139\x2\xCF5\xCF6\a"+
		"{\x2\x2\xCF6\xCF8\x5\x270\x139\x2\xCF7\xCF5\x3\x2\x2\x2\xCF8\xCFB\x3\x2"+
		"\x2\x2\xCF9\xCF7\x3\x2\x2\x2\xCF9\xCFA\x3\x2\x2\x2\xCFA\x26F\x3\x2\x2"+
		"\x2\xCFB\xCF9\x3\x2\x2\x2\xCFC\xCFE\x5\x272\x13A\x2\xCFD\xCFF\x5\x274"+
		"\x13B\x2\xCFE\xCFD\x3\x2\x2\x2\xCFE\xCFF\x3\x2\x2\x2\xCFF\x271\x3\x2\x2"+
		"\x2\xD00\xD01\x5\x4\x3\x2\xD01\x273\x3\x2\x2\x2\xD02\xD04\ax\x2\x2\xD03"+
		"\xD05\x5\x276\x13C\x2\xD04\xD03\x3\x2\x2\x2\xD04\xD05\x3\x2\x2\x2\xD05"+
		"\xD06\x3\x2\x2\x2\xD06\xD07\ay\x2\x2\xD07\x275\x3\x2\x2\x2\xD08\xD0D\x5"+
		"\x278\x13D\x2\xD09\xD0A\a{\x2\x2\xD0A\xD0C\x5\x278\x13D\x2\xD0B\xD09\x3"+
		"\x2\x2\x2\xD0C\xD0F\x3\x2\x2\x2\xD0D\xD0B\x3\x2\x2\x2\xD0D\xD0E\x3\x2"+
		"\x2\x2\xD0E\x277\x3\x2\x2\x2\xD0F\xD0D\x3\x2\x2\x2\xD10\xD11\x5\x27E\x140"+
		"\x2\xD11\x279\x3\x2\x2\x2\xD12\xD17\x5\x27C\x13F\x2\xD13\xD14\a{\x2\x2"+
		"\xD14\xD16\x5\x27C\x13F\x2\xD15\xD13\x3\x2\x2\x2\xD16\xD19\x3\x2\x2\x2"+
		"\xD17\xD15\x3\x2\x2\x2\xD17\xD18\x3\x2\x2\x2\xD18\x27B\x3\x2\x2\x2\xD19"+
		"\xD17\x3\x2\x2\x2\xD1A\xD1B\x5\x6\x4\x2\xD1B\xD1C\a\x88\x2\x2\xD1C\xD1D"+
		"\x5\x27E\x140\x2\xD1D\x27D\x3\x2\x2\x2\xD1E\xD1F\x5\xE0q\x2\xD1F\x27F"+
		"\x3\x2\x2\x2\xD20\xD21\a\x65\x2\x2\xD21\x281\x3\x2\x2\x2\xD22\xD23\a\x65"+
		"\x2\x2\xD23\x283\x3\x2\x2\x2\xD24\xD25\a\x65\x2\x2\xD25\x285\x3\x2\x2"+
		"\x2\xD26\xD27\a\x65\x2\x2\xD27\x287\x3\x2\x2\x2\xD28\xD29\a\x65\x2\x2"+
		"\xD29\x289\x3\x2\x2\x2\xD2A\xD2B\a\x65\x2\x2\xD2B\x28B\x3\x2\x2\x2\xD2C"+
		"\xD2D\a\x65\x2\x2\xD2D\x28D\x3\x2\x2\x2\xD2E\xD2F\a\x65\x2\x2\xD2F\x28F"+
		"\x3\x2\x2\x2\xD30\xD31\a\x65\x2\x2\xD31\x291\x3\x2\x2\x2\xD32\xD33\a\x65"+
		"\x2\x2\xD33\x293\x3\x2\x2\x2\xD34\xD35\a\x65\x2\x2\xD35\x295\x3\x2\x2"+
		"\x2\xD36\xD38\x5\x264\x133\x2\xD37\xD36\x3\x2\x2\x2\xD37\xD38\x3\x2\x2"+
		"\x2\xD38\xD41\x3\x2\x2\x2\xD39\xD3B\a)\x2\x2\xD3A\xD39\x3\x2\x2\x2\xD3A"+
		"\xD3B\x3\x2\x2\x2\xD3B\xD3D\x3\x2\x2\x2\xD3C\xD3E\a\x65\x2\x2\xD3D\xD3C"+
		"\x3\x2\x2\x2\xD3D\xD3E\x3\x2\x2\x2\xD3E\xD42\x3\x2\x2\x2\xD3F\xD40\a\x65"+
		"\x2\x2\xD40\xD42\a)\x2\x2\xD41\xD3A\x3\x2\x2\x2\xD41\xD3F\x3\x2\x2\x2"+
		"\xD42\xD43\x3\x2\x2\x2\xD43\xD44\a\x87\x2\x2\xD44\xD45\x5\x6\x4\x2\xD45"+
		"\xD46\ax\x2\x2\xD46\xD47\ay\x2\x2\xD47\xD48\x5\x208\x105\x2\xD48\x297"+
		"\x3\x2\x2\x2\xD49\xD4B\t\xE\x2\x2\xD4A\xD49\x3\x2\x2\x2\xD4A\xD4B\x3\x2"+
		"\x2\x2\xD4B\xD4C\x3\x2\x2\x2\xD4C\xD62\aY\x2\x2\xD4D\xD4E\a)\x2\x2\xD4E"+
		"\xD4F\a\x65\x2\x2\xD4F\xD62\aY\x2\x2\xD50\xD51\a\x65\x2\x2\xD51\xD52\a"+
		")\x2\x2\xD52\xD62\aY\x2\x2\xD53\xD54\a)\x2\x2\xD54\xD55\aY\x2\x2\xD55"+
		"\xD62\a\x65\x2\x2\xD56\xD57\a\x65\x2\x2\xD57\xD58\aY\x2\x2\xD58\xD62\a"+
		")\x2\x2\xD59\xD5A\aY\x2\x2\xD5A\xD62\t\xE\x2\x2\xD5B\xD5C\aY\x2\x2\xD5C"+
		"\xD5D\a)\x2\x2\xD5D\xD62\a\x65\x2\x2\xD5E\xD5F\aY\x2\x2\xD5F\xD60\a\x65"+
		"\x2\x2\xD60\xD62\a)\x2\x2\xD61\xD4A\x3\x2\x2\x2\xD61\xD4D\x3\x2\x2\x2"+
		"\xD61\xD50\x3\x2\x2\x2\xD61\xD53\x3\x2\x2\x2\xD61\xD56\x3\x2\x2\x2\xD61"+
		"\xD59\x3\x2\x2\x2\xD61\xD5B\x3\x2\x2\x2\xD61\xD5E\x3\x2\x2\x2\xD62\x299"+
		"\x3\x2\x2\x2\xD63\xD66\x5\x29C\x14F\x2\xD64\xD66\x5\x2AE\x158\x2\xD65"+
		"\xD63\x3\x2\x2\x2\xD65\xD64\x3\x2\x2\x2\xD66\x29B\x3\x2\x2\x2\xD67\xD68"+
		"\a\x65\x2\x2\xD68\xD69\x5\xEEx\x2\xD69\x29D\x3\x2\x2\x2\xD6A\xD6B\x5\x2A0"+
		"\x151\x2\xD6B\x29F\x3\x2\x2\x2\xD6C\xD71\x5\x10\t\x2\xD6D\xD70\x5\x220"+
		"\x111\x2\xD6E\xD70\a\x8B\x2\x2\xD6F\xD6D\x3\x2\x2\x2\xD6F\xD6E\x3\x2\x2"+
		"\x2\xD70\xD73\x3\x2\x2\x2\xD71\xD6F\x3\x2\x2\x2\xD71\xD72\x3\x2\x2\x2"+
		"\xD72\xD74\x3\x2\x2\x2\xD73\xD71\x3\x2\x2\x2\xD74\xD75\a\x80\x2\x2\xD75"+
		"\xD83\x3\x2\x2\x2\xD76\xD7B\x5\x1E\x10\x2\xD77\xD7A\x5\x220\x111\x2\xD78"+
		"\xD7A\a\x8B\x2\x2\xD79\xD77\x3\x2\x2\x2\xD79\xD78\x3\x2\x2\x2\xD7A\xD7D"+
		"\x3\x2\x2\x2\xD7B\xD79\x3\x2\x2\x2\xD7B\xD7C\x3\x2\x2\x2\xD7C\xD7E\x3"+
		"\x2\x2\x2\xD7D\xD7B\x3\x2\x2\x2\xD7E\xD7F\a\x80\x2\x2\xD7F\xD83\x3\x2"+
		"\x2\x2\xD80\xD81\ai\x2\x2\xD81\xD83\a\x80\x2\x2\xD82\xD6C\x3\x2\x2\x2"+
		"\xD82\xD76\x3\x2\x2\x2\xD82\xD80\x3\x2\x2\x2\xD83\x2A1\x3\x2\x2\x2\xD84"+
		"\xD85\x5\f\a\x2\xD85\x2A3\x3\x2\x2\x2\xD86\xD87\x5\x36\x1C\x2\xD87\x2A5"+
		"\x3\x2\x2\x2\xD88\xD8B\x5\x2A8\x155\x2\xD89\xD8B\x5\x2AA\x156\x2\xD8A"+
		"\xD88\x3\x2\x2\x2\xD8A\xD89\x3\x2\x2\x2\xD8B\x2A7\x3\x2\x2\x2\xD8C\xD8D"+
		"\a\x80\x2\x2\xD8D\xD8E\x5v<\x2\xD8E\x2A9\x3\x2\x2\x2\xD8F\xD90\a\x83\x2"+
		"\x2\xD90\xD91\x5v<\x2\xD91\x2AB\x3\x2\x2\x2\xD92\xD93\aW\x2\x2\xD93\xD94"+
		"\ax\x2\x2\xD94\xD95\x5\x2A2\x152\x2\xD95\xD96\ay\x2\x2\xD96\x2AD\x3\x2"+
		"\x2\x2\xD97\xD98\a,\x2\x2\xD98\xD99\ax\x2\x2\xD99\xD9A\x5\x2A0\x151\x2"+
		"\xD9A\xD9B\x5\x2B0\x159\x2\xD9B\xD9C\ay\x2\x2\xD9C\xD9D\x5\xEAv\x2\xD9D"+
		"\x2AF\x3\x2\x2\x2\xD9E\xDA3\x5\x2B2\x15A\x2\xD9F\xDA0\a{\x2\x2\xDA0\xDA2"+
		"\x5\x2B2\x15A\x2\xDA1\xD9F\x3\x2\x2\x2\xDA2\xDA5\x3\x2\x2\x2\xDA3\xDA1"+
		"\x3\x2\x2\x2\xDA3\xDA4\x3\x2\x2\x2\xDA4\x2B1\x3\x2\x2\x2\xDA5\xDA3\x3"+
		"\x2\x2\x2\xDA6\xDA7\x5\x6\x4\x2\xDA7\xDA8\a\x88\x2\x2\xDA8\xDA9\x5\x2B4"+
		"\x15B\x2\xDA9\x2B3\x3\x2\x2\x2\xDAA\xDAB\a\x83\x2\x2\xDAB\xDAE\x5,\x17"+
		"\x2\xDAC\xDAE\x5\xE0q\x2\xDAD\xDAA\x3\x2\x2\x2\xDAD\xDAC\x3\x2\x2\x2\xDAE"+
		"\x2B5\x3\x2\x2\x2\xDAF\xDB0\x5\x2B8\x15D\x2\xDB0\x2B7\x3\x2\x2\x2\xDB1"+
		"\xDB3\x5\x264\x133\x2\xDB2\xDB1\x3\x2\x2\x2\xDB2\xDB3\x3\x2\x2\x2\xDB3"+
		"\xDB5\x3\x2\x2\x2\xDB4\xDB6\x5\x2BA\x15E\x2\xDB5\xDB4\x3\x2\x2\x2\xDB5"+
		"\xDB6\x3\x2\x2\x2\xDB6\xDB7\x3\x2\x2\x2\xDB7\xDB8\a,\x2\x2\xDB8\xDB9\x5"+
		"\x2BE\x160\x2\xDB9\xDBA\x5\x2C0\x161\x2\xDBA\xDBB\a}\x2\x2\xDBB\x2B9\x3"+
		"\x2\x2\x2\xDBC\xDBE\x5\x2BC\x15F\x2\xDBD\xDBC\x3\x2\x2\x2\xDBE\xDBF\x3"+
		"\x2\x2\x2\xDBF\xDBD\x3\x2\x2\x2\xDBF\xDC0\x3\x2\x2\x2\xDC0\x2BB\x3\x2"+
		"\x2\x2\xDC1\xDC2\t\xF\x2\x2\xDC2\x2BD\x3\x2\x2\x2\xDC3\xDC4\x5\f\a\x2"+
		"\xDC4\x2BF\x3\x2\x2\x2\xDC5\xDC7\x5\x2C2\x162\x2\xDC6\xDC5\x3\x2\x2\x2"+
		"\xDC7\xDC8\x3\x2\x2\x2\xDC8\xDC6\x3\x2\x2\x2\xDC8\xDC9\x3\x2\x2\x2\xDC9"+
		"\x2C1\x3\x2\x2\x2\xDCA\xDCB\x5\x6\x4\x2\xDCB\xDCC\av\x2\x2\xDCC\xDCD\x5"+
		"\xE4s\x2\xDCD\xDCE\aw\x2\x2\xDCE\x2C3\x3\x2\x2\x2\xDCF\xDD0\x5\x2C6\x164"+
		"\x2\xDD0\x2C5\x3\x2\x2\x2\xDD1\xDD2\aX\x2\x2\xDD2\xDD3\x5\x2A2\x152\x2"+
		"\xDD3\xDD4\av\x2\x2\xDD4\xDD5\x5\xE0q\x2\xDD5\xDD6\aw\x2\x2\xDD6\x2C7"+
		"\x3\x2\x2\x2\xDD7\xDD8\a\x30\x2\x2\xDD8\x2C9\x3\x2\x2\x2\xDD9\xDDA\a="+
		"\x2\x2\xDDA\x2CB\x3\x2\x2\x2\xDDB\xDDC\ak\x2\x2\xDDC\x2CD\x3\x2\x2\x2"+
		"\xDDD\xDDE\a<\x2\x2\xDDE\x2CF\x3\x2\x2\x2\xDDF\xDE0\a\x44\x2\x2\xDE0\x2D1"+
		"\x3\x2\x2\x2\xDE1\xDE2\a&\x2\x2\xDE2\x2D3\x3\x2\x2\x2\xDE3\xDE4\a:\x2"+
		"\x2\xDE4\x2D5\x3\x2\x2\x2\xDE5\xDE6\a\x46\x2\x2\xDE6\x2D7\x3\x2\x2\x2"+
		"\xDE7\xDE8\a\x10\x2\x2\xDE8\x2D9\x3\x2\x2\x2\xDE9\xDEA\a \x2\x2\xDEA\x2DB"+
		"\x3\x2\x2\x2\xDEB\xDEC\aT\x2\x2\xDEC\x2DD\x3\x2\x2\x2\xDED\xDEE\a\x33"+
		"\x2\x2\xDEE\x2DF\x3\x2\x2\x2\xDEF\xDF0\a\x14\x2\x2\xDF0\x2E1\x3\x2\x2"+
		"\x2\xDF1\xDF2\aJ\x2\x2\xDF2\x2E3\x3\x2\x2\x2\xDF3\xDF4\a\r\x2\x2\xDF4"+
		"\x2E5\x3\x2\x2\x2\xDF5\xDF6\am\x2\x2\xDF6\x2E7\x3\x2\x2\x2\xDF7\xDF8\a"+
		"\x31\x2\x2\xDF8\x2E9\x3\x2\x2\x2\xDF9\xDFA\aU\x2\x2\xDFA\x2EB\x3\x2\x2"+
		"\x2\xDFB\xDFC\a\f\x2\x2\xDFC\x2ED\x3\x2\x2\x2\xDFD\xDFE\aP\x2\x2\xDFE"+
		"\x2EF\x3\x2\x2\x2\xDFF\xE00\a#\x2\x2\xE00\x2F1\x3\x2\x2\x2\xE01\xE02\a"+
		"\xE\x2\x2\xE02\x2F3\x3\x2\x2\x2\xE03\xE04\a\x88\x2\x2\xE04\xE05\a\x8A"+
		"\x2\x2\xE05\xE06\x6\x17B\x2\x3\xE06\x2F5\x3\x2\x2\x2\xE07\xE08\a\x8A\x2"+
		"\x2\xE08\xE09\a\x8A\x2\x2\xE09\xE0A\x6\x17C\x3\x3\xE0A\x2F7\x3\x2\x2\x2"+
		"\xE0B\xE0C\a\x8A\x2\x2\xE0C\xE0D\a\x96\x2\x2\xE0D\xE0E\x6\x17D\x4\x3\xE0E"+
		"\x2F9\x3\x2\x2\x2\xE0F\xE16\x5\x2FC\x17F\x2\xE10\xE16\ao\x2\x2\xE11\xE16"+
		"\aq\x2\x2\xE12\xE16\ar\x2\x2\xE13\xE16\as\x2\x2\xE14\xE16\a\x42\x2\x2"+
		"\xE15\xE0F\x3\x2\x2\x2\xE15\xE10\x3\x2\x2\x2\xE15\xE11\x3\x2\x2\x2\xE15"+
		"\xE12\x3\x2\x2\x2\xE15\xE13\x3\x2\x2\x2\xE15\xE14\x3\x2\x2\x2\xE16\x2FB"+
		"\x3\x2\x2\x2\xE17\xE18\t\x10\x2\x2\xE18\x2FD\x3\x2\x2\x2\xE19\xE1A\t\x11"+
		"\x2\x2\xE1A\x2FF\x3\x2\x2\x2\xE1B\xE1C\a\x1A\x2\x2\xE1C\xE1E\x5\x6\x4"+
		"\x2\xE1D\xE1F\x5\x172\xBA\x2\xE1E\xE1D\x3\x2\x2\x2\xE1E\xE1F\x3\x2\x2"+
		"\x2\xE1F\xE21\x3\x2\x2\x2\xE20\xE22\x5\x178\xBD\x2\xE21\xE20\x3\x2\x2"+
		"\x2\xE21\xE22\x3\x2\x2\x2\xE22\xE24\x3\x2\x2\x2\xE23\xE25\x5\x17C\xBF"+
		"\x2\xE24\xE23\x3\x2\x2\x2\xE24\xE25\x3\x2\x2\x2\xE25\xE26\x3\x2\x2\x2"+
		"\xE26\xE28\x5\x188\xC5\x2\xE27\xE29\a}\x2\x2\xE28\xE27\x3\x2\x2\x2\xE28"+
		"\xE29\x3\x2\x2\x2\xE29\x301\x3\x2\x2\x2\xE2A\xE2B\a[\x2\x2\xE2B\xE2D\x5"+
		"\x6\x4\x2\xE2C\xE2E\x5\x172\xBA\x2\xE2D\xE2C\x3\x2\x2\x2\xE2D\xE2E\x3"+
		"\x2\x2\x2\xE2E\xE30\x3\x2\x2\x2\xE2F\xE31\x5\x212\x10A\x2\xE30\xE2F\x3"+
		"\x2\x2\x2\xE30\xE31\x3\x2\x2\x2\xE31\xE33\x3\x2\x2\x2\xE32\xE34\x5\x17C"+
		"\xBF\x2\xE33\xE32\x3\x2\x2\x2\xE33\xE34\x3\x2\x2\x2\xE34\xE35\x3\x2\x2"+
		"\x2\xE35\xE37\x5\x214\x10B\x2\xE36\xE38\a}\x2\x2\xE37\xE36\x3\x2\x2\x2"+
		"\xE37\xE38\x3\x2\x2\x2\xE38\x303\x3\x2\x2\x2\xE39\xE3A\a\x38\x2\x2\xE3A"+
		"\xE3C\x5\x6\x4\x2\xE3B\xE3D\x5\x22E\x118\x2\xE3C\xE3B\x3\x2\x2\x2\xE3C"+
		"\xE3D\x3\x2\x2\x2\xE3D\xE3F\x3\x2\x2\x2\xE3E\xE40\x5\x234\x11B\x2\xE3F"+
		"\xE3E\x3\x2\x2\x2\xE3F\xE40\x3\x2\x2\x2\xE40\xE42\x3\x2\x2\x2\xE41\xE43"+
		"\x5\x17C\xBF\x2\xE42\xE41\x3\x2\x2\x2\xE42\xE43\x3\x2\x2\x2\xE43\xE44"+
		"\x3\x2\x2\x2\xE44\xE46\x5\x236\x11C\x2\xE45\xE47\a}\x2\x2\xE46\xE45\x3"+
		"\x2\x2\x2\xE46\xE47\x3\x2\x2\x2\xE47\x305\x3\x2\x2\x2\xE48\xE49\a%\x2"+
		"\x2\xE49\xE4B\x5\x6\x4\x2\xE4A\xE4C\x5\x248\x125\x2\xE4B\xE4A\x3\x2\x2"+
		"\x2\xE4B\xE4C\x3\x2\x2\x2\xE4C\xE4D\x3\x2\x2\x2\xE4D\xE4F\x5\x24A\x126"+
		"\x2\xE4E\xE50\a}\x2\x2\xE4F\xE4E\x3\x2\x2\x2\xE4F\xE50\x3\x2\x2\x2\xE50"+
		"\x307\x3\x2\x2\x2\xE51\xE52\a\x1F\x2\x2\xE52\xE53\x5\x1A8\xD5\x2\xE53"+
		"\xE55\x5\x6\x4\x2\xE54\xE56\x5\x22E\x118\x2\xE55\xE54\x3\x2\x2\x2\xE55"+
		"\xE56\x3\x2\x2\x2\xE56\xE57\x3\x2\x2\x2\xE57\xE59\ax\x2\x2\xE58\xE5A\x5"+
		"\x1AE\xD8\x2\xE59\xE58\x3\x2\x2\x2\xE59\xE5A\x3\x2\x2\x2\xE5A\xE5B\x3"+
		"\x2\x2\x2\xE5B\xE5D\ay\x2\x2\xE5C\xE5E\x5\x17C\xBF\x2\xE5D\xE5C\x3\x2"+
		"\x2\x2\xE5D\xE5E\x3\x2\x2\x2\xE5E\xE5F\x3\x2\x2\x2\xE5F\xE60\a}\x2\x2"+
		"\xE60\x309\x3\x2\x2\x2\xE61\xE62\a\'\x2\x2\xE62\xE6B\x5\f\a\x2\xE63\xE64"+
		"\x5\x19A\xCE\x2\xE64\xE65\a}\x2\x2\xE65\xE6C\x3\x2\x2\x2\xE66\xE67\x5"+
		"\x1AA\xD6\x2\xE67\xE68\at\x2\x2\xE68\xE69\x5\x1D0\xE9\x2\xE69\xE6A\au"+
		"\x2\x2\xE6A\xE6C\x3\x2\x2\x2\xE6B\xE63\x3\x2\x2\x2\xE6B\xE66\x3\x2\x2"+
		"\x2\xE6C\x30B\x3\x2\x2\x2\xE6D\xE6E\x5\x19A\xCE\x2\xE6E\xE6F\a}\x2\x2"+
		"\xE6F\x30D\x3\x2\x2\x2\xE70\xE71\x5\x1AA\xD6\x2\xE71\xE72\at\x2\x2\xE72"+
		"\xE73\x5\x1C0\xE1\x2\xE73\xE74\au\x2\x2\xE74\x30F\x3\x2\x2\x2\xE75\xE76"+
		"\a\x1B\x2\x2\xE76\xE77\x5\f\a\x2\xE77\xE78\x5\x196\xCC\x2\xE78\xE79\a"+
		"}\x2\x2\xE79\x311\x3\x2\x2\x2\xE7A\xE7B\a]\x2\x2\xE7B\xE7C\av\x2\x2\xE7C"+
		"\xE7D\x5\x1AE\xD8\x2\xE7D\xE7E\aw\x2\x2\xE7E\xE7F\at\x2\x2\xE7F\xE80\x5"+
		"\x1C0\xE1\x2\xE80\xE81\au\x2\x2\xE81\x313\x3\x2\x2\x2\xE82\xE83\a\x87"+
		"\x2\x2\xE83\xE84\x5\x6\x4\x2\xE84\xE85\ax\x2\x2\xE85\xE86\ay\x2\x2\xE86"+
		"\xE87\x5\x208\x105\x2\xE87\x315\x3\x2\x2\x2\xE88\xE89\x5\x6\x4\x2\xE89"+
		"\xE8B\ax\x2\x2\xE8A\xE8C\x5\x1AE\xD8\x2\xE8B\xE8A\x3\x2\x2\x2\xE8B\xE8C"+
		"\x3\x2\x2\x2\xE8C\xE8D\x3\x2\x2\x2\xE8D\xE8F\ay\x2\x2\xE8E\xE90\x5\x1FC"+
		"\xFF\x2\xE8F\xE8E\x3\x2\x2\x2\xE8F\xE90\x3\x2\x2\x2\xE90\xE91\x3\x2\x2"+
		"\x2\xE91\xE92\x5\x20A\x106\x2\xE92\x317\x3\x2\x2\x2\xE93\xE95\x5\x31A"+
		"\x18E\x2\xE94\xE96\x5\x172\xBA\x2\xE95\xE94\x3\x2\x2\x2\xE95\xE96\x3\x2"+
		"\x2\x2\xE96\xE97\x3\x2\x2\x2\xE97\xE99\ax\x2\x2\xE98\xE9A\x5\x1AE\xD8"+
		"\x2\xE99\xE98\x3\x2\x2\x2\xE99\xE9A\x3\x2\x2\x2\xE9A\xE9B\x3\x2\x2\x2"+
		"\xE9B\xE9D\ay\x2\x2\xE9C\xE9E\x5\x17C\xBF\x2\xE9D\xE9C\x3\x2\x2\x2\xE9D"+
		"\xE9E\x3\x2\x2\x2\xE9E\xE9F\x3\x2\x2\x2\xE9F\xEA0\x5\x1AC\xD7\x2\xEA0"+
		"\x319\x3\x2\x2\x2\xEA1\xEA2\x5\x31C\x18F\x2\xEA2\x31B\x3\x2\x2\x2\xEA3"+
		"\xEA9\x5\x6\x4\x2\xEA4\xEA5\x5\x6\x4\x2\xEA5\xEA6\a\x8C\x2\x2\xEA6\xEA7"+
		"\x5\x6\x4\x2\xEA7\xEA9\x3\x2\x2\x2\xEA8\xEA3\x3\x2\x2\x2\xEA8\xEA4\x3"+
		"\x2\x2\x2\xEA9\xEB0\x3\x2\x2\x2\xEAA\xEAB\x5\n\x6\x2\xEAB\xEAC\az\x2\x2"+
		"\xEAC\xEAD\x5\x6\x4\x2\xEAD\xEAF\x3\x2\x2\x2\xEAE\xEAA\x3\x2\x2\x2\xEAF"+
		"\xEB2\x3\x2\x2\x2\xEB0\xEAE\x3\x2\x2\x2\xEB0\xEB1\x3\x2\x2\x2\xEB1\x31D"+
		"\x3\x2\x2\x2\xEB2\xEB0\x3\x2\x2\x2\xEB3\xEB4\a\x45\x2\x2\xEB4\xEB5\x5"+
		"\x1EE\xF8\x2\xEB5\xEB6\ax\x2\x2\xEB6\xEB7\x5\f\a\x2\xEB7\xEBC\x5\x6\x4"+
		"\x2\xEB8\xEB9\a{\x2\x2\xEB9\xEBA\x5\f\a\x2\xEBA\xEBB\x5\x6\x4\x2\xEBB"+
		"\xEBD\x3\x2\x2\x2\xEBC\xEB8\x3\x2\x2\x2\xEBC\xEBD\x3\x2\x2\x2\xEBD\xEBE"+
		"\x3\x2\x2\x2\xEBE\xEBF\ay\x2\x2\xEBF\xEC0\x5\x1F2\xFA\x2\xEC0\x31F\x3"+
		"\x2\x2\x2\xEC1\xEC3\x5\x6\x4\x2\xEC2\xEC4\x5\x172\xBA\x2\xEC3\xEC2\x3"+
		"\x2\x2\x2\xEC3\xEC4\x3\x2\x2\x2\xEC4\xEC5\x3\x2\x2\x2\xEC5\xEC7\ax\x2"+
		"\x2\xEC6\xEC8\x5\x1AE\xD8\x2\xEC7\xEC6\x3\x2\x2\x2\xEC7\xEC8\x3\x2\x2"+
		"\x2\xEC8\xEC9\x3\x2\x2\x2\xEC9\xECB\ay\x2\x2\xECA\xECC\x5\x17C\xBF\x2"+
		"\xECB\xECA\x3\x2\x2\x2\xECB\xECC\x3\x2\x2\x2\xECC\xECD\x3\x2\x2\x2\xECD"+
		"\xECE\a}\x2\x2\xECE\x321\x3\x2\x2\x2\xECF\xED0\x5\x6\x4\x2\xED0\xED1\a"+
		"t\x2\x2\xED1\xED2\x5\x240\x121\x2\xED2\xED3\au\x2\x2\xED3\x323\x3\x2\x2"+
		"\x2\xED4\xED5\a\'\x2\x2\xED5\xED6\x5\f\a\x2\xED6\xED7\x5\x6\x4\x2\xED7"+
		"\xED8\a}\x2\x2\xED8\x325\x3\x2\x2\x2\xED9\xEDA\a]\x2\x2\xEDA\xEDB\av\x2"+
		"\x2\xEDB\xEDC\x5\x1AE\xD8\x2\xEDC\xEDD\aw\x2\x2\xEDD\xEDE\at\x2\x2\xEDE"+
		"\xEDF\x5\x240\x121\x2\xEDF\xEE0\au\x2\x2\xEE0\x327\x3\x2\x2\x2\xEE1\xEE2"+
		"\az\x2\x2\xEE2\xEE3\x5\x6\x4\x2\xEE3\xEE4\x5\n\x6\x2\xEE4\x329\x3\x2\x2"+
		"\x2\xEE5\xEE7\ax\x2\x2\xEE6\xEE8\x5.\x18\x2\xEE7\xEE6\x3\x2\x2\x2\xEE7"+
		"\xEE8\x3\x2\x2\x2\xEE8\xEE9\x3\x2\x2\x2\xEE9\xEEA\ay\x2\x2\xEEA\x32B\x3"+
		"\x2\x2\x2\xEEB\xEED\ax\x2\x2\xEEC\xEEE\x5.\x18\x2\xEED\xEEC\x3\x2\x2\x2"+
		"\xEED\xEEE\x3\x2\x2\x2\xEEE\xEEF\x3\x2\x2\x2\xEEF\xEF1\ay\x2\x2\xEF0\xEF2"+
		"\x5L\'\x2\xEF1\xEF0\x3\x2\x2\x2\xEF1\xEF2\x3\x2\x2\x2\xEF2\x32D\x3\x2"+
		"\x2\x2\x19C\x338\x340\x345\x34B\x34D\x354\x358\x35D\x369\x36B\x372\x378"+
		"\x37E\x387\x38D\x395\x39B\x3A1\x3A5\x3AB\x3BA\x3C8\x3CC\x3D8\x3DE\x3E7"+
		"\x3EC\x3F1\x403\x406\x40B\x411\x419\x42F\x43E\x444\x448\x44B\x44F\x456"+
		"\x45A\x461\x46A\x46F\x478\x480\x48B\x48E\x493\x4A3\x4A7\x4AE\x4B6\x4C2"+
		"\x4C6\x4CB\x4CD\x4D2\x4D6\x4DB\x4E3\x502\x556\x56A\x56C\x574\x576\x57F"+
		"\x581\x591\x593\x59D\x5A7\x5B0\x5B2\x5BA\x5C2\x5CA\x5D2\x5DA\x5E0\x5E8"+
		"\x5F0\x5FF\x603\x60C\x610\x619\x61D\x624\x62B\x632\x639\x63D\x643\x64B"+
		"\x657\x663\x671\x67D\x687\x68C\x690\x694\x6B1\x6B5\x6BA\x6C3\x6C7\x6D5"+
		"\x6D9\x6E0\x6EE\x6FA\x700\x705\x712\x716\x71F\x729\x731\x73B\x744\x74A"+
		"\x75D\x761\x765\x76C\x777\x788\x79C\x7A0\x7A6\x7AD\x7B0\x7B4\x7B7\x7BD"+
		"\x7C4\x7E3\x7EE\x7F1\x7F4\x7F7\x7FC\x800\x808\x80F\x814\x817\x81A\x821"+
		"\x82B\x82F\x83E\x842\x845\x848\x84F\x857\x85A\x85D\x862\x865\x868\x86C"+
		"\x872\x87E\x885\x88A\x88F\x89A\x8A2\x8A9\x8B5\x8B9\x8BB\x8C0\x8C7\x8D0"+
		"\x8D7\x8DA\x8DD\x8E6\x8E9\x8EE\x8FF\x910\x91C\x923\x92F\x937\x93B\x941"+
		"\x944\x947\x94C\x950\x954\x959\x967\x96B\x971\x977\x979\x980\x984\x987"+
		"\x98C\x98F\x997\x99E\x9A1\x9AC\x9BA\x9BD\x9C0\x9C5\x9CA\x9CC\x9CF\x9D2"+
		"\x9D8\x9DB\x9E7\x9EB\x9EE\x9F1\x9FD\xA03\xA12\xA15\xA1F\xA22\xA28\xA2E"+
		"\xA31\xA3C\xA4A\xA50\xA58\xA62\xA69\xA6E\xA95\xAAD\xABF\xAC3\xAC6\xAC9"+
		"\xAD1\xAD9\xADE\xAE2\xAE8\xAEF\xAF2\xAF6\xAF9\xB05\xB0B\xB0F\xB12\xB15"+
		"\xB18\xB1D\xB20\xB23\xB27\xB2D\xB36\xB3D\xB45\xB49\xB4C\xB54\xB5A\xB60"+
		"\xB66\xB68\xB6E\xB72\xB7A\xB82\xB86\xB8D\xB91\xB94\xB97\xB9C\xB9F\xBA2"+
		"\xBA6\xBAC\xBB5\xBBC\xBBF\xBC4\xBC7\xBCC\xBD6\xBDD\xBE0\xBE3\xBE8\xBEC"+
		"\xBF0\xC01\xC06\xC0A\xC0E\xC17\xC1A\xC1D\xC22\xC26\xC2A\xC2F\xC32\xC3B"+
		"\xC40\xC45\xC4A\xC4F\xC51\xC54\xC57\xC5F\xC62\xC6E\xC71\xC76\xC7A\xC84"+
		"\xC88\xC8D\xC96\xC9A\xC9F\xCA2\xCA5\xCAB\xCAF\xCB3\xCBB\xCC4\xCCB\xCD1"+
		"\xCDA\xCE1\xCE5\xCE9\xCF2\xCF9\xCFE\xD04\xD0D\xD17\xD37\xD3A\xD3D\xD41"+
		"\xD4A\xD61\xD65\xD6F\xD71\xD79\xD7B\xD82\xD8A\xDA3\xDAD\xDB2\xDB5\xDBF"+
		"\xDC8\xE15\xE1E\xE21\xE24\xE28\xE2D\xE30\xE33\xE37\xE3C\xE3F\xE42\xE46"+
		"\xE4B\xE4F\xE55\xE59\xE5D\xE6B\xE8B\xE8F\xE95\xE99\xE9D\xEA8\xEB0\xEBC"+
		"\xEC3\xEC7\xECB\xEE7\xEED\xEF1";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace NoFuture.Antlr.Grammers
