//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Projects\31g\trunk\Code\NoFuture\Antlr\Grammers\HTMLParser.g4 by ANTLR 4.6.4

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace NoFuture.Antlr.HTML
{
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.4")]
[System.CLSCompliant(false)]
public partial class HTMLParser : Parser {
	public const int
		HTML_COMMENT=1, HTML_CONDITIONAL_COMMENT=2, XML_DECLARATION=3, CDATA=4, 
		DTD=5, SCRIPTLET=6, SEA_WS=7, SCRIPT_OPEN=8, STYLE_OPEN=9, TAG_OPEN=10, 
		HTML_TEXT=11, TAG_CLOSE=12, TAG_SLASH_CLOSE=13, TAG_SLASH=14, TAG_EQUALS=15, 
		TAG_NAME=16, TAG_WHITESPACE=17, SCRIPT_BODY=18, SCRIPT_SHORT_BODY=19, 
		STYLE_BODY=20, STYLE_SHORT_BODY=21, ATTVALUE_VALUE=22, ATTRIBUTE=23;
	public const int
		RULE_htmlDocument = 0, RULE_htmlElements = 1, RULE_htmlElement = 2, RULE_htmlContent = 3, 
		RULE_htmlAttribute = 4, RULE_htmlAttributeName = 5, RULE_htmlAttributeValue = 6, 
		RULE_htmlTagName = 7, RULE_htmlChardata = 8, RULE_htmlMisc = 9, RULE_htmlComment = 10, 
		RULE_xhtmlCDATA = 11, RULE_dtd = 12, RULE_xml = 13, RULE_scriptlet = 14, 
		RULE_script = 15, RULE_style = 16;
	public static readonly string[] ruleNames = {
		"htmlDocument", "htmlElements", "htmlElement", "htmlContent", "htmlAttribute", 
		"htmlAttributeName", "htmlAttributeValue", "htmlTagName", "htmlChardata", 
		"htmlMisc", "htmlComment", "xhtmlCDATA", "dtd", "xml", "scriptlet", "script", 
		"style"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, "'<'", null, 
		"'>'", "'/>'", "'/'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "HTML_COMMENT", "HTML_CONDITIONAL_COMMENT", "XML_DECLARATION", "CDATA", 
		"DTD", "SCRIPTLET", "SEA_WS", "SCRIPT_OPEN", "STYLE_OPEN", "TAG_OPEN", 
		"HTML_TEXT", "TAG_CLOSE", "TAG_SLASH_CLOSE", "TAG_SLASH", "TAG_EQUALS", 
		"TAG_NAME", "TAG_WHITESPACE", "SCRIPT_BODY", "SCRIPT_SHORT_BODY", "STYLE_BODY", 
		"STYLE_SHORT_BODY", "ATTVALUE_VALUE", "ATTRIBUTE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "HTMLParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public HTMLParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class HtmlDocumentContext : ParserRuleContext {
		public ScriptletContext[] scriptlet() {
			return GetRuleContexts<ScriptletContext>();
		}
		public ScriptletContext scriptlet(int i) {
			return GetRuleContext<ScriptletContext>(i);
		}
		public ITerminalNode[] SEA_WS() { return GetTokens(HTMLParser.SEA_WS); }
		public ITerminalNode SEA_WS(int i) {
			return GetToken(HTMLParser.SEA_WS, i);
		}
		public XmlContext xml() {
			return GetRuleContext<XmlContext>(0);
		}
		public DtdContext dtd() {
			return GetRuleContext<DtdContext>(0);
		}
		public HtmlElementsContext[] htmlElements() {
			return GetRuleContexts<HtmlElementsContext>();
		}
		public HtmlElementsContext htmlElements(int i) {
			return GetRuleContext<HtmlElementsContext>(i);
		}
		public HtmlDocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlDocument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.EnterHtmlDocument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.ExitHtmlDocument(this);
		}
	}

	[RuleVersion(0)]
	public HtmlDocumentContext htmlDocument() {
		HtmlDocumentContext _localctx = new HtmlDocumentContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_htmlDocument);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 38;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 36;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case SCRIPTLET:
						{
						State = 34; scriptlet();
						}
						break;
					case SEA_WS:
						{
						State = 35; Match(SEA_WS);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 40;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			}
			State = 42;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==XML_DECLARATION) {
				{
				State = 41; xml();
				}
			}

			State = 48;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 46;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case SCRIPTLET:
						{
						State = 44; scriptlet();
						}
						break;
					case SEA_WS:
						{
						State = 45; Match(SEA_WS);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 50;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			}
			State = 52;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==DTD) {
				{
				State = 51; dtd();
				}
			}

			State = 58;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 56;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case SCRIPTLET:
						{
						State = 54; scriptlet();
						}
						break;
					case SEA_WS:
						{
						State = 55; Match(SEA_WS);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 60;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			}
			State = 64;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << HTML_COMMENT) | (1L << HTML_CONDITIONAL_COMMENT) | (1L << SCRIPTLET) | (1L << SEA_WS) | (1L << SCRIPT_OPEN) | (1L << STYLE_OPEN) | (1L << TAG_OPEN))) != 0)) {
				{
				{
				State = 61; htmlElements();
				}
				}
				State = 66;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlElementsContext : ParserRuleContext {
		public HtmlElementContext htmlElement() {
			return GetRuleContext<HtmlElementContext>(0);
		}
		public HtmlMiscContext[] htmlMisc() {
			return GetRuleContexts<HtmlMiscContext>();
		}
		public HtmlMiscContext htmlMisc(int i) {
			return GetRuleContext<HtmlMiscContext>(i);
		}
		public HtmlElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlElements; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.EnterHtmlElements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.ExitHtmlElements(this);
		}
	}

	[RuleVersion(0)]
	public HtmlElementsContext htmlElements() {
		HtmlElementsContext _localctx = new HtmlElementsContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_htmlElements);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << HTML_COMMENT) | (1L << HTML_CONDITIONAL_COMMENT) | (1L << SEA_WS))) != 0)) {
				{
				{
				State = 67; htmlMisc();
				}
				}
				State = 72;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 73; htmlElement();
			State = 77;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,10,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 74; htmlMisc();
					}
					} 
				}
				State = 79;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,10,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlElementContext : ParserRuleContext {
		public HtmlElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlElement; } }
	 
		public HtmlElementContext() { }
		public virtual void CopyFrom(HtmlElementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PairElementContext : HtmlElementContext {
		public ITerminalNode[] TAG_OPEN() { return GetTokens(HTMLParser.TAG_OPEN); }
		public ITerminalNode TAG_OPEN(int i) {
			return GetToken(HTMLParser.TAG_OPEN, i);
		}
		public HtmlTagNameContext[] htmlTagName() {
			return GetRuleContexts<HtmlTagNameContext>();
		}
		public HtmlTagNameContext htmlTagName(int i) {
			return GetRuleContext<HtmlTagNameContext>(i);
		}
		public ITerminalNode[] TAG_CLOSE() { return GetTokens(HTMLParser.TAG_CLOSE); }
		public ITerminalNode TAG_CLOSE(int i) {
			return GetToken(HTMLParser.TAG_CLOSE, i);
		}
		public HtmlContentContext htmlContent() {
			return GetRuleContext<HtmlContentContext>(0);
		}
		public ITerminalNode TAG_SLASH() { return GetToken(HTMLParser.TAG_SLASH, 0); }
		public HtmlAttributeContext[] htmlAttribute() {
			return GetRuleContexts<HtmlAttributeContext>();
		}
		public HtmlAttributeContext htmlAttribute(int i) {
			return GetRuleContext<HtmlAttributeContext>(i);
		}
		public PairElementContext(HtmlElementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.EnterPairElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.ExitPairElement(this);
		}
	}
	public partial class NonElementContext : HtmlElementContext {
		public ScriptletContext scriptlet() {
			return GetRuleContext<ScriptletContext>(0);
		}
		public ScriptContext script() {
			return GetRuleContext<ScriptContext>(0);
		}
		public StyleContext style() {
			return GetRuleContext<StyleContext>(0);
		}
		public NonElementContext(HtmlElementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.EnterNonElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.ExitNonElement(this);
		}
	}
	public partial class EmptyElementContext : HtmlElementContext {
		public ITerminalNode TAG_OPEN() { return GetToken(HTMLParser.TAG_OPEN, 0); }
		public HtmlTagNameContext htmlTagName() {
			return GetRuleContext<HtmlTagNameContext>(0);
		}
		public ITerminalNode TAG_SLASH_CLOSE() { return GetToken(HTMLParser.TAG_SLASH_CLOSE, 0); }
		public HtmlAttributeContext[] htmlAttribute() {
			return GetRuleContexts<HtmlAttributeContext>();
		}
		public HtmlAttributeContext htmlAttribute(int i) {
			return GetRuleContext<HtmlAttributeContext>(i);
		}
		public ITerminalNode TAG_CLOSE() { return GetToken(HTMLParser.TAG_CLOSE, 0); }
		public EmptyElementContext(HtmlElementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.EnterEmptyElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.ExitEmptyElement(this);
		}
	}

	[RuleVersion(0)]
	public HtmlElementContext htmlElement() {
		HtmlElementContext _localctx = new HtmlElementContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_htmlElement);
		int _la;
		try {
			State = 118;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
			case 1:
				_localctx = new PairElementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 80; Match(TAG_OPEN);
				State = 81; htmlTagName();
				State = 85;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==TAG_NAME) {
					{
					{
					State = 82; htmlAttribute();
					}
					}
					State = 87;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 88; Match(TAG_CLOSE);
				State = 89; htmlContent();
				State = 90; Match(TAG_OPEN);
				State = 91; Match(TAG_SLASH);
				State = 92; htmlTagName();
				State = 93; Match(TAG_CLOSE);
				}
				break;

			case 2:
				_localctx = new EmptyElementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 95; Match(TAG_OPEN);
				State = 96; htmlTagName();
				State = 100;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==TAG_NAME) {
					{
					{
					State = 97; htmlAttribute();
					}
					}
					State = 102;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 103; Match(TAG_SLASH_CLOSE);
				}
				break;

			case 3:
				_localctx = new EmptyElementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 105; Match(TAG_OPEN);
				State = 106; htmlTagName();
				State = 110;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==TAG_NAME) {
					{
					{
					State = 107; htmlAttribute();
					}
					}
					State = 112;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 113; Match(TAG_CLOSE);
				}
				break;

			case 4:
				_localctx = new NonElementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 115; scriptlet();
				}
				break;

			case 5:
				_localctx = new NonElementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 116; script();
				}
				break;

			case 6:
				_localctx = new NonElementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 117; style();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlContentContext : ParserRuleContext {
		public HtmlChardataContext[] htmlChardata() {
			return GetRuleContexts<HtmlChardataContext>();
		}
		public HtmlChardataContext htmlChardata(int i) {
			return GetRuleContext<HtmlChardataContext>(i);
		}
		public HtmlElementContext[] htmlElement() {
			return GetRuleContexts<HtmlElementContext>();
		}
		public HtmlElementContext htmlElement(int i) {
			return GetRuleContext<HtmlElementContext>(i);
		}
		public XhtmlCDATAContext[] xhtmlCDATA() {
			return GetRuleContexts<XhtmlCDATAContext>();
		}
		public XhtmlCDATAContext xhtmlCDATA(int i) {
			return GetRuleContext<XhtmlCDATAContext>(i);
		}
		public HtmlCommentContext[] htmlComment() {
			return GetRuleContexts<HtmlCommentContext>();
		}
		public HtmlCommentContext htmlComment(int i) {
			return GetRuleContext<HtmlCommentContext>(i);
		}
		public HtmlContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlContent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.EnterHtmlContent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.ExitHtmlContent(this);
		}
	}

	[RuleVersion(0)]
	public HtmlContentContext htmlContent() {
		HtmlContentContext _localctx = new HtmlContentContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_htmlContent);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==SEA_WS || _la==HTML_TEXT) {
				{
				State = 120; htmlChardata();
				}
			}

			State = 133;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,18,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 126;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case SCRIPTLET:
					case SCRIPT_OPEN:
					case STYLE_OPEN:
					case TAG_OPEN:
						{
						State = 123; htmlElement();
						}
						break;
					case CDATA:
						{
						State = 124; xhtmlCDATA();
						}
						break;
					case HTML_COMMENT:
					case HTML_CONDITIONAL_COMMENT:
						{
						State = 125; htmlComment();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 129;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==SEA_WS || _la==HTML_TEXT) {
						{
						State = 128; htmlChardata();
						}
					}

					}
					} 
				}
				State = 135;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,18,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlAttributeContext : ParserRuleContext {
		public HtmlAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlAttribute; } }
	 
		public HtmlAttributeContext() { }
		public virtual void CopyFrom(HtmlAttributeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AssignedAttrContext : HtmlAttributeContext {
		public HtmlAttributeNameContext htmlAttributeName() {
			return GetRuleContext<HtmlAttributeNameContext>(0);
		}
		public ITerminalNode TAG_EQUALS() { return GetToken(HTMLParser.TAG_EQUALS, 0); }
		public HtmlAttributeValueContext htmlAttributeValue() {
			return GetRuleContext<HtmlAttributeValueContext>(0);
		}
		public AssignedAttrContext(HtmlAttributeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.EnterAssignedAttr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.ExitAssignedAttr(this);
		}
	}
	public partial class EmptyAttrContext : HtmlAttributeContext {
		public HtmlAttributeNameContext htmlAttributeName() {
			return GetRuleContext<HtmlAttributeNameContext>(0);
		}
		public EmptyAttrContext(HtmlAttributeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.EnterEmptyAttr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.ExitEmptyAttr(this);
		}
	}

	[RuleVersion(0)]
	public HtmlAttributeContext htmlAttribute() {
		HtmlAttributeContext _localctx = new HtmlAttributeContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_htmlAttribute);
		try {
			State = 141;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
			case 1:
				_localctx = new AssignedAttrContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 136; htmlAttributeName();
				State = 137; Match(TAG_EQUALS);
				State = 138; htmlAttributeValue();
				}
				break;

			case 2:
				_localctx = new EmptyAttrContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 140; htmlAttributeName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlAttributeNameContext : ParserRuleContext {
		public ITerminalNode TAG_NAME() { return GetToken(HTMLParser.TAG_NAME, 0); }
		public HtmlAttributeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlAttributeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.EnterHtmlAttributeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.ExitHtmlAttributeName(this);
		}
	}

	[RuleVersion(0)]
	public HtmlAttributeNameContext htmlAttributeName() {
		HtmlAttributeNameContext _localctx = new HtmlAttributeNameContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_htmlAttributeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143; Match(TAG_NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlAttributeValueContext : ParserRuleContext {
		public ITerminalNode ATTVALUE_VALUE() { return GetToken(HTMLParser.ATTVALUE_VALUE, 0); }
		public HtmlAttributeValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlAttributeValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.EnterHtmlAttributeValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.ExitHtmlAttributeValue(this);
		}
	}

	[RuleVersion(0)]
	public HtmlAttributeValueContext htmlAttributeValue() {
		HtmlAttributeValueContext _localctx = new HtmlAttributeValueContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_htmlAttributeValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145; Match(ATTVALUE_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlTagNameContext : ParserRuleContext {
		public ITerminalNode TAG_NAME() { return GetToken(HTMLParser.TAG_NAME, 0); }
		public HtmlTagNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlTagName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.EnterHtmlTagName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.ExitHtmlTagName(this);
		}
	}

	[RuleVersion(0)]
	public HtmlTagNameContext htmlTagName() {
		HtmlTagNameContext _localctx = new HtmlTagNameContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_htmlTagName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147; Match(TAG_NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlChardataContext : ParserRuleContext {
		public ITerminalNode HTML_TEXT() { return GetToken(HTMLParser.HTML_TEXT, 0); }
		public ITerminalNode SEA_WS() { return GetToken(HTMLParser.SEA_WS, 0); }
		public HtmlChardataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlChardata; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.EnterHtmlChardata(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.ExitHtmlChardata(this);
		}
	}

	[RuleVersion(0)]
	public HtmlChardataContext htmlChardata() {
		HtmlChardataContext _localctx = new HtmlChardataContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_htmlChardata);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			_la = _input.La(1);
			if ( !(_la==SEA_WS || _la==HTML_TEXT) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlMiscContext : ParserRuleContext {
		public HtmlCommentContext htmlComment() {
			return GetRuleContext<HtmlCommentContext>(0);
		}
		public ITerminalNode SEA_WS() { return GetToken(HTMLParser.SEA_WS, 0); }
		public HtmlMiscContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlMisc; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.EnterHtmlMisc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.ExitHtmlMisc(this);
		}
	}

	[RuleVersion(0)]
	public HtmlMiscContext htmlMisc() {
		HtmlMiscContext _localctx = new HtmlMiscContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_htmlMisc);
		try {
			State = 153;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case HTML_COMMENT:
			case HTML_CONDITIONAL_COMMENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 151; htmlComment();
				}
				break;
			case SEA_WS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 152; Match(SEA_WS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlCommentContext : ParserRuleContext {
		public ITerminalNode HTML_COMMENT() { return GetToken(HTMLParser.HTML_COMMENT, 0); }
		public ITerminalNode HTML_CONDITIONAL_COMMENT() { return GetToken(HTMLParser.HTML_CONDITIONAL_COMMENT, 0); }
		public HtmlCommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlComment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.EnterHtmlComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.ExitHtmlComment(this);
		}
	}

	[RuleVersion(0)]
	public HtmlCommentContext htmlComment() {
		HtmlCommentContext _localctx = new HtmlCommentContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_htmlComment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			_la = _input.La(1);
			if ( !(_la==HTML_COMMENT || _la==HTML_CONDITIONAL_COMMENT) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XhtmlCDATAContext : ParserRuleContext {
		public ITerminalNode CDATA() { return GetToken(HTMLParser.CDATA, 0); }
		public XhtmlCDATAContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xhtmlCDATA; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.EnterXhtmlCDATA(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.ExitXhtmlCDATA(this);
		}
	}

	[RuleVersion(0)]
	public XhtmlCDATAContext xhtmlCDATA() {
		XhtmlCDATAContext _localctx = new XhtmlCDATAContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_xhtmlCDATA);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157; Match(CDATA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DtdContext : ParserRuleContext {
		public ITerminalNode DTD() { return GetToken(HTMLParser.DTD, 0); }
		public DtdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dtd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.EnterDtd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.ExitDtd(this);
		}
	}

	[RuleVersion(0)]
	public DtdContext dtd() {
		DtdContext _localctx = new DtdContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_dtd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159; Match(DTD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XmlContext : ParserRuleContext {
		public ITerminalNode XML_DECLARATION() { return GetToken(HTMLParser.XML_DECLARATION, 0); }
		public XmlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.EnterXml(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.ExitXml(this);
		}
	}

	[RuleVersion(0)]
	public XmlContext xml() {
		XmlContext _localctx = new XmlContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_xml);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161; Match(XML_DECLARATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptletContext : ParserRuleContext {
		public ITerminalNode SCRIPTLET() { return GetToken(HTMLParser.SCRIPTLET, 0); }
		public ScriptletContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scriptlet; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.EnterScriptlet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.ExitScriptlet(this);
		}
	}

	[RuleVersion(0)]
	public ScriptletContext scriptlet() {
		ScriptletContext _localctx = new ScriptletContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_scriptlet);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163; Match(SCRIPTLET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptContext : ParserRuleContext {
		public ITerminalNode SCRIPT_OPEN() { return GetToken(HTMLParser.SCRIPT_OPEN, 0); }
		public ITerminalNode SCRIPT_BODY() { return GetToken(HTMLParser.SCRIPT_BODY, 0); }
		public ITerminalNode SCRIPT_SHORT_BODY() { return GetToken(HTMLParser.SCRIPT_SHORT_BODY, 0); }
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.EnterScript(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.ExitScript(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_script);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165; Match(SCRIPT_OPEN);
			State = 166;
			_la = _input.La(1);
			if ( !(_la==SCRIPT_BODY || _la==SCRIPT_SHORT_BODY) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StyleContext : ParserRuleContext {
		public ITerminalNode STYLE_OPEN() { return GetToken(HTMLParser.STYLE_OPEN, 0); }
		public ITerminalNode STYLE_BODY() { return GetToken(HTMLParser.STYLE_BODY, 0); }
		public ITerminalNode STYLE_SHORT_BODY() { return GetToken(HTMLParser.STYLE_SHORT_BODY, 0); }
		public StyleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_style; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.EnterStyle(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHTMLParserListener typedListener = listener as IHTMLParserListener;
			if (typedListener != null) typedListener.ExitStyle(this);
		}
	}

	[RuleVersion(0)]
	public StyleContext style() {
		StyleContext _localctx = new StyleContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_style);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168; Match(STYLE_OPEN);
			State = 169;
			_la = _input.La(1);
			if ( !(_la==STYLE_BODY || _la==STYLE_SHORT_BODY) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x19\xAE\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x3\x2\x3\x2\a\x2\'\n\x2\f\x2\xE\x2*\v"+
		"\x2\x3\x2\x5\x2-\n\x2\x3\x2\x3\x2\a\x2\x31\n\x2\f\x2\xE\x2\x34\v\x2\x3"+
		"\x2\x5\x2\x37\n\x2\x3\x2\x3\x2\a\x2;\n\x2\f\x2\xE\x2>\v\x2\x3\x2\a\x2"+
		"\x41\n\x2\f\x2\xE\x2\x44\v\x2\x3\x3\a\x3G\n\x3\f\x3\xE\x3J\v\x3\x3\x3"+
		"\x3\x3\a\x3N\n\x3\f\x3\xE\x3Q\v\x3\x3\x4\x3\x4\x3\x4\a\x4V\n\x4\f\x4\xE"+
		"\x4Y\v\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\a\x4\x65\n\x4\f\x4\xE\x4h\v\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\a\x4o\n"+
		"\x4\f\x4\xE\x4r\v\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4y\n\x4\x3\x5\x5"+
		"\x5|\n\x5\x3\x5\x3\x5\x3\x5\x5\x5\x81\n\x5\x3\x5\x5\x5\x84\n\x5\a\x5\x86"+
		"\n\x5\f\x5\xE\x5\x89\v\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\x90\n\x6"+
		"\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x5\v\x9C\n\v\x3\f\x3"+
		"\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11"+
		"\x3\x12\x3\x12\x3\x12\x3\x12\x2\x2\x2\x13\x2\x2\x4\x2\x6\x2\b\x2\n\x2"+
		"\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2"+
		"\"\x2\x2\x6\x4\x2\t\t\r\r\x3\x2\x3\x4\x3\x2\x14\x15\x3\x2\x16\x17\xB6"+
		"\x2(\x3\x2\x2\x2\x4H\x3\x2\x2\x2\x6x\x3\x2\x2\x2\b{\x3\x2\x2\x2\n\x8F"+
		"\x3\x2\x2\x2\f\x91\x3\x2\x2\x2\xE\x93\x3\x2\x2\x2\x10\x95\x3\x2\x2\x2"+
		"\x12\x97\x3\x2\x2\x2\x14\x9B\x3\x2\x2\x2\x16\x9D\x3\x2\x2\x2\x18\x9F\x3"+
		"\x2\x2\x2\x1A\xA1\x3\x2\x2\x2\x1C\xA3\x3\x2\x2\x2\x1E\xA5\x3\x2\x2\x2"+
		" \xA7\x3\x2\x2\x2\"\xAA\x3\x2\x2\x2$\'\x5\x1E\x10\x2%\'\a\t\x2\x2&$\x3"+
		"\x2\x2\x2&%\x3\x2\x2\x2\'*\x3\x2\x2\x2(&\x3\x2\x2\x2()\x3\x2\x2\x2),\x3"+
		"\x2\x2\x2*(\x3\x2\x2\x2+-\x5\x1C\xF\x2,+\x3\x2\x2\x2,-\x3\x2\x2\x2-\x32"+
		"\x3\x2\x2\x2.\x31\x5\x1E\x10\x2/\x31\a\t\x2\x2\x30.\x3\x2\x2\x2\x30/\x3"+
		"\x2\x2\x2\x31\x34\x3\x2\x2\x2\x32\x30\x3\x2\x2\x2\x32\x33\x3\x2\x2\x2"+
		"\x33\x36\x3\x2\x2\x2\x34\x32\x3\x2\x2\x2\x35\x37\x5\x1A\xE\x2\x36\x35"+
		"\x3\x2\x2\x2\x36\x37\x3\x2\x2\x2\x37<\x3\x2\x2\x2\x38;\x5\x1E\x10\x2\x39"+
		";\a\t\x2\x2:\x38\x3\x2\x2\x2:\x39\x3\x2\x2\x2;>\x3\x2\x2\x2<:\x3\x2\x2"+
		"\x2<=\x3\x2\x2\x2=\x42\x3\x2\x2\x2><\x3\x2\x2\x2?\x41\x5\x4\x3\x2@?\x3"+
		"\x2\x2\x2\x41\x44\x3\x2\x2\x2\x42@\x3\x2\x2\x2\x42\x43\x3\x2\x2\x2\x43"+
		"\x3\x3\x2\x2\x2\x44\x42\x3\x2\x2\x2\x45G\x5\x14\v\x2\x46\x45\x3\x2\x2"+
		"\x2GJ\x3\x2\x2\x2H\x46\x3\x2\x2\x2HI\x3\x2\x2\x2IK\x3\x2\x2\x2JH\x3\x2"+
		"\x2\x2KO\x5\x6\x4\x2LN\x5\x14\v\x2ML\x3\x2\x2\x2NQ\x3\x2\x2\x2OM\x3\x2"+
		"\x2\x2OP\x3\x2\x2\x2P\x5\x3\x2\x2\x2QO\x3\x2\x2\x2RS\a\f\x2\x2SW\x5\x10"+
		"\t\x2TV\x5\n\x6\x2UT\x3\x2\x2\x2VY\x3\x2\x2\x2WU\x3\x2\x2\x2WX\x3\x2\x2"+
		"\x2XZ\x3\x2\x2\x2YW\x3\x2\x2\x2Z[\a\xE\x2\x2[\\\x5\b\x5\x2\\]\a\f\x2\x2"+
		"]^\a\x10\x2\x2^_\x5\x10\t\x2_`\a\xE\x2\x2`y\x3\x2\x2\x2\x61\x62\a\f\x2"+
		"\x2\x62\x66\x5\x10\t\x2\x63\x65\x5\n\x6\x2\x64\x63\x3\x2\x2\x2\x65h\x3"+
		"\x2\x2\x2\x66\x64\x3\x2\x2\x2\x66g\x3\x2\x2\x2gi\x3\x2\x2\x2h\x66\x3\x2"+
		"\x2\x2ij\a\xF\x2\x2jy\x3\x2\x2\x2kl\a\f\x2\x2lp\x5\x10\t\x2mo\x5\n\x6"+
		"\x2nm\x3\x2\x2\x2or\x3\x2\x2\x2pn\x3\x2\x2\x2pq\x3\x2\x2\x2qs\x3\x2\x2"+
		"\x2rp\x3\x2\x2\x2st\a\xE\x2\x2ty\x3\x2\x2\x2uy\x5\x1E\x10\x2vy\x5 \x11"+
		"\x2wy\x5\"\x12\x2xR\x3\x2\x2\x2x\x61\x3\x2\x2\x2xk\x3\x2\x2\x2xu\x3\x2"+
		"\x2\x2xv\x3\x2\x2\x2xw\x3\x2\x2\x2y\a\x3\x2\x2\x2z|\x5\x12\n\x2{z\x3\x2"+
		"\x2\x2{|\x3\x2\x2\x2|\x87\x3\x2\x2\x2}\x81\x5\x6\x4\x2~\x81\x5\x18\r\x2"+
		"\x7F\x81\x5\x16\f\x2\x80}\x3\x2\x2\x2\x80~\x3\x2\x2\x2\x80\x7F\x3\x2\x2"+
		"\x2\x81\x83\x3\x2\x2\x2\x82\x84\x5\x12\n\x2\x83\x82\x3\x2\x2\x2\x83\x84"+
		"\x3\x2\x2\x2\x84\x86\x3\x2\x2\x2\x85\x80\x3\x2\x2\x2\x86\x89\x3\x2\x2"+
		"\x2\x87\x85\x3\x2\x2\x2\x87\x88\x3\x2\x2\x2\x88\t\x3\x2\x2\x2\x89\x87"+
		"\x3\x2\x2\x2\x8A\x8B\x5\f\a\x2\x8B\x8C\a\x11\x2\x2\x8C\x8D\x5\xE\b\x2"+
		"\x8D\x90\x3\x2\x2\x2\x8E\x90\x5\f\a\x2\x8F\x8A\x3\x2\x2\x2\x8F\x8E\x3"+
		"\x2\x2\x2\x90\v\x3\x2\x2\x2\x91\x92\a\x12\x2\x2\x92\r\x3\x2\x2\x2\x93"+
		"\x94\a\x18\x2\x2\x94\xF\x3\x2\x2\x2\x95\x96\a\x12\x2\x2\x96\x11\x3\x2"+
		"\x2\x2\x97\x98\t\x2\x2\x2\x98\x13\x3\x2\x2\x2\x99\x9C\x5\x16\f\x2\x9A"+
		"\x9C\a\t\x2\x2\x9B\x99\x3\x2\x2\x2\x9B\x9A\x3\x2\x2\x2\x9C\x15\x3\x2\x2"+
		"\x2\x9D\x9E\t\x3\x2\x2\x9E\x17\x3\x2\x2\x2\x9F\xA0\a\x6\x2\x2\xA0\x19"+
		"\x3\x2\x2\x2\xA1\xA2\a\a\x2\x2\xA2\x1B\x3\x2\x2\x2\xA3\xA4\a\x5\x2\x2"+
		"\xA4\x1D\x3\x2\x2\x2\xA5\xA6\a\b\x2\x2\xA6\x1F\x3\x2\x2\x2\xA7\xA8\a\n"+
		"\x2\x2\xA8\xA9\t\x4\x2\x2\xA9!\x3\x2\x2\x2\xAA\xAB\a\v\x2\x2\xAB\xAC\t"+
		"\x5\x2\x2\xAC#\x3\x2\x2\x2\x17&(,\x30\x32\x36:<\x42HOW\x66px{\x80\x83"+
		"\x87\x8F\x9B";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace NoFuture.Antlr.Grammers
