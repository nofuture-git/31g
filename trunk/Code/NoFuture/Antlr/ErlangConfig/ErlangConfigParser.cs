//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Projects\31g\trunk\Code\NoFuture\Antlr\Grammers\ErlangConfig.g4 by ANTLR 4.6.4

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace NoFuture.Antlr.ErlangConfig
{
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.4")]
[System.CLSCompliant(false)]
public partial class ErlangConfigParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, DBL_QUOTE_ATOM=8, 
		SNGL_QUOTE_ATOM=9, ATOM=10, WS=11;
	public const int
		RULE_erlConfigFile = 0, RULE_erlApplication = 1, RULE_erlNameValuePair = 2, 
		RULE_erlArray = 3, RULE_erlName = 4, RULE_erlEmptyArray = 5, RULE_erlAtomValue = 6;
	public static readonly string[] ruleNames = {
		"erlConfigFile", "erlApplication", "erlNameValuePair", "erlArray", "erlName", 
		"erlEmptyArray", "erlAtomValue"
	};

	private static readonly string[] _LiteralNames = {
		null, "'['", "','", "'\r\n'", "'].'", "'{'", "'}'", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "DBL_QUOTE_ATOM", "SNGL_QUOTE_ATOM", 
		"ATOM", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ErlangConfig.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public ErlangConfigParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ErlConfigFileContext : ParserRuleContext {
		public ErlApplicationContext[] erlApplication() {
			return GetRuleContexts<ErlApplicationContext>();
		}
		public ErlApplicationContext erlApplication(int i) {
			return GetRuleContext<ErlApplicationContext>(i);
		}
		public ITerminalNode Eof() { return GetToken(ErlangConfigParser.Eof, 0); }
		public ErlConfigFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_erlConfigFile; } }
		public override void EnterRule(IParseTreeListener listener) {
			IErlangConfigListener typedListener = listener as IErlangConfigListener;
			if (typedListener != null) typedListener.EnterErlConfigFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IErlangConfigListener typedListener = listener as IErlangConfigListener;
			if (typedListener != null) typedListener.ExitErlConfigFile(this);
		}
	}

	[RuleVersion(0)]
	public ErlConfigFileContext erlConfigFile() {
		ErlConfigFileContext _localctx = new ErlConfigFileContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_erlConfigFile);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 14; Match(T__0);
			State = 15; erlApplication();
			State = 20;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,0,_ctx);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 16; Match(T__1);
					State = 17; erlApplication();
					}
					} 
				}
				State = 22;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,0,_ctx);
			}
			State = 24;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__2) {
				{
				State = 23; Match(T__2);
				}
			}

			State = 26; Match(T__3);
			State = 28;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__2) {
				{
				State = 27; Match(T__2);
				}
			}

			State = 30; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErlApplicationContext : ParserRuleContext {
		public ErlNameContext erlName() {
			return GetRuleContext<ErlNameContext>(0);
		}
		public ErlArrayContext erlArray() {
			return GetRuleContext<ErlArrayContext>(0);
		}
		public ErlApplicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_erlApplication; } }
		public override void EnterRule(IParseTreeListener listener) {
			IErlangConfigListener typedListener = listener as IErlangConfigListener;
			if (typedListener != null) typedListener.EnterErlApplication(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IErlangConfigListener typedListener = listener as IErlangConfigListener;
			if (typedListener != null) typedListener.ExitErlApplication(this);
		}
	}

	[RuleVersion(0)]
	public ErlApplicationContext erlApplication() {
		ErlApplicationContext _localctx = new ErlApplicationContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_erlApplication);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32; Match(T__4);
			State = 33; erlName();
			State = 34; Match(T__1);
			State = 35; erlArray();
			State = 36; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErlNameValuePairContext : ParserRuleContext {
		public ErlNameValuePairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_erlNameValuePair; } }
	 
		public ErlNameValuePairContext() { }
		public virtual void CopyFrom(ErlNameValuePairContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NameValue2ValueContext : ErlNameValuePairContext {
		public ErlNameContext erlName() {
			return GetRuleContext<ErlNameContext>(0);
		}
		public ErlAtomValueContext erlAtomValue() {
			return GetRuleContext<ErlAtomValueContext>(0);
		}
		public NameValue2ValueContext(ErlNameValuePairContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IErlangConfigListener typedListener = listener as IErlangConfigListener;
			if (typedListener != null) typedListener.EnterNameValue2Value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IErlangConfigListener typedListener = listener as IErlangConfigListener;
			if (typedListener != null) typedListener.ExitNameValue2Value(this);
		}
	}
	public partial class NameValue2NameValueContext : ErlNameValuePairContext {
		public ErlNameContext erlName() {
			return GetRuleContext<ErlNameContext>(0);
		}
		public ErlNameValuePairContext erlNameValuePair() {
			return GetRuleContext<ErlNameValuePairContext>(0);
		}
		public NameValue2NameValueContext(ErlNameValuePairContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IErlangConfigListener typedListener = listener as IErlangConfigListener;
			if (typedListener != null) typedListener.EnterNameValue2NameValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IErlangConfigListener typedListener = listener as IErlangConfigListener;
			if (typedListener != null) typedListener.ExitNameValue2NameValue(this);
		}
	}
	public partial class NameValue2ArrayContext : ErlNameValuePairContext {
		public ErlNameContext erlName() {
			return GetRuleContext<ErlNameContext>(0);
		}
		public ErlArrayContext erlArray() {
			return GetRuleContext<ErlArrayContext>(0);
		}
		public NameValue2ArrayContext(ErlNameValuePairContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IErlangConfigListener typedListener = listener as IErlangConfigListener;
			if (typedListener != null) typedListener.EnterNameValue2Array(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IErlangConfigListener typedListener = listener as IErlangConfigListener;
			if (typedListener != null) typedListener.ExitNameValue2Array(this);
		}
	}

	[RuleVersion(0)]
	public ErlNameValuePairContext erlNameValuePair() {
		ErlNameValuePairContext _localctx = new ErlNameValuePairContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_erlNameValuePair);
		try {
			State = 56;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				_localctx = new NameValue2ValueContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 38; Match(T__4);
				State = 39; erlName();
				State = 40; Match(T__1);
				State = 41; erlAtomValue();
				State = 42; Match(T__5);
				}
				break;

			case 2:
				_localctx = new NameValue2NameValueContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 44; Match(T__4);
				State = 45; erlName();
				State = 46; Match(T__1);
				State = 47; erlNameValuePair();
				State = 48; Match(T__5);
				}
				break;

			case 3:
				_localctx = new NameValue2ArrayContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 50; Match(T__4);
				State = 51; erlName();
				State = 52; Match(T__1);
				State = 53; erlArray();
				State = 54; Match(T__5);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErlArrayContext : ParserRuleContext {
		public ErlAtomValueContext[] erlAtomValue() {
			return GetRuleContexts<ErlAtomValueContext>();
		}
		public ErlAtomValueContext erlAtomValue(int i) {
			return GetRuleContext<ErlAtomValueContext>(i);
		}
		public ErlNameValuePairContext[] erlNameValuePair() {
			return GetRuleContexts<ErlNameValuePairContext>();
		}
		public ErlNameValuePairContext erlNameValuePair(int i) {
			return GetRuleContext<ErlNameValuePairContext>(i);
		}
		public ErlArrayContext[] erlArray() {
			return GetRuleContexts<ErlArrayContext>();
		}
		public ErlArrayContext erlArray(int i) {
			return GetRuleContext<ErlArrayContext>(i);
		}
		public ErlEmptyArrayContext erlEmptyArray() {
			return GetRuleContext<ErlEmptyArrayContext>(0);
		}
		public ErlArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_erlArray; } }
		public override void EnterRule(IParseTreeListener listener) {
			IErlangConfigListener typedListener = listener as IErlangConfigListener;
			if (typedListener != null) typedListener.EnterErlArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IErlangConfigListener typedListener = listener as IErlangConfigListener;
			if (typedListener != null) typedListener.ExitErlArray(this);
		}
	}

	[RuleVersion(0)]
	public ErlArrayContext erlArray() {
		ErlArrayContext _localctx = new ErlArrayContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_erlArray);
		try {
			int _alt;
			State = 78;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 58; Match(T__0);
				State = 62;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case DBL_QUOTE_ATOM:
				case SNGL_QUOTE_ATOM:
				case ATOM:
					{
					State = 59; erlAtomValue();
					}
					break;
				case T__4:
					{
					State = 60; erlNameValuePair();
					}
					break;
				case T__0:
					{
					State = 61; erlArray();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 72;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 64; Match(T__1);
						State = 68;
						_errHandler.Sync(this);
						switch (_input.La(1)) {
						case DBL_QUOTE_ATOM:
						case SNGL_QUOTE_ATOM:
						case ATOM:
							{
							State = 65; erlAtomValue();
							}
							break;
						case T__4:
							{
							State = 66; erlNameValuePair();
							}
							break;
						case T__0:
							{
							State = 67; erlArray();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						} 
					}
					State = 74;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
				}
				State = 75; Match(T__6);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 77; erlEmptyArray();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErlNameContext : ParserRuleContext {
		public ITerminalNode DBL_QUOTE_ATOM() { return GetToken(ErlangConfigParser.DBL_QUOTE_ATOM, 0); }
		public ITerminalNode SNGL_QUOTE_ATOM() { return GetToken(ErlangConfigParser.SNGL_QUOTE_ATOM, 0); }
		public ITerminalNode ATOM() { return GetToken(ErlangConfigParser.ATOM, 0); }
		public ErlNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_erlName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IErlangConfigListener typedListener = listener as IErlangConfigListener;
			if (typedListener != null) typedListener.EnterErlName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IErlangConfigListener typedListener = listener as IErlangConfigListener;
			if (typedListener != null) typedListener.ExitErlName(this);
		}
	}

	[RuleVersion(0)]
	public ErlNameContext erlName() {
		ErlNameContext _localctx = new ErlNameContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_erlName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DBL_QUOTE_ATOM) | (1L << SNGL_QUOTE_ATOM) | (1L << ATOM))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErlEmptyArrayContext : ParserRuleContext {
		public ErlEmptyArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_erlEmptyArray; } }
		public override void EnterRule(IParseTreeListener listener) {
			IErlangConfigListener typedListener = listener as IErlangConfigListener;
			if (typedListener != null) typedListener.EnterErlEmptyArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IErlangConfigListener typedListener = listener as IErlangConfigListener;
			if (typedListener != null) typedListener.ExitErlEmptyArray(this);
		}
	}

	[RuleVersion(0)]
	public ErlEmptyArrayContext erlEmptyArray() {
		ErlEmptyArrayContext _localctx = new ErlEmptyArrayContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_erlEmptyArray);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82; Match(T__0);
			State = 83; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErlAtomValueContext : ParserRuleContext {
		public ITerminalNode DBL_QUOTE_ATOM() { return GetToken(ErlangConfigParser.DBL_QUOTE_ATOM, 0); }
		public ITerminalNode SNGL_QUOTE_ATOM() { return GetToken(ErlangConfigParser.SNGL_QUOTE_ATOM, 0); }
		public ITerminalNode ATOM() { return GetToken(ErlangConfigParser.ATOM, 0); }
		public ErlAtomValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_erlAtomValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IErlangConfigListener typedListener = listener as IErlangConfigListener;
			if (typedListener != null) typedListener.EnterErlAtomValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IErlangConfigListener typedListener = listener as IErlangConfigListener;
			if (typedListener != null) typedListener.ExitErlAtomValue(this);
		}
	}

	[RuleVersion(0)]
	public ErlAtomValueContext erlAtomValue() {
		ErlAtomValueContext _localctx = new ErlAtomValueContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_erlAtomValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DBL_QUOTE_ATOM) | (1L << SNGL_QUOTE_ATOM) | (1L << ATOM))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\rZ\x4\x2\t\x2\x4"+
		"\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x3\x2\x3\x2"+
		"\x3\x2\x3\x2\a\x2\x15\n\x2\f\x2\xE\x2\x18\v\x2\x3\x2\x5\x2\x1B\n\x2\x3"+
		"\x2\x3\x2\x5\x2\x1F\n\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4;\n\x4\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x5\x5\x41\n\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5G\n\x5\a\x5I\n\x5"+
		"\f\x5\xE\x5L\v\x5\x3\x5\x3\x5\x3\x5\x5\x5Q\n\x5\x3\x6\x3\x6\x3\a\x3\a"+
		"\x3\a\x3\b\x3\b\x3\b\x4\x16J\x2\x2\t\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2"+
		"\xE\x2\x2\x3\x3\x2\n\f]\x2\x10\x3\x2\x2\x2\x4\"\x3\x2\x2\x2\x6:\x3\x2"+
		"\x2\x2\bP\x3\x2\x2\x2\nR\x3\x2\x2\x2\fT\x3\x2\x2\x2\xEW\x3\x2\x2\x2\x10"+
		"\x11\a\x3\x2\x2\x11\x16\x5\x4\x3\x2\x12\x13\a\x4\x2\x2\x13\x15\x5\x4\x3"+
		"\x2\x14\x12\x3\x2\x2\x2\x15\x18\x3\x2\x2\x2\x16\x17\x3\x2\x2\x2\x16\x14"+
		"\x3\x2\x2\x2\x17\x1A\x3\x2\x2\x2\x18\x16\x3\x2\x2\x2\x19\x1B\a\x5\x2\x2"+
		"\x1A\x19\x3\x2\x2\x2\x1A\x1B\x3\x2\x2\x2\x1B\x1C\x3\x2\x2\x2\x1C\x1E\a"+
		"\x6\x2\x2\x1D\x1F\a\x5\x2\x2\x1E\x1D\x3\x2\x2\x2\x1E\x1F\x3\x2\x2\x2\x1F"+
		" \x3\x2\x2\x2 !\a\x2\x2\x3!\x3\x3\x2\x2\x2\"#\a\a\x2\x2#$\x5\n\x6\x2$"+
		"%\a\x4\x2\x2%&\x5\b\x5\x2&\'\a\b\x2\x2\'\x5\x3\x2\x2\x2()\a\a\x2\x2)*"+
		"\x5\n\x6\x2*+\a\x4\x2\x2+,\x5\xE\b\x2,-\a\b\x2\x2-;\x3\x2\x2\x2./\a\a"+
		"\x2\x2/\x30\x5\n\x6\x2\x30\x31\a\x4\x2\x2\x31\x32\x5\x6\x4\x2\x32\x33"+
		"\a\b\x2\x2\x33;\x3\x2\x2\x2\x34\x35\a\a\x2\x2\x35\x36\x5\n\x6\x2\x36\x37"+
		"\a\x4\x2\x2\x37\x38\x5\b\x5\x2\x38\x39\a\b\x2\x2\x39;\x3\x2\x2\x2:(\x3"+
		"\x2\x2\x2:.\x3\x2\x2\x2:\x34\x3\x2\x2\x2;\a\x3\x2\x2\x2<@\a\x3\x2\x2="+
		"\x41\x5\xE\b\x2>\x41\x5\x6\x4\x2?\x41\x5\b\x5\x2@=\x3\x2\x2\x2@>\x3\x2"+
		"\x2\x2@?\x3\x2\x2\x2\x41J\x3\x2\x2\x2\x42\x46\a\x4\x2\x2\x43G\x5\xE\b"+
		"\x2\x44G\x5\x6\x4\x2\x45G\x5\b\x5\x2\x46\x43\x3\x2\x2\x2\x46\x44\x3\x2"+
		"\x2\x2\x46\x45\x3\x2\x2\x2GI\x3\x2\x2\x2H\x42\x3\x2\x2\x2IL\x3\x2\x2\x2"+
		"JK\x3\x2\x2\x2JH\x3\x2\x2\x2KM\x3\x2\x2\x2LJ\x3\x2\x2\x2MN\a\t\x2\x2N"+
		"Q\x3\x2\x2\x2OQ\x5\f\a\x2P<\x3\x2\x2\x2PO\x3\x2\x2\x2Q\t\x3\x2\x2\x2R"+
		"S\t\x2\x2\x2S\v\x3\x2\x2\x2TU\a\x3\x2\x2UV\a\t\x2\x2V\r\x3\x2\x2\x2WX"+
		"\t\x2\x2\x2X\xF\x3\x2\x2\x2\n\x16\x1A\x1E:@\x46JP";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace NoFuture.Antlr.Grammers
