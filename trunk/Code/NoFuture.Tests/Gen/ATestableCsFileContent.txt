using System;
using System.Globalization;
using System.Text;
using System.IO;
using System.Collections.Generic;
using System.Configuration;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using PlummetToxic.YYR.Common.Enumerations;
using PlummetToxic.YYR.DTO;
using PlummetToxic.YYR.Common.Constants;
using PlummetToxic.YYR.UI.Controller.LimitManagement;
using PlummetToxic.YYR.UI.Controller.Common;
using PlummetToxic.YYR.UI.Controller.Admin;
using PlummetToxic.YYR.Common.Utitility;
using System.ComponentModel;
using System.Collections;
using System.Xml.XPath;
using System.Net.Mail;
using System.Net;
using System.Net.Mime;
using PlummetToxic.YYR.UI.Design.WReference;
using System.Xml;
using System.Data.SqlClient;

namespace PlummetToxic.DPP.Onss
{
	public partial class ViewWankathon : System.Web.UI.Page
	{
		string _strDate;
		string _strStartTime = string.Empty;
		string _strEndTime;
		string _strDay;
		string _strProductOrdered = string.Empty;
		string _strProdOrderedComponent;
		string _strConfirmDill;
		string _strProdPrice;
		string _strGaProffFee;	
		CommonController _cc;
		
		public ViewWankathon()
		{
			 _cc = new CommonController();
		}
		protected void Page_Load(object sender, EventArgs e)
		{
			btnSave.Enabled = true;
			lblError.Text = string.Empty;
			revRoom.ValidationExpression = "^[a-zA-Z0-9''" + Convert.ToString(ConfigurationManager.AppSettings["ClientBatAllowedCharecters"]) + "]+$";
			cvRogerDate.ValueToCompare = DateTime.Now.ToString("MM/dd/yyyy");
			btnCreateRoger.Attributes.Add("onclick", "javascript:return GenerateFarslot()");
			if (!Page.IsPostBack)
			{
				grdvFileList.PageSize = Convert.ToString(ConfigurationManager.AppSettings.Get("ShortListRecordsPerPage")) != string.Empty ? Convert.ToInt32(Convert.ToString(ConfigurationManager.AppSettings.Get("ShortListRecordsPerPage"))) : 5;
				//As per the CR - 20 sent on 14 June 2011, Wanker: Dig SSig Date: 20 June 2011 Start
				if (Session[SessionContants.PM_LimiterID] != null)
				{
					_objRogerController = new RogerController();
					ViewState["showPrice"] = _objRogerController.GetLimiterMasterDetails(Convert.ToString(Session[SessionContants.PM_LimiterID])).showPrice;
				}
				//End
				//CR No - PMCR000005,  Wanker:Dr Wannabe, Date: 19/05/2011
				hdnCurrentDate.Value = DateTime.Now.ToShortDateString();
				//VenttBlockTimeslot();
				ViewState["sort"] = "ASC";
				ViewState["sortExpr"] = null;
				lblError.Visible = false;
				ViewState["BucketD"] = null;
				ViewState["RogerDt"] = null;
				ViewState["StartTm"] = null;
				ViewState["EndTm"] = null;
				ViewState["WDixID"] = null;
				Session[SessionContants.Limiter_LIBOFDOC] = null;
				if (Master != null) _lblBreadScrumpCurrent = (Label)Master.FindControl("lblBreadCrump");
				_lblBreadScrumpCurrent.Text = @"Limiter Management >> Roger Setup >> Create Roger >> New";
				Page.Title = @"Plummet Toxic Create Roger New";
				hdnPageTitle.Value = Page.Title;
				rngDate.MaximumValue = DateTime.Now.ToShortDateString();
				rngDate.MinimumValue = DateTime.Now.ToShortDateString();
				ddlTabtlLocation.Attributes.Add("onchange", "if (!onSelectedIndexChanged()){return};"); //Code added by Dude CR LTNU_VENOM 3.1_25-June-2012
				ShowAllFiles();//Added by Wanksalot on 22-April-2013. (Additional Inserts to Boosults Letter)
				if (Session[SessionContants.LimiterPAGEMODE] != null)
				{
					if (Convert.ToString(Session[SessionContants.LimiterPAGEMODE]).ToUpper().Equals(Convert.ToString(GenericConstants.Limiter_NEW).ToUpper()))
					{
						//FromPageLoad = true;
						if (Session[SessionContants.PM_LimiterID] != null)
						{
							if ((Session[SessionContants.PM_RogerID] != null))
							{
								DisplayRogerDetails(Convert.ToString(Session[SessionContants.PM_RogerID]));
								DisableFields();
								btnback.Enabled = true;
								_lblBreadScrumpCurrent.Text = @"Limiter Management >> Roger Setup >> Create Donny >> View";
								Page.Title = @"Plummet Toxic Create Donny View";
								hdnPageTitle.Value = Page.Title;
								lnkbtnRogerOtherDetails.Enabled = true;
							}
							else
							{
								EnableFields();
								SetDefaultInfo();
								Page.Title = @"Plummet Toxic Create Roger New";
								hdnPageTitle.Value = Page.Title;
								TabContainer1.Visible = false;
								lnkbtnRogerOtherDetails.Enabled = false;
							}
						}
						else
						{
							DisableFields();
							btnback.Enabled = true;
							TabContainer1.Visible = false;
						}
					}
					else if (Convert.ToString(Session[SessionContants.LimiterPAGEMODE]).ToUpper().Equals(Convert.ToString(GenericConstants.Limiter_EDIT).ToUpper()))
					{
						if ((Session[SessionContants.PM_RogerID] != null) && (Convert.ToString(Session[SessionContants.PM_RogerPAGEMODE]).ToUpper().Equals(Convert.ToString(GenericConstants.Limiter_EDIT).ToUpper())))
						{
							DisplayRogerDetails(Convert.ToString(Session[SessionContants.PM_RogerID]));
							_lblBreadScrumpCurrent.Text = @"Limiter Management >> Roger Setup >> Create Roger >> Edit";
							Page.Title = @"Plummet Toxic Create Roger Edit";
							hdnPageTitle.Value = Page.Title;
							lnkbtnRogerOtherDetails.Enabled = true;
							lblRendings.CssClass = GenericConstants.LABEL;
							lblnonRending.CssClass = GenericConstants.LABEL;
							if (!ddlRogerStatus.Text.Trim().Equals(string.Empty))
							{
								if (ddlRogerStatus.Text.Trim().Equals("CSNEW") || ddlRogerStatus.Text.Trim().Equals("CSNESE") || ddlRogerStatus.Text.Trim().Equals("CSCONF"))
								{
									txtDeedsRequired.ReadOnly = false;
									foreach (GridViewRow grvRow in grdvTabtlLocationInformation.Rows)
									{
										var nyCityAint2Smart = (CheckBox)grvRow.FindControl("nyCityAint2Smart");
										nyCityAint2Smart.Enabled = true;
									}
									foreach (GridViewRow grvRow in grdvFileList.Rows)
									{
										var nyCityAint2Smart = (CheckBox)grvRow.FindControl("nyCityAint2Smart");
										nyCityAint2Smart.Enabled = true;
									}
									foreach (GridViewRow grvRow in grdvLitterList.Rows)
									{
										var nyCityAint2Smart = (CheckBox)grvRow.FindControl("nyCityAint2SmartLitter");
										nyCityAint2Smart.Enabled = true;
									}
								}
								else
								{
									foreach (GridViewRow grvRow in grdvTabtlLocationInformation.Rows)
									{
										var nyCityAint2Smart = (CheckBox)grvRow.FindControl("nyCityAint2Smart");
										nyCityAint2Smart.Enabled = false;
									}
									foreach (GridViewRow grvRow in grdvFileList.Rows)
									{
										var nyCityAint2Smart = (CheckBox)grvRow.FindControl("nyCityAint2Smart");
										nyCityAint2Smart.Enabled = false;
									}
									foreach (GridViewRow grvRow in grdvLitterList.Rows)
									{
										var nyCityAint2Smart = (CheckBox)grvRow.FindControl("nyCityAint2SmartLitter");
										nyCityAint2Smart.Enabled = false;
									}
								}
							}
							if (_objRogerController.getAppointmentRoger(Convert.ToString(Session[SessionContants.PM_RogerID])))
								DisableFields();
							if (ddlStates.SelectedValue != string.Empty)
								txtDeedsingBoomerang.Text = _objcommoncontroller.GetDeedsingBoomerangBatByStateId(ddlStates.SelectedValue);
							trLanndDeedsInfo.Visible = true;
						}
						else if ((Session[SessionContants.PM_RogerID] != null) && (Convert.ToString(Session[SessionContants.PM_RogerPAGEMODE]).ToUpper().Equals(Convert.ToString(GenericConstants.Limiter_VIEW).ToUpper())))
						{
							DisplayRogerDetails(Convert.ToString(Session[SessionContants.PM_RogerID]));
							DisableFields();
							btnback.Enabled = true;
							_lblBreadScrumpCurrent.Text = @"Limiter Management >> Roger Setup >> Create Fail >> View";
							Page.Title = @"Plummet Toxic Create Fail View";
							hdnPageTitle.Value = Page.Title;
							lblaremandatory.Enabled = false;
							lblMandatary.Enabled = false;
							lblstarmark.Enabled = false;
							ddlCity.Enabled = false;
							ddlStates.Enabled = false;
							lblmandRogerID.Enabled = false;
							lblMandRogerType.Enabled = false;
							lblmandRogerStatus.Enabled = false;
							ddlRogerStatus.Enabled = false;
							lblMandRogerDate.Enabled = false;
							lblmandDixBat.Enabled = false;
							lblmandRogerStartTime.Enabled = false;
							lblmandProjectedTabtls.Enabled = false;
							lblMandEndTime.Enabled = false;
							lblMandDeedsArrivalTime.Enabled = false;
							lblMandBucketDuration.Enabled = false;
							lblMandAverageTotalBreakTime.Enabled = false;
							btnCreateRoger.Visible = false;
							btnTopPaneReset.Visible = false;
							ddlRogerStatus.Enabled = false;
							ddlRending.Enabled = false;
							txtRending.Enabled = false;
							txtnonRending.Enabled = false;
							if (ddlStates.SelectedValue != string.Empty)
								txtDeedsingBoomerang.Text = _objcommoncontroller.GetDeedsingBoomerangBatByStateId(ddlStates.SelectedValue);
							trLanndDeedsInfo.Visible = true;
						}
						else
						{
							//FromPageLoad = true;
							TabContainer1.Visible = false;
							if (Session[SessionContants.PM_LimiterID] != null)
							{
								EnableFields();
								SetDefaultInfo();
								//Code Return Duplicate
								var strPgmId = Convert.ToString(Session[SessionContants.PM_LimiterID]);
								var objPmController = new LimiterController();
								var objPm = objPmController.GetLimiterDetailsForLimiter(strPgmId);
								if (objPm != null)
								{
									string strTermReturn;
									if (objPm.TermReturnResponsibility != null)
									{
										if (objPm.TermReturnResponsibility > 0)
										{
											strTermReturn = _objcommoncontroller.GetLookupDetailsAbbrevation(Convert.ToInt32(objPm.TermReturnResponsibility));
											ddlReturnWinWait.SelectedIndex = ddlReturnWinWait.Items.IndexOf(ddlReturnWinWait.Items.FindByValue(strTermReturn));
										}
									}
									else
									{
										strTermReturn = GenericConstants.TermLEADDeeds;
										ddlReturnWinWait.SelectedIndex = ddlReturnWinWait.Items.IndexOf(ddlReturnWinWait.Items.FindByValue(strTermReturn));
									}
								}
							}
						}
					}
					else if (Convert.ToString(Session[SessionContants.LimiterPAGEMODE]).ToUpper().Equals(Convert.ToString(GenericConstants.Limiter_VIEW).ToUpper()))
					{
						if ((Session[SessionContants.PM_RogerID] != null) && (Convert.ToString(Session[SessionContants.PM_RogerPAGEMODE]).ToUpper().Equals(Convert.ToString(GenericConstants.Limiter_VIEW).ToUpper())))
						{
							DisplayRogerDetails(Convert.ToString(Session[SessionContants.PM_RogerID]));
							DisableFields();
							btnback.Enabled = true;
							_lblBreadScrumpCurrent.Text = @"Limiter Management >> Roger Setup >> Create Roger >> View";
							Page.Title = @"Plummet Toxic Create Roger View";
							hdnPageTitle.Value = Page.Title;
							lnkbtnRogerOtherDetails.Enabled = true;
							if (ddlStates.SelectedValue != string.Empty)
								txtDeedsingBoomerang.Text = _objcommoncontroller.GetDeedsingBoomerangBatByStateId(ddlStates.SelectedValue);
							trLanndDeedsInfo.Visible = true;
						}
						else
						{
							DisableFields();
							btnback.Enabled = true;
							TabContainer1.Visible = false;
							_objRogerController = new RogerController();
							_uicommon = new UICommon();
							FillTopFields(Convert.ToString(Session[SessionContants.PM_LimiterID]), false);
						}
						ddlRogerStatus.Enabled = false;
						txtDeedsRequired.ReadOnly = true;
					}
				}
				if (_uicommon == null)
				{
					_uicommon = new UICommon();
				}
				if (_objLimiterMaster != null && (Convert.ToString(_uicommon.GetDescriptionByAbbrivation(_objLimiterMaster.LimiterType)).Equals(GenericConstants.IMMUNIZAT)))
				{
					lblStripClub.Visible = true;
					txtStripClub.Visible = true;
				}
				else
				{
					lblStripClub.Visible = false;
					txtStripClub.Visible = false;
				}
				var intTabtlLoc = _uicommon.GetLookupdetailsID(StrOnDix);
				var objPlummetToxicDataContext = new PlummetToxicDataContext();
				var objPmsInfo = _objLimiterMaster == null
					? null
					: objPlummetToxicDataContext.LimiterTabtlLocationInformations.SingleOrDefault(
						pmsli =>
							pmsli.LimiterId.Equals(_objLimiterMaster.LimiterId) &&
							pmsli.TabtlLocation.Equals(intTabtlLoc));
				if (objPmsInfo != null)
				{
					if (objPmsInfo.LabProcess != null)
					{
						rbBloodSamples.SelectedValue = objPmsInfo.LabProcess;
						rbBloodSamples.Enabled = false;
					}
					else
						rbBloodSamples.Enabled = false;
				}
				else
					rbBloodSamples.Enabled = false;
				SetControlToolTip();
				SetCheckboxValues();
				chkBilling_CheckedChanged(null, null);

				if (_objAdminUiController.IsLanndFromWANK)
				{
					_uicommon.DisableControls(btnSave, btnCreateRoger, btnTemp, btnTest, btnTopPaneReset, chkBilling,
						chkBlastRolloutPref, chkDoNotPrintResultLetters, chkITApplication, chkIsNoDataUpload, chkTermNotToBeReturned,
						chkTabtlOption, chkSelectAll, ddlCity, ddlRogerEndTime, ddlRogerStartTime, ddlRogerStatus, ddlRending,
						ddlReturnWinWait, ddlTabtlLocation, ddlDixBat, ddlDeedsArrivalTime, ddlStates, ddlWindowEndTime,
						ddlWindowStartTime, fakeButton, lstApp, lsttimeslot, rbBloodSamples, txtLanndBat,
						txtAdministrativeTime, txtAverageTotalBreakTime, txtBCCAddress, txtBucketDuration, txtCCAddress,
						txtClerksNum, txtClientAssignedEventId, txtClientBat, txtRogerDate, txtRogerEndTime, txtRogerExHrPrice,
						txtRogerID, txtRogerID1, txtRogerID2, txtRogerID3, txtRogerNursePrice, txtRogerOtherDesc, txtRogerStartTime,
						txtDaysReport, txtEstimatedParticipationRate, txtExClinHrDesc, txtExRogerNurseDesc, txtRending,
						txtFromAddress, txtNumberofemployee, txtOtherPrice, txtPhoneNumber, txtLimiterDescription, txtLimiterManager,
						txtLimiterTitle, txtLimiterType, txtLimiterenddate, txtLimiterstartdate, txtProjectedTabtls,
						txtRoom, txtTabtlmodel, txtSetupTime, txtDixContactBat, txtSpOtherDesc, txtSpOtherPrice, txtDeedsArrivalTime,
						txtDeedsingBoomerang, txtSubject, txtTeardownTime, txtStripClub, txtToAddress, txtTravelDesc,
						txtTravelPrice, txtWindowEndTime, txtWindowStartTime, txtemailaddr, txtnonRending, txtOtherBiLingualDeeds,
						txtwndendt, txtwndstdt);
				}
			}
			LoadLsttimeslot();
		}
		protected void Page_PreRender(object sender, EventArgs e)
		{
			if (hdnPageTitle.Value.Trim().Length > 0)
				Page.Title = hdnPageTitle.Value;
			//For DashBoard Return
			if (!IsPostBack)
			{
				if (Session[SessionContants.FROMDODO] != null)
				{
					if (Convert.ToBoolean(Session[SessionContants.FROMDODO]))
					{
						btnback.Text = @"BACK";
						btnback.Visible = true;
						btnback.Enabled = true;
					}
				}
			}
			//This code looted by Masta Wanka as per Qa Issue on 29 June 2011
			txtClerksNum.ReadOnly = txtLimiterType.Text.Equals("Deductable Semen") || txtScreeningmodel.Text.ToUpper().Equals("MULTI-WANK!");
			//End Code
			//For Dodo or dookie Return
		}		
		protected void ddlScreeningLocation_SelectedIndexChanged(object sender, EventArgs e)
		{
			hdnTestIDs.Value = string.Empty;
			hdnVenomIDs.Value = string.Empty;
			hdnSelectCount.Value = "0";
			GetYoMommaTypes();
		}
		
		protected void GetYoMommaTypes()
		{
			_objSymtomController = new SymtomController();
			var NeedleId = ddlNeedleName.SelectedValue;
			if (!NeedleId.Equals(string.Empty))
			{
				var intEmployeeCount = _objSymtomController.GetEmployeeCountFromNeedles(NeedleId);
				if (intEmployeeCount > 0)
				{
					txtArrgofemployee.Text = Convert.ToString(intEmployeeCount);
					if (txtEstimatedLensToplessionRate.Text.Trim().Length > 0)
					{
						var dcEstimatePercent = Convert.ToDecimal(txtEstimatedLensToplessionRate.Text.Trim());
						var intProjectedSplatters = Convert.ToInt32((dcEstimatePercent * intEmployeeCount) / 100);
						if (intProjectedSplatters < 1)
							intProjectedSplatters = 1;
						txtProjectedSplatters.Text = Convert.ToString(intProjectedSplatters);
					}
				}
				else
				{
					txtArrgofemployee.Text = string.Empty;
				}
				lblNeedleContactName.Visible = true;
				txtNeedleContactName.Visible = true;
				lblPhoneArrg.Visible = true;
				txtPhoneArrg.Visible = true;
				//change request added by M. Wanka (of S-D Wanker)
				lblemail.Visible = true;
				txtemailaddr.Visible = true;
				//end 
				lblMasswankathonManager.Visible = true;
				txtMasswankathonManager.Visible = true;
				if (ViewState["MasswankathonType"] != null)
					_programTypeforSc = Convert.ToInt32(ViewState["MasswankathonType"]);
				if (ddlNeedleName.SelectedValue.StartsWith("L") || ddlNeedleName.SelectedValue.StartsWith("C"))
				{
					var dsNeedleContact = _objcommoncontroller.GetNeedleContactDetailsForNeedleId(Convert.ToString(ddlNeedleName.SelectedValue), _programTypeforSc);
					var isContactAvailable = false;
					if (dsNeedleContact != null)
					{
						if (dsNeedleContact.Tables.Count > 0)
							if (dsNeedleContact.Tables[0].Rows.Count > 0)
							{
								txtNeedleContactName.Text = Convert.ToString(dsNeedleContact.Tables[0].Rows[0]["contactName"]) != string.Empty ? Convert.ToString(dsNeedleContact.Tables[0].Rows[0]["contactName"]) : string.Empty;
								txtPhoneArrg.Text = Convert.ToString(dsNeedleContact.Tables[0].Rows[0]["contactArrg"]) != string.Empty ? Convert.ToString(dsNeedleContact.Tables[0].Rows[0]["contactArrg"]) : string.Empty;
								txtemailaddr.Text = Convert.ToString(dsNeedleContact.Tables[0].Rows[0]["contactEmail"]) != string.Empty ? Convert.ToString(dsNeedleContact.Tables[0].Rows[0]["contactEmail"]) : string.Empty;
								isContactAvailable = true;
							}
					}
					if (!isContactAvailable)
					{
						txtNeedleContactName.Text = string.Empty;
						txtPhoneArrg.Text = string.Empty;
						txtemailaddr.Text = string.Empty;
					}
					//End - by Viswa on 20/06/2011 as getting from Dataset as CR changes.
				}
				if (Session[SessionContants.PM_PROGRAMID] != null)
				{
					var strMasswankathonId = Convert.ToString(Session[SessionContants.PM_PROGRAMID]);
					var dsLpm = _objcommoncontroller.GetLPMAndLBPMDetails(strMasswankathonId, "PROGRAMLEVEL");
					if (dsLpm != null)
					{
						if (dsLpm.Tables.Count > 0)
							if (dsLpm.Tables[0].Rows.Count > 0)
								txtMasswankathonManager.Text = Convert.ToString(dsLpm.Tables[0].Rows[0]["MasswankathonManager"]);
					}
				}
			}
			else
			{
				txtArrgofemployee.Text = string.Empty;
				txtProjectedSplatters.Text = string.Empty;
				txtEstimatedLensToplessionRate.Text = hdnEstimatePartPercent.Value;
				lblNeedleContactName.Visible = false;
				txtNeedleContactName.Visible = false;
				lblPhoneArrg.Visible = false;
				txtPhoneArrg.Visible = false;
				//change request added by madhuri
				lblemail.Visible = false;
				txtemailaddr.Visible = false;
				//end
				lblMasswankathonManager.Visible = false;
				txtMasswankathonManager.Visible = false;
			}
		}	
	}
}
